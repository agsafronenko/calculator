{"ast":null,"code":"export default function calculate(arr) {\n  arr = findNegativeValues(arr);\n  arr = calculateInOrder(arr, \"ln\");\n  arr = calculateInOrder(arr, \"^r\");\n  arr = calculateInOrder(arr, \"*/\");\n  arr = calculateInOrder(arr, \"+-\");\n  return arr[0];\n}\nfunction findNegativeValues(arr) {\n  // console.log(\"arr inside calculate\", arr);\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \"-\" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\");\n  // console.log(\"negativeIndex\", negativeIndex);\n  if (negativeIndex !== -1) {\n    let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n    return findNegativeValues(newArr);\n  }\n  // console.log(\"arr\", arr);\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  // console.log(\"inside SameOperations\", arr, operators);\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = currentOperator === \"l\" ? Math.log(currentOperation[0]) / Math.log(currentOperation[2]) : currentOperator === \"r\" ? Math.pow(currentOperation[0], 1 / currentOperation[2]) : currentOperator === \"^\" ? Math.pow(currentOperation[0], currentOperation[2]) : currentOperator === \"*\" ? currentOperation[0] * currentOperation[2] : currentOperator === \"/\" ? currentOperation[0] / currentOperation[2] : currentOperator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calculateInOrder(result, operators);\n  }\n  // console.log(\"inside SameOperations before return\", arr, operator);\n  return arr;\n}\nexport let displayOpsExpression = \"\";\nexport let resultExpression = [];\nexport function deleteRedundantOperators(state) {\n  if (/\\d/.test(state.displayCur)) {\n    resultExpression = state.result.concat(Number(state.displayCur));\n    displayOpsExpression = state.displayOps;\n  } else {\n    let lastDigitIndex = state.result.reverse().findIndex(elem => /\\d/.test(elem));\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\n    resultExpression = state.result.reverse().slice(0, state.result.length - lastDigitIndex);\n  }\n}\nexport function deleteRedundantDigits(state) {\n  if (/\\./.test(state.displayCur)) {\n    let decimalIndex = state.displayOps.split(\"\").reverse().findIndex(elem => /\\./.test(elem));\n    // console.log(\"decimal\", state.displayOps.split(\"\").reverse());\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\n    // console.log(\"decimalIndex\", decimalIndex);\n  } else if (/\\D/.test(state.displayCur)) {\n    displayOpsExpression = state.displayOps;\n    // console.log(\"hey last input is not a digit\");\n  } else {\n    let lastNonDigitIndex = state.displayOps.split(\"\").reverse().findIndex(elem => /\\D/.test(elem));\n    // console.log(\"lastNon\", lastNonDigitIndex);\n    displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\n  }\n}\nexport let stateStorage = {\n  prevState: []\n};\nexport function saveState(state) {\n  if (stateStorage.prevState.length >= 30) {\n    stateStorage.prevState.pop();\n    stateStorage.prevState.unshift(state);\n  } else {\n    stateStorage.prevState.unshift(state);\n  }\n  return stateStorage.prevState;\n}\nexport function factorial(num) {\n  console.log(\"brrr\", Number.isInteger(num));\n  console.log(num);\n  if (Number.isInteger(num)) {\n    for (let i = num - 1; i > 0; i--) {\n      num *= i;\n    }\n  }\n  return num;\n}","map":{"version":3,"names":["calculate","arr","findNegativeValues","calculateInOrder","negativeIndex","findIndex","elem","ind","newArr","slice","concat","operators","operatorIndex","currentOperator","currentOperation","currentResult","Math","log","pow","result","displayOpsExpression","resultExpression","deleteRedundantOperators","state","test","displayCur","Number","displayOps","lastDigitIndex","reverse","length","deleteRedundantDigits","decimalIndex","split","lastNonDigitIndex","stateStorage","prevState","saveState","pop","unshift","factorial","num","console","isInteger","i"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["export default function calculate(arr) {\r\n  arr = findNegativeValues(arr);\r\n  arr = calculateInOrder(arr, \"ln\");\r\n  arr = calculateInOrder(arr, \"^r\");\r\n  arr = calculateInOrder(arr, \"*/\");\r\n  arr = calculateInOrder(arr, \"+-\");\r\n\r\n  return arr[0];\r\n}\r\n\r\nfunction findNegativeValues(arr) {\r\n  // console.log(\"arr inside calculate\", arr);\r\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \"-\" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\");\r\n  // console.log(\"negativeIndex\", negativeIndex);\r\n  if (negativeIndex !== -1) {\r\n    let newArr = arr\r\n      .slice(0, negativeIndex)\r\n      .concat(arr[negativeIndex + 1] * -1)\r\n      .concat(arr.slice(negativeIndex + 2));\r\n    return findNegativeValues(newArr);\r\n  }\r\n  // console.log(\"arr\", arr);\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  // console.log(\"inside SameOperations\", arr, operators);\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n\r\n    let currentResult =\r\n      currentOperator === \"l\"\r\n        ? Math.log(currentOperation[0]) / Math.log(currentOperation[2])\r\n        : currentOperator === \"r\"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \"^\"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \"*\"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \"/\"\r\n        ? currentOperation[0] / currentOperation[2]\r\n        : currentOperator === \"+\"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  // console.log(\"inside SameOperations before return\", arr, operator);\r\n  return arr;\r\n}\r\n\r\nexport let displayOpsExpression = \"\";\r\nexport let resultExpression = [];\r\n\r\nexport function deleteRedundantOperators(state) {\r\n  if (/\\d/.test(state.displayCur)) {\r\n    resultExpression = state.result.concat(Number(state.displayCur));\r\n    displayOpsExpression = state.displayOps;\r\n  } else {\r\n    let lastDigitIndex = state.result.reverse().findIndex((elem) => /\\d/.test(elem));\r\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\r\n    resultExpression = state.result.reverse().slice(0, state.result.length - lastDigitIndex);\r\n  }\r\n}\r\n\r\nexport function deleteRedundantDigits(state) {\r\n  if (/\\./.test(state.displayCur)) {\r\n    let decimalIndex = state.displayOps\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\./.test(elem));\r\n    // console.log(\"decimal\", state.displayOps.split(\"\").reverse());\r\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\r\n    // console.log(\"decimalIndex\", decimalIndex);\r\n  } else if (/\\D/.test(state.displayCur)) {\r\n    displayOpsExpression = state.displayOps;\r\n    // console.log(\"hey last input is not a digit\");\r\n  } else {\r\n    let lastNonDigitIndex = state.displayOps\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\D/.test(elem));\r\n    // console.log(\"lastNon\", lastNonDigitIndex);\r\n    displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\r\n  }\r\n}\r\n\r\nexport let stateStorage = {\r\n  prevState: [],\r\n};\r\n\r\nexport function saveState(state) {\r\n  if (stateStorage.prevState.length >= 30) {\r\n    stateStorage.prevState.pop();\r\n    stateStorage.prevState.unshift(state);\r\n  } else {\r\n    stateStorage.prevState.unshift(state);\r\n  }\r\n  return stateStorage.prevState;\r\n}\r\n\r\nexport function factorial(num) {\r\n  console.log(\"brrr\", Number.isInteger(num));\r\n  console.log(num);\r\n  if (Number.isInteger(num)) {\r\n    for (let i = num - 1; i > 0; i--) {\r\n      num *= i;\r\n    }\r\n  }\r\n  return num;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}