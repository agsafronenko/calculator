{"ast":null,"code":"export let displayAllExpression = \"\";\n\n// export function deleteRedundantOperators(state, expr) {\n//   console.log(\"deleteRedundant expr\", expr);\n//   if (state.lastInputType === \"operator\") {\n//     let lastDigitIndex = state.displayAll\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\d|\\)/.test(elem));\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\n//   }\n//   addMissingParenthesis(state.parenthesesDelta);\n//   console.log(\"deleteRedundant after\", displayAllExpression);\n// }\n\n// export function addMissingParenthesis(delta) {\n//   if (delta > 0) {\n//     displayAllExpression += \")\";\n//     delta -= 1;\n//     addMissingParenthesis(delta);\n//   }\n// }\n\nexport function deleteRedundantOperators(state) {\n  console.log(\"deleteRedundant\", state.displayAll);\n  console.log(\"state.displayCur\", state.displayCur);\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\n    displayAllExpression = state.displayAll;\n  } else {\n    let lastDigitIndex = state.displayAll.split(\"\").reverse().findIndex(elem => /\\d/.test(elem));\n    displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n  console.log(\"deleteRedundant after\", displayAllExpression);\n}\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayAllExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}","map":{"version":3,"names":["displayAllExpression","deleteRedundantOperators","state","console","log","displayAll","displayCur","lastOperator","test","lastDigitIndex","split","reverse","findIndex","elem","slice","length","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\n// export function deleteRedundantOperators(state, expr) {\r\n//   console.log(\"deleteRedundant expr\", expr);\r\n//   if (state.lastInputType === \"operator\") {\r\n//     let lastDigitIndex = state.displayAll\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\d|\\)/.test(elem));\r\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\r\n//   }\r\n//   addMissingParenthesis(state.parenthesesDelta);\r\n//   console.log(\"deleteRedundant after\", displayAllExpression);\r\n// }\r\n\r\n// export function addMissingParenthesis(delta) {\r\n//   if (delta > 0) {\r\n//     displayAllExpression += \")\";\r\n//     delta -= 1;\r\n//     addMissingParenthesis(delta);\r\n//   }\r\n// }\r\n\r\nexport function deleteRedundantOperators(state) {\r\n  console.log(\"deleteRedundant\", state.displayAll);\r\n  console.log(\"state.displayCur\", state.displayCur);\r\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\r\n    displayAllExpression = state.displayAll;\r\n  } else {\r\n    let lastDigitIndex = state.displayAll\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d/.test(elem));\r\n    displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n  console.log(\"deleteRedundant after\", displayAllExpression);\r\n}\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG,EAAE;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,wBAAwB,CAACC,KAAK,EAAE;EAC9CC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,KAAK,CAACG,UAAU,CAAC;EAChDF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,KAAK,CAACI,UAAU,CAAC;EACjD,IAAIJ,KAAK,CAACK,YAAY,KAAK,cAAc,IAAIL,KAAK,CAACI,UAAU,KAAK,EAAE,IAAI,WAAW,CAACE,IAAI,CAACN,KAAK,CAACI,UAAU,CAAC,EAAE;IAC1GN,oBAAoB,GAAGE,KAAK,CAACG,UAAU;EACzC,CAAC,MAAM;IACL,IAAII,cAAc,GAAGP,KAAK,CAACG,UAAU,CAClCK,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAEC,IAAI,IAAK,IAAI,CAACL,IAAI,CAACK,IAAI,CAAC,CAAC;IACvCb,oBAAoB,GAAGE,KAAK,CAACG,UAAU,CAACS,KAAK,CAAC,CAAC,EAAEZ,KAAK,CAACG,UAAU,CAACU,MAAM,GAAGN,cAAc,CAAC;EAC5F;EACAO,qBAAqB,CAACd,KAAK,CAACe,gBAAgB,CAAC;EAC7Cd,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,oBAAoB,CAAC;AAC5D;AAEA,OAAO,SAASgB,qBAAqB,CAACE,KAAK,EAAE;EAC3C,IAAIA,KAAK,GAAG,CAAC,EAAE;IACblB,oBAAoB,IAAI,GAAG;IAC3BkB,KAAK,IAAI,CAAC;IACVF,qBAAqB,CAACE,KAAK,CAAC;EAC9B;AACF"},"metadata":{},"sourceType":"module"}