{"ast":null,"code":"export var expression=\"\";export var regex=\"\";export function findExpression(state){var displayAll=state.displayAll;if(state.lastResult!==\"\")displayAll=state.lastResult;if(displayAll.match(/\\)\\)$/)&&(state.lastOperator===\"trigonometry\"||state.lastOperator===\"abs\")){var displayAllLength=displayAll.length;var closingNum=1;var openingNum=0;var firstOpeningIndex=0;for(var i=displayAllLength-2;i>=0;i--){if(displayAll[i]===\")\")closingNum++;if(displayAll[i]===\"(\")openingNum++;if(closingNum===openingNum){firstOpeningIndex=i-3;break;}}regex=displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(firstOpeningIndex);}else if(displayAll.match(/\\)\\)$/&&state.lastOperator!==\"trigonometry\"&&state.lastOperator!==\"abs\")){var _displayAllLength=displayAll.length;var _closingNum=1;var _openingNum=0;var _firstOpeningIndex=0;for(var _i=_displayAllLength-2;_i>=0;_i--){if(displayAll[_i]===\")\")_closingNum++;if(displayAll[_i]===\"(\")_openingNum++;if(_closingNum===_openingNum){_firstOpeningIndex=_i;break;}}regex=displayAll.slice(_firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(_firstOpeningIndex);}else if(state.lastOperator===\"trigonometry\"||state.lastOperator===\"abs\"){var matchTrigOrAbs=displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);var lastTrigOrAbsIndex=displayAll.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length-1]);regex=displayAll.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(lastTrigOrAbsIndex);}else if(state.lastInput===\")\"){var _displayAllLength2=displayAll.length;var _closingNum2=1;var _openingNum2=0;var _firstOpeningIndex2=0;for(var _i2=_displayAllLength2-2;_i2>=0;_i2--){if(displayAll[_i2]===\")\")_closingNum2++;if(displayAll[_i2]===\"(\")_openingNum2++;if(_closingNum2===_openingNum2){_firstOpeningIndex2=_i2;break;}}regex=displayAll.slice(_firstOpeningIndex2).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(_firstOpeningIndex2);}else if(state.lastInputType===\"digit\"||state.lastInputType===\"decimal\"){regex=displayAll.match(/\\d+(?:\\.\\d*)?$/)[0];expression=regex;}else if(displayAll.match(/\\(.*\\)(!%|%!|!|%)$/)){var _displayAllLength3=displayAll.length;var _closingNum3=0;var _openingNum3=0;var _firstOpeningIndex3=0;for(var _i3=_displayAllLength3-1;_i3>=0;_i3--){if(displayAll[_i3]===\")\")_closingNum3++;if(displayAll[_i3]===\"(\")_openingNum3++;if(_closingNum3>0&&_closingNum3===_openingNum3){_firstOpeningIndex3=_i3-3;break;}}regex=displayAll.slice(_firstOpeningIndex3).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(_firstOpeningIndex3);}else if(displayAll.match(/\\)(!%|%!|!|%)$/)){var _displayAllLength4=displayAll.length;var _closingNum4=0;var _openingNum4=0;var _firstOpeningIndex4=0;for(var _i4=_displayAllLength4-1;_i4>=0;_i4--){if(displayAll[_i4]===\")\")_closingNum4++;if(displayAll[_i4]===\"(\")_openingNum4++;if(_closingNum4>0&&_closingNum4===_openingNum4){_firstOpeningIndex4=_i4;break;}}regex=displayAll.slice(_firstOpeningIndex4).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");expression=displayAll.slice(_firstOpeningIndex4);}else if(state.lastInputType===\"!\"||state.lastInputType===\"%\"){regex=displayAll.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];expression=regex;}}","map":{"version":3,"names":["expression","regex","findExpression","state","displayAll","lastResult","match","lastOperator","displayAllLength","length","closingNum","openingNum","firstOpeningIndex","i","slice","replace","matchTrigOrAbs","lastTrigOrAbsIndex","lastIndexOf","lastInput","lastInputType"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/findExpression.js"],"sourcesContent":["export let expression = \"\";\r\nexport let regex = \"\";\r\n\r\nexport function findExpression(state) {\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = state.lastResult;\r\n\r\n  if (displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        break;\r\n      }\r\n    }\r\n\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\" && state.lastOperator !== \"abs\")) {\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    let matchTrigOrAbs = displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigOrAbsIndex = displayAll.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length - 1]);\r\n    regex = displayAll.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(lastTrigOrAbsIndex);\r\n  } else if (state.lastInput === \")\") {\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\r\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?$/)[0];\r\n    expression = regex;\r\n  } else if (displayAll.match(/\\(.*\\)(!%|%!|!|%)$/)) {\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 0;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 1; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum > 0 && closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (displayAll.match(/\\)(!%|%!|!|%)$/)) {\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 0;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 1; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum > 0 && closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\r\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\r\n    expression = regex;\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAO,IAAIA,WAAU,CAAG,EAAE,CAC1B,MAAO,IAAIC,MAAK,CAAG,EAAE,CAErB,MAAO,SAASC,eAAc,CAACC,KAAK,CAAE,CACpC,GAAIC,WAAU,CAAGD,KAAK,CAACC,UAAU,CACjC,GAAID,KAAK,CAACE,UAAU,GAAK,EAAE,CAAED,UAAU,CAAGD,KAAK,CAACE,UAAU,CAE1D,GAAID,UAAU,CAACE,KAAK,CAAC,OAAO,CAAC,GAAKH,KAAK,CAACI,YAAY,GAAK,cAAc,EAAIJ,KAAK,CAACI,YAAY,GAAK,KAAK,CAAC,CAAE,CACxG,GAAIC,iBAAgB,CAAGJ,UAAU,CAACK,MAAM,CACxC,GAAIC,WAAU,CAAG,CAAC,CAClB,GAAIC,WAAU,CAAG,CAAC,CAClB,GAAIC,kBAAiB,CAAG,CAAC,CACzB,IAAK,GAAIC,EAAC,CAAGL,gBAAgB,CAAG,CAAC,CAAEK,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC9C,GAAIT,UAAU,CAACS,CAAC,CAAC,GAAK,GAAG,CAAEH,UAAU,EAAE,CACvC,GAAIN,UAAU,CAACS,CAAC,CAAC,GAAK,GAAG,CAAEF,UAAU,EAAE,CACvC,GAAID,UAAU,GAAKC,UAAU,CAAE,CAC7BC,iBAAiB,CAAGC,CAAC,CAAG,CAAC,CACzB,MACF,CACF,CAEAZ,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACF,iBAAiB,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAClFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACF,iBAAiB,CAAC,CAClD,CAAC,IAAM,IAAIR,UAAU,CAACE,KAAK,CAAC,OAAO,EAAIH,KAAK,CAACI,YAAY,GAAK,cAAc,EAAIJ,KAAK,CAACI,YAAY,GAAK,KAAK,CAAC,CAAE,CAC7G,GAAIC,kBAAgB,CAAGJ,UAAU,CAACK,MAAM,CACxC,GAAIC,YAAU,CAAG,CAAC,CAClB,GAAIC,YAAU,CAAG,CAAC,CAClB,GAAIC,mBAAiB,CAAG,CAAC,CACzB,IAAK,GAAIC,GAAC,CAAGL,iBAAgB,CAAG,CAAC,CAAEK,EAAC,EAAI,CAAC,CAAEA,EAAC,EAAE,CAAE,CAC9C,GAAIT,UAAU,CAACS,EAAC,CAAC,GAAK,GAAG,CAAEH,WAAU,EAAE,CACvC,GAAIN,UAAU,CAACS,EAAC,CAAC,GAAK,GAAG,CAAEF,WAAU,EAAE,CACvC,GAAID,WAAU,GAAKC,WAAU,CAAE,CAC7BC,kBAAiB,CAAGC,EAAC,CACrB,MACF,CACF,CACAZ,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACF,kBAAiB,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAClFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACF,kBAAiB,CAAC,CAClD,CAAC,IAAM,IAAIT,KAAK,CAACI,YAAY,GAAK,cAAc,EAAIJ,KAAK,CAACI,YAAY,GAAK,KAAK,CAAE,CAChF,GAAIS,eAAc,CAAGZ,UAAU,CAACE,KAAK,CAAC,+BAA+B,CAAC,CACtE,GAAIW,mBAAkB,CAAGb,UAAU,CAACc,WAAW,CAACF,cAAc,CAACA,cAAc,CAACP,MAAM,CAAG,CAAC,CAAC,CAAC,CAC1FR,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACG,kBAAkB,CAAC,CAACF,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CACnFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACG,kBAAkB,CAAC,CACnD,CAAC,IAAM,IAAId,KAAK,CAACgB,SAAS,GAAK,GAAG,CAAE,CAClC,GAAIX,mBAAgB,CAAGJ,UAAU,CAACK,MAAM,CACxC,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,oBAAiB,CAAG,CAAC,CACzB,IAAK,GAAIC,IAAC,CAAGL,kBAAgB,CAAG,CAAC,CAAEK,GAAC,EAAI,CAAC,CAAEA,GAAC,EAAE,CAAE,CAC9C,GAAIT,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEH,YAAU,EAAE,CACvC,GAAIN,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEF,YAAU,EAAE,CACvC,GAAID,YAAU,GAAKC,YAAU,CAAE,CAC7BC,mBAAiB,CAAGC,GAAC,CACrB,MACF,CACF,CACAZ,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAClFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAClD,CAAC,IAAM,IAAIT,KAAK,CAACiB,aAAa,GAAK,OAAO,EAAIjB,KAAK,CAACiB,aAAa,GAAK,SAAS,CAAE,CAC/EnB,KAAK,CAAGG,UAAU,CAACE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAC7CN,UAAU,CAAGC,KAAK,CACpB,CAAC,IAAM,IAAIG,UAAU,CAACE,KAAK,CAAC,oBAAoB,CAAC,CAAE,CACjD,GAAIE,mBAAgB,CAAGJ,UAAU,CAACK,MAAM,CACxC,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,oBAAiB,CAAG,CAAC,CACzB,IAAK,GAAIC,IAAC,CAAGL,kBAAgB,CAAG,CAAC,CAAEK,GAAC,EAAI,CAAC,CAAEA,GAAC,EAAE,CAAE,CAC9C,GAAIT,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEH,YAAU,EAAE,CACvC,GAAIN,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEF,YAAU,EAAE,CACvC,GAAID,YAAU,CAAG,CAAC,EAAIA,YAAU,GAAKC,YAAU,CAAE,CAC/CC,mBAAiB,CAAGC,GAAC,CAAG,CAAC,CACzB,MACF,CACF,CACAZ,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAClFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAClD,CAAC,IAAM,IAAIR,UAAU,CAACE,KAAK,CAAC,gBAAgB,CAAC,CAAE,CAC7C,GAAIE,mBAAgB,CAAGJ,UAAU,CAACK,MAAM,CACxC,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,aAAU,CAAG,CAAC,CAClB,GAAIC,oBAAiB,CAAG,CAAC,CACzB,IAAK,GAAIC,IAAC,CAAGL,kBAAgB,CAAG,CAAC,CAAEK,GAAC,EAAI,CAAC,CAAEA,GAAC,EAAE,CAAE,CAC9C,GAAIT,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEH,YAAU,EAAE,CACvC,GAAIN,UAAU,CAACS,GAAC,CAAC,GAAK,GAAG,CAAEF,YAAU,EAAE,CACvC,GAAID,YAAU,CAAG,CAAC,EAAIA,YAAU,GAAKC,YAAU,CAAE,CAC/CC,mBAAiB,CAAGC,GAAC,CACrB,MACF,CACF,CACAZ,KAAK,CAAGG,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAACG,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAClFf,UAAU,CAAGI,UAAU,CAACU,KAAK,CAACF,mBAAiB,CAAC,CAClD,CAAC,IAAM,IAAIT,KAAK,CAACiB,aAAa,GAAK,GAAG,EAAIjB,KAAK,CAACiB,aAAa,GAAK,GAAG,CAAE,CACrEnB,KAAK,CAAGG,UAAU,CAACE,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,CACxDN,UAAU,CAAGC,KAAK,CACpB,CACF"},"metadata":{},"sourceType":"module"}