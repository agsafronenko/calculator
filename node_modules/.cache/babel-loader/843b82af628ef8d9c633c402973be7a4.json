{"ast":null,"code":"export let expression = \"\";\nexport let expressionNegative = \"\";\nexport function findExpression(state) {\n  let displayAll = state.displayAll;\n  if (state.lastResult !== \"\") displayAll = state.lastResult;\n  if (displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n    console.log(\"stage 1 start\");\n    let displayAllLength = displayAll.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayAllLength - 2; i >= 0; i--) {\n      if (displayAll[i] === \")\") closingNum++;\n      if (displayAll[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i - 3;\n        break;\n      }\n    }\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayAll.slice(firstOpeningIndex);\n  } else if (displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\" && state.lastOperator !== \"abs\")) {\n    console.log(\"stage 2 start\");\n    let displayAllLength = displayAll.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayAllLength - 2; i >= 0; i--) {\n      if (displayAll[i] === \")\") closingNum++;\n      if (displayAll[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayAll.slice(firstOpeningIndex);\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n    console.log(\"stage 3 start\");\n    let matchTrigOrAbs = displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n    let lastTrigOrAbsIndex = displayAll.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length - 1]);\n    regex = displayAll.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayAll.slice(lastTrigOrAbsIndex);\n  } else if (state.lastInput === \")\") {\n    console.log(\"stage 4 start\");\n    let displayAllLength = displayAll.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayAllLength - 2; i >= 0; i--) {\n      if (displayAll[i] === \")\") closingNum++;\n      if (displayAll[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayAll.slice(firstOpeningIndex);\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\n    console.log(\"stage 5 start\");\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?$/)[0];\n    expression = regex;\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\n    console.log(\"stage 6 start\");\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\n    expression = regex;\n  }\n  expressionNegative = displayAll.endsWith(` - ${expression}`);\n}","map":{"version":3,"names":["expression","expressionNegative","findExpression","state","displayAll","lastResult","match","lastOperator","console","log","displayAllLength","length","closingNum","openingNum","firstOpeningIndex","i","regex","slice","replace","matchTrigOrAbs","lastTrigOrAbsIndex","lastIndexOf","lastInput","lastInputType","endsWith"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/findExpression.js"],"sourcesContent":["export let expression = \"\";\r\nexport let expressionNegative = \"\";\r\n\r\nexport function findExpression(state) {\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = state.lastResult;\r\n\r\n  if (displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"stage 1 start\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        break;\r\n      }\r\n    }\r\n\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\" && state.lastOperator !== \"abs\")) {\r\n    console.log(\"stage 2 start\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"stage 3 start\");\r\n    let matchTrigOrAbs = displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigOrAbsIndex = displayAll.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length - 1]);\r\n    regex = displayAll.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(lastTrigOrAbsIndex);\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"stage 4 start\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayAll.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayAll.slice(firstOpeningIndex);\r\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\r\n    console.log(\"stage 5 start\");\r\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?$/)[0];\r\n    expression = regex;\r\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"stage 6 start\");\r\n    regex = displayAll.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\r\n    expression = regex;\r\n  }\r\n  expressionNegative = displayAll.endsWith(` - ${expression}`);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}