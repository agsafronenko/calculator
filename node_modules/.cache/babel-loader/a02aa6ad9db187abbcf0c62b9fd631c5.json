{"ast":null,"code":"export var changeOneIntoAnother=[// change for:\n// 1) the expression not preceded by operators\n{before:\"\\\\(\",afterChangeSign:\"( - \",afterAbs:\"(abs(\",afterAfterDenomination:\"((1 / (\",afterTrigonometry:\"(trigFunc(\"},{before:\"\\\\( - \",afterChangeSign:\"(\",afterAbs:\"(abs( - \",afterAfterDenomination:\"((1 / ( - \",afterTrigonometry:\"(trigFunc( - \"},{before:\"^\",afterChangeSign:\" - \",afterAbs:\"abs(\",afterAfterDenomination:\"(1 / (\",afterTrigonometry:\"trigFunc(\"},{before:\"^ - \",afterChangeSign:\"\",afterAbs:\"abs( - \",afterAfterDenomination:\"(1 / ( - \",afterTrigonometry:\"trigFunc( - \"},// 2) the expression preceded by two consecutive operators:\n{before:\" -  - \",afterChangeSign:\" - \",afterAbs:\" - abs( - \",afterAfterDenomination:\" - (1 / ( - \",afterTrigonometry:\" - trigFunc( - \"},{before:\" \\\\+  - \",afterChangeSign:\" + \",afterAbs:\" + abs( - \",afterAfterDenomination:\" + (1 / ( - \",afterTrigonometry:\" + trigFunc( - \"},{before:\" \\\\*  - \",afterChangeSign:\" * \",afterAbs:\" * abs( - \",afterAfterDenomination:\" * (1 / ( - \",afterTrigonometry:\" * trigFunc( - \"},{before:\" \\\\/  - \",afterChangeSign:\" / \",afterAbs:\" / abs( - \",afterAfterDenomination:\" / (1 / ( - \",afterTrigonometry:\" / trigFunc( - \"},{before:\" \\\\^  - \",afterChangeSign:\" ^ \",afterAbs:\" ^ abs( - \",afterAfterDenomination:\" ^ (1 / ( - \",afterTrigonometry:\" ^ trigFunc( - \"},{before:\" yroot  - \",afterChangeSign:\" yroot \",afterAbs:\" yroot abs( - \",afterAfterDenomination:\" yroot (1 / ( - \",afterTrigonometry:\" yroot trigFunc( - \"},{before:\" mod  - \",afterChangeSign:\" mod \",afterAbs:\" mod abs( - \",afterAfterDenomination:\" mod (1 / ( - \",afterTrigonometry:\" mod trigFunc( - \"},// 3) the expression preceded by only one operator:\n{before:\" - \",afterChangeSign:\" + \",afterAbs:\" - abs(\",afterAfterDenomination:\" - (1 / (\",afterTrigonometry:\" - trigFunc(\"},{before:\" \\\\+ \",afterChangeSign:\" - \",afterAbs:\" + abs(\",afterAfterDenomination:\" + (1 / (\",afterTrigonometry:\" + trigFunc(\"},{before:\" \\\\* \",afterChangeSign:\" *  - \",afterAbs:\" * abs(\",afterAfterDenomination:\" * (1 / (\",afterTrigonometry:\" * trigFunc(\"},{before:\" \\\\/ \",afterChangeSign:\" /  - \",afterAbs:\" / abs(\",afterAfterDenomination:\" / (1 / (\",afterTrigonometry:\" / trigFunc(\"},{before:\" \\\\^ \",afterChangeSign:\" ^  - \",afterAbs:\" ^ abs(\",afterAfterDenomination:\" ^ (1 / (\",afterTrigonometry:\" ^ trigFunc(\"},{before:\" yroot \",afterChangeSign:\" yroot  - \",afterAbs:\" yroot abs(\",afterAfterDenomination:\" yroot (1 / (\",afterTrigonometry:\" yroot trigFunc(\"},{before:\" log base \",afterChangeSign:\" log base \",afterAbs:\" log base abs(\",afterAfterDenomination:\" log base (1 / (\",afterTrigonometry:\" log base trigFunc(\"},{before:\" mod \",afterChangeSign:\" mod \",afterAbs:\" mod abs(\",afterAfterDenomination:\" mod (1 / (\",afterTrigonometry:\" mod trigFunc(\"}];","map":{"version":3,"names":["changeOneIntoAnother","before","afterChangeSign","afterAbs","afterAfterDenomination","afterTrigonometry"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeOneIntoAnother.js"],"sourcesContent":["export let changeOneIntoAnother = [\r\n  // change for:\r\n  // 1) the expression not preceded by operators\r\n  {\r\n    before: \"\\\\(\",\r\n    afterChangeSign: \"( - \",\r\n    afterAbs: \"(abs(\",\r\n    afterAfterDenomination: \"((1 / (\",\r\n    afterTrigonometry: `(trigFunc(`,\r\n  },\r\n  {\r\n    before: \"\\\\( - \",\r\n    afterChangeSign: \"(\",\r\n    afterAbs: \"(abs( - \",\r\n    afterAfterDenomination: \"((1 / ( - \",\r\n    afterTrigonometry: `(trigFunc( - `,\r\n  },\r\n  {\r\n    before: \"^\",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \"abs(\",\r\n    afterAfterDenomination: \"(1 / (\",\r\n    afterTrigonometry: `trigFunc(`,\r\n  },\r\n  {\r\n    before: \"^ - \",\r\n    afterChangeSign: \"\",\r\n    afterAbs: \"abs( - \",\r\n    afterAfterDenomination: \"(1 / ( - \",\r\n    afterTrigonometry: `trigFunc( - `,\r\n  },\r\n\r\n  // 2) the expression preceded by two consecutive operators:\r\n  {\r\n    before: \" -  - \",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \" - abs( - \",\r\n    afterAfterDenomination: \" - (1 / ( - \",\r\n    afterTrigonometry: ` - trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" \\\\+  - \",\r\n    afterChangeSign: \" + \",\r\n    afterAbs: \" + abs( - \",\r\n    afterAfterDenomination: \" + (1 / ( - \",\r\n    afterTrigonometry: ` + trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" \\\\*  - \",\r\n    afterChangeSign: \" * \",\r\n    afterAbs: \" * abs( - \",\r\n    afterAfterDenomination: \" * (1 / ( - \",\r\n    afterTrigonometry: ` * trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" \\\\/  - \",\r\n    afterChangeSign: \" / \",\r\n    afterAbs: \" / abs( - \",\r\n    afterAfterDenomination: \" / (1 / ( - \",\r\n    afterTrigonometry: ` / trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" \\\\^  - \",\r\n    afterChangeSign: \" ^ \",\r\n    afterAbs: \" ^ abs( - \",\r\n    afterAfterDenomination: \" ^ (1 / ( - \",\r\n    afterTrigonometry: ` ^ trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" yroot  - \",\r\n    afterChangeSign: \" yroot \",\r\n    afterAbs: \" yroot abs( - \",\r\n    afterAfterDenomination: \" yroot (1 / ( - \",\r\n    afterTrigonometry: ` yroot trigFunc( - `,\r\n  },\r\n  {\r\n    before: \" mod  - \",\r\n    afterChangeSign: \" mod \",\r\n    afterAbs: \" mod abs( - \",\r\n    afterAfterDenomination: \" mod (1 / ( - \",\r\n    afterTrigonometry: ` mod trigFunc( - `,\r\n  },\r\n  // 3) the expression preceded by only one operator:\r\n  {\r\n    before: \" - \",\r\n    afterChangeSign: \" + \",\r\n    afterAbs: \" - abs(\",\r\n    afterAfterDenomination: \" - (1 / (\",\r\n    afterTrigonometry: ` - trigFunc(`,\r\n  },\r\n  {\r\n    before: \" \\\\+ \",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \" + abs(\",\r\n    afterAfterDenomination: \" + (1 / (\",\r\n    afterTrigonometry: ` + trigFunc(`,\r\n  },\r\n  {\r\n    before: \" \\\\* \",\r\n    afterChangeSign: \" *  - \",\r\n    afterAbs: \" * abs(\",\r\n    afterAfterDenomination: \" * (1 / (\",\r\n    afterTrigonometry: ` * trigFunc(`,\r\n  },\r\n  {\r\n    before: \" \\\\/ \",\r\n    afterChangeSign: \" /  - \",\r\n    afterAbs: \" / abs(\",\r\n    afterAfterDenomination: \" / (1 / (\",\r\n    afterTrigonometry: ` / trigFunc(`,\r\n  },\r\n  {\r\n    before: \" \\\\^ \",\r\n    afterChangeSign: \" ^  - \",\r\n    afterAbs: \" ^ abs(\",\r\n    afterAfterDenomination: \" ^ (1 / (\",\r\n    afterTrigonometry: ` ^ trigFunc(`,\r\n  },\r\n  {\r\n    before: \" yroot \",\r\n    afterChangeSign: \" yroot  - \",\r\n    afterAbs: \" yroot abs(\",\r\n    afterAfterDenomination: \" yroot (1 / (\",\r\n    afterTrigonometry: ` yroot trigFunc(`,\r\n  },\r\n  {\r\n    before: \" log base \",\r\n    afterChangeSign: \" log base \",\r\n    afterAbs: \" log base abs(\",\r\n    afterAfterDenomination: \" log base (1 / (\",\r\n    afterTrigonometry: ` log base trigFunc(`,\r\n  },\r\n  {\r\n    before: \" mod \",\r\n    afterChangeSign: \" mod \",\r\n    afterAbs: \" mod abs(\",\r\n    afterAfterDenomination: \" mod (1 / (\",\r\n    afterTrigonometry: ` mod trigFunc(`,\r\n  },\r\n];\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}