{"ast":null,"code":"export let finalDisplayOpsChangeSign = \"\";\nlet expression = \"\";\nlet regex = \"\";\nexport function changeSign(state) {\n  console.clear();\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  let changeOneIntoAnother = [{\n    before: \" \\\\-  - \",\n    after: \" - \"\n  }, {\n    before: \" \\\\+  - \",\n    after: \" + \"\n  }, {\n    before: ` \\\\* `,\n    after: ` *  - `\n  }, {\n    before: \" \\\\*  - \",\n    after: \" * \"\n  }, {\n    before: \" \\\\/  - \",\n    after: \" / \"\n  }, {\n    before: \" ^ - \",\n    after: \" ^ \"\n  }, {\n    before: \" yroot - \",\n    after: \" yroot \"\n  }, {\n    before: \" - \",\n    after: \" + \"\n  }, {\n    before: \" \\\\+ \",\n    after: \" - \"\n  }, {\n    before: \"\",\n    after: \" - \"\n  }];\n  findExpression(state);\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    // arr.push(displayOps.match(`\\\\(8 \\\\+ 9\\\\)$`));    it works!\n\n    arr.push(displayOps.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n    // arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\n  }\n\n  console.log(\"displayOps\", displayOps);\n  console.log(\"expression\", expression);\n  console.log(\"final\", RegExp(displayOps.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\n  console.log(\"arr\", arr);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\n      break;\n    }\n  }\n  return finalDisplayOpsChangeSign;\n}\nfunction findExpression(state) {\n  let displayOps = state.displayOps;\n  if (displayOps.match(/\\\\)\\\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n    console.log(\"stage 1 start\");\n    let displayOpsLength = displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (displayOps[i] === \")\") closingNum++;\n      if (displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i - 3;\n        break;\n      }\n    }\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayOps.slice(firstOpeningIndex);\n  } else if (displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\" && state.lastOperator !== \"abs\")) {\n    console.log(\"stage 2 start\");\n    let displayOpsLength = displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (displayOps[i] === \")\") closingNum++;\n      if (displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayOps.slice(firstOpeningIndex);\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n    console.log(\"stage 3 start\");\n    let matchTrigOrAbs = displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n    let lastTrigOrAbsIndex = displayOps.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length - 1]);\n    regex = displayOps.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayOps.slice(lastTrigOrAbsIndex);\n  } else if (state.lastInput === \")\") {\n    console.log(\"stage 4 start\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (displayOps[i] === \")\") closingNum++;\n      if (displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n    expression = displayOps.slice(firstOpeningIndex);\n    // return state.displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\n    console.log(\"stage 5 start\");\n    regex = displayOps.match(/\\d+(?:\\.\\d*)?$/);\n    expression = regex;\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\n    console.log(\"stage 6 start\");\n    regex = displayOps.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\n    expression = regex;\n  }\n}","map":{"version":3,"names":["finalDisplayOpsChangeSign","expression","regex","changeSign","state","console","clear","displayOps","lastResult","concat","changeOneIntoAnother","before","after","findExpression","arr","i","length","push","match","RegExp","log","slice","index","lastOperator","displayOpsLength","closingNum","openingNum","firstOpeningIndex","replace","matchTrigOrAbs","lastTrigOrAbsIndex","lastIndexOf","lastInput","lastInputType"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeSign.js"],"sourcesContent":["export let finalDisplayOpsChangeSign = \"\";\r\nlet expression = \"\";\r\nlet regex = \"\";\r\n\r\nexport function changeSign(state) {\r\n  console.clear();\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n\r\n  let changeOneIntoAnother = [\r\n    {\r\n      before: \" \\\\-  - \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: ` \\\\* `,\r\n      after: ` *  - `,\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      after: \" * \",\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      after: \" / \",\r\n    },\r\n    {\r\n      before: \" ^ - \",\r\n      after: \" ^ \",\r\n    },\r\n    {\r\n      before: \" yroot - \",\r\n      after: \" yroot \",\r\n    },\r\n    {\r\n      before: \" - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \"\",\r\n      after: \" - \",\r\n    },\r\n  ];\r\n\r\n  findExpression(state);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    // arr.push(displayOps.match(`\\\\(8 \\\\+ 9\\\\)$`));    it works!\r\n\r\n    arr.push(displayOps.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n    // arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\r\n  }\r\n  console.log(\"displayOps\", displayOps);\r\n  console.log(\"expression\", expression);\r\n  console.log(\"final\", RegExp(displayOps.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\r\n  console.log(\"arr\", arr);\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\r\n      break;\r\n    }\r\n  }\r\n  return finalDisplayOpsChangeSign;\r\n}\r\n\r\nfunction findExpression(state) {\r\n  let displayOps = state.displayOps;\r\n  if (displayOps.match(/\\\\)\\\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"stage 1 start\");\r\n    let displayOpsLength = displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (displayOps[i] === \")\") closingNum++;\r\n      if (displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        break;\r\n      }\r\n    }\r\n\r\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayOps.slice(firstOpeningIndex);\r\n  } else if (displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\" && state.lastOperator !== \"abs\")) {\r\n    console.log(\"stage 2 start\");\r\n    let displayOpsLength = displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (displayOps[i] === \")\") closingNum++;\r\n      if (displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayOps.slice(firstOpeningIndex);\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"stage 3 start\");\r\n    let matchTrigOrAbs = displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigOrAbsIndex = displayOps.lastIndexOf(matchTrigOrAbs[matchTrigOrAbs.length - 1]);\r\n    regex = displayOps.slice(lastTrigOrAbsIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayOps.slice(lastTrigOrAbsIndex);\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"stage 4 start\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (displayOps[i] === \")\") closingNum++;\r\n      if (displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    regex = displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n    expression = displayOps.slice(firstOpeningIndex);\r\n    // return state.displayOps.slice(firstOpeningIndex).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\r\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\r\n    console.log(\"stage 5 start\");\r\n    regex = displayOps.match(/\\d+(?:\\.\\d*)?$/);\r\n    expression = regex;\r\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"stage 6 start\");\r\n    regex = displayOps.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\r\n    expression = regex;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}