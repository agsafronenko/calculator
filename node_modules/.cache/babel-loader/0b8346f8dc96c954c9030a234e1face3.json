{"ast":null,"code":"export let displayAllExpression = \"\";\nlet openingParanthesesAfterTheLastDigit = 0;\nexport function FixIncompleteInputs(state, expr) {\n  openingParanthesesAfterTheLastDigit = 0;\n  if (state.lastInputType !== \"digit\" || state.lastInput !== \")\") {\n    let lastDigitIndex = expr.split(\"\").reverse().findIndex(elem => /\\d|\\)/.test(elem));\n    displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\n    console.log(\"expr\", expr, \"lastDigitIndex\", lastDigitIndex);\n    let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex);\n    findOpeningParanthesesAfterTheLastDigit();\n  } else {\n    displayAllExpression = expr;\n  }\n  addMissingParenthesis(state.parenthesesDelta - openingParanthesesAfterTheLastDigit);\n  console.log(\"deleteRedundant after\", displayAllExpression);\n}\n_c = FixIncompleteInputs;\nfunction findOpeningParanthesesAfterTheLastDigit(expr) {\n  for (let i = 0; i < afterTheLastDigit.length; i++) {\n    console.log(\"i\", i);\n    if (afterTheLastDigit[i] === \"(\") openingParanthesesAfterTheLastDigit++;\n  }\n}\nfunction addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayAllExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"FixIncompleteInputs\");","map":{"version":3,"names":["displayAllExpression","openingParanthesesAfterTheLastDigit","FixIncompleteInputs","state","expr","lastInputType","lastInput","lastDigitIndex","split","reverse","findIndex","elem","test","slice","length","console","log","afterTheLastDigit","findOpeningParanthesesAfterTheLastDigit","addMissingParenthesis","parenthesesDelta","i","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\nlet openingParanthesesAfterTheLastDigit = 0;\r\n\r\nexport function FixIncompleteInputs(state, expr) {\r\n  openingParanthesesAfterTheLastDigit = 0;\r\n  if (state.lastInputType !== \"digit\" || state.lastInput !== \")\") {\r\n    let lastDigitIndex = expr\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d|\\)/.test(elem));\r\n    displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\r\n    console.log(\"expr\", expr, \"lastDigitIndex\", lastDigitIndex);\r\n\r\n    let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex);\r\n\r\n    findOpeningParanthesesAfterTheLastDigit();\r\n  } else {\r\n    displayAllExpression = expr;\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta - openingParanthesesAfterTheLastDigit);\r\n  console.log(\"deleteRedundant after\", displayAllExpression);\r\n}\r\n\r\nfunction findOpeningParanthesesAfterTheLastDigit(expr) {\r\n  for (let i = 0; i < afterTheLastDigit.length; i++) {\r\n    console.log(\"i\", i);\r\n    if (afterTheLastDigit[i] === \"(\") openingParanthesesAfterTheLastDigit++;\r\n  }\r\n}\r\n\r\nfunction addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG,EAAE;AAEpC,IAAIC,mCAAmC,GAAG,CAAC;AAE3C,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC/CH,mCAAmC,GAAG,CAAC;EACvC,IAAIE,KAAK,CAACE,aAAa,KAAK,OAAO,IAAIF,KAAK,CAACG,SAAS,KAAK,GAAG,EAAE;IAC9D,IAAIC,cAAc,GAAGH,IAAI,CACtBI,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAEC,IAAI,IAAK,OAAO,CAACC,IAAI,CAACD,IAAI,CAAC,CAAC;IAC1CX,oBAAoB,GAAGI,IAAI,CAACS,KAAK,CAAC,CAAC,EAAET,IAAI,CAACU,MAAM,GAAGP,cAAc,CAAC;IAClEQ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEZ,IAAI,EAAE,gBAAgB,EAAEG,cAAc,CAAC;IAE3D,IAAIU,iBAAiB,GAAGb,IAAI,CAACS,KAAK,CAACT,IAAI,CAACU,MAAM,GAAGP,cAAc,CAAC;IAEhEW,uCAAuC,EAAE;EAC3C,CAAC,MAAM;IACLlB,oBAAoB,GAAGI,IAAI;EAC7B;EACAe,qBAAqB,CAAChB,KAAK,CAACiB,gBAAgB,GAAGnB,mCAAmC,CAAC;EACnFc,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEhB,oBAAoB,CAAC;AAC5D;AAAC,KAlBeE,mBAAmB;AAoBnC,SAASgB,uCAAuC,CAACd,IAAI,EAAE;EACrD,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,iBAAiB,CAACH,MAAM,EAAEO,CAAC,EAAE,EAAE;IACjDN,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEK,CAAC,CAAC;IACnB,IAAIJ,iBAAiB,CAACI,CAAC,CAAC,KAAK,GAAG,EAAEpB,mCAAmC,EAAE;EACzE;AACF;AAEA,SAASkB,qBAAqB,CAACG,KAAK,EAAE;EACpC,IAAIA,KAAK,GAAG,CAAC,EAAE;IACbtB,oBAAoB,IAAI,GAAG;IAC3BsB,KAAK,IAAI,CAAC;IACVH,qBAAqB,CAACG,KAAK,CAAC;EAC9B;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module"}