{"ast":null,"code":"import { expression, expressionNegative, findExpression } from \"./findExpression\";\nimport calculate from \"./equals\";\nlet stateForFactorial = \"\";\nexport function factorialState(state) {\n  stateForFactorial = state;\n}\nexport function factorial(num) {\n  validInput(stateForFactorial);\n  let result = \"\";\n  if (num < 0) {\n    // if (stateForFactorial.factorialAlert) {\n    //   console.log(\"you are in factorialAlert section\")\n    //   alert(\"invalid input: factorials are only defined for positive numbers\");\n    //   }\n    // HERE PLACE CODE TO BLOCK ALL BUTTONS EXCEPT FOR ac and del (consider also numbers, specials numbers, opening brace, random number, decimal, minus --- better just ac and del)\n    return \"invalid input\";\n  } else if (num % 1 !== 0 && num !== \")\") {\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\n  } else if (num === \")\") {\n    return \"!\";\n  } else {\n    result = Number(num);\n    if (Number.isInteger(result)) {\n      for (let i = result - 1; i > 0; i--) {\n        result *= i;\n      }\n      return result;\n    }\n  }\n}\nexport function validInput(state) {\n  findExpression(state);\n  let result = calculate(state, expression);\n  console.log(\"you are in factorial: RESULT\", result, \"EXPRESSION\", expression, expressionNegative);\n  if (result < 0) {\n    // alert(\"invalid input: factorials are only defined for positive numbers\");\n    return \"invalid input\";\n  } else if (result % 1 !== 0) {\n    alert(`factorials for nonintegers are defined based on simplified Gamma function:\n      ~~ level of accuracy: low ~~`);\n  }\n}","map":{"version":3,"names":["expression","expressionNegative","findExpression","calculate","stateForFactorial","factorialState","state","factorial","num","validInput","result","Math","pow","PI","E","Number","isInteger","i","console","log","alert"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { expression, expressionNegative, findExpression } from \"./findExpression\";\r\nimport calculate from \"./equals\";\r\n\r\nlet stateForFactorial = \"\";\r\nexport function factorialState(state) {\r\n  stateForFactorial = state;\r\n}\r\n\r\nexport function factorial(num) {\r\n  validInput(stateForFactorial);\r\n  let result = \"\";\r\n  if (num < 0) {\r\n    // if (stateForFactorial.factorialAlert) {\r\n    //   console.log(\"you are in factorialAlert section\")\r\n    //   alert(\"invalid input: factorials are only defined for positive numbers\");\r\n    //   }\r\n    // HERE PLACE CODE TO BLOCK ALL BUTTONS EXCEPT FOR ac and del (consider also numbers, specials numbers, opening brace, random number, decimal, minus --- better just ac and del)\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0 && num !== \")\") {\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else if (num === \")\") {\r\n    return \"!\";\r\n  } else {\r\n    result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\nexport function validInput(state) {\r\n  findExpression(state);\r\n  let result = calculate(state, expression);\r\n  console.log(\"you are in factorial: RESULT\", result, \"EXPRESSION\", expression, expressionNegative);\r\n  if (result < 0) {\r\n    // alert(\"invalid input: factorials are only defined for positive numbers\");\r\n    return \"invalid input\";\r\n  } else if (result % 1 !== 0) {\r\n    alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n      ~~ level of accuracy: low ~~`);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,kBAAkB;AACjF,OAAOC,SAAS,MAAM,UAAU;AAEhC,IAAIC,iBAAiB,GAAG,EAAE;AAC1B,OAAO,SAASC,cAAc,CAACC,KAAK,EAAE;EACpCF,iBAAiB,GAAGE,KAAK;AAC3B;AAEA,OAAO,SAASC,SAAS,CAACC,GAAG,EAAE;EAC7BC,UAAU,CAACL,iBAAiB,CAAC;EAC7B,IAAIM,MAAM,GAAG,EAAE;EACf,IAAIF,GAAG,GAAG,CAAC,EAAE;IACX;IACA;IACA;IACA;IACA;IACA,OAAO,eAAe;EACxB,CAAC,MAAM,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,IAAIA,GAAG,KAAK,GAAG,EAAE;IACvC,OAAOG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,GAAG,GAAGG,IAAI,CAACE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACJ,GAAG,GAAGG,IAAI,CAACG,CAAC,EAAEN,GAAG,CAAC;EACzE,CAAC,MAAM,IAAIA,GAAG,KAAK,GAAG,EAAE;IACtB,OAAO,GAAG;EACZ,CAAC,MAAM;IACLE,MAAM,GAAGK,MAAM,CAACP,GAAG,CAAC;IACpB,IAAIO,MAAM,CAACC,SAAS,CAACN,MAAM,CAAC,EAAE;MAC5B,KAAK,IAAIO,CAAC,GAAGP,MAAM,GAAG,CAAC,EAAEO,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnCP,MAAM,IAAIO,CAAC;MACb;MACA,OAAOP,MAAM;IACf;EACF;AACF;AAEA,OAAO,SAASD,UAAU,CAACH,KAAK,EAAE;EAChCJ,cAAc,CAACI,KAAK,CAAC;EACrB,IAAII,MAAM,GAAGP,SAAS,CAACG,KAAK,EAAEN,UAAU,CAAC;EACzCkB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAET,MAAM,EAAE,YAAY,EAAEV,UAAU,EAAEC,kBAAkB,CAAC;EACjG,IAAIS,MAAM,GAAG,CAAC,EAAE;IACd;IACA,OAAO,eAAe;EACxB,CAAC,MAAM,IAAIA,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3BU,KAAK,CAAE;AACX,mCAAmC,CAAC;EAClC;AACF"},"metadata":{},"sourceType":"module"}