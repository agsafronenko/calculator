{"ast":null,"code":"import calculate from \"./equals\";\nimport { expression, regex, findExpression } from \"./findExpression\";\nexport let displayAllAfterAbs = \"\";\nlet displayAll = \"\";\nexport function abs(state) {\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\n\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n  }\n  // console.log(\"displayAll\", displayAll);\n  // console.log(\"expression\", expression);\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\n  // console.log(\"arr\", arr);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      displayAllAfterAbs = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterAbs\"]).concat(expression).concat(\")\");\n      break;\n    }\n  }\n  return displayAllAfterAbs;\n}","map":{"version":3,"names":["calculate","expression","regex","findExpression","displayAllAfterAbs","displayAll","abs","state","lastResult","arr","i","changeOneIntoAnother","length","push","match","RegExp","slice","index","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/abs.js"],"sourcesContent":["import calculate from \"./equals\";\r\nimport { expression, regex, findExpression } from \"./findExpression\";\r\n\r\nexport let displayAllAfterAbs = \"\";\r\nlet displayAll = \"\";\r\n\r\nexport function abs(state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n  // console.log(\"displayAll\", displayAll);\r\n  // console.log(\"expression\", expression);\r\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\r\n  // console.log(\"arr\", arr);\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterAbs = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterAbs\"]).concat(expression).concat(\")\");\r\n\r\n      break;\r\n    }\r\n  }\r\n  return displayAllAfterAbs;\r\n}\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAChC,SAASC,UAAU,EAAEC,KAAK,EAAEC,cAAc,QAAQ,kBAAkB;AAEpE,OAAO,IAAIC,kBAAkB,GAAG,EAAE;AAClC,IAAIC,UAAU,GAAG,EAAE;AAEnB,OAAO,SAASC,GAAG,CAACC,KAAK,EAAE;EACzBF,UAAU,GAAGE,KAAK,CAACC,UAAU,KAAK,EAAE,GAAGD,KAAK,CAACC,UAAU,GAAGD,KAAK,CAACF,UAAU;EAE1EF,cAAc,CAACI,KAAK,CAAC,CAAC,CAAC;;EAEvB,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,oBAAoB,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IACpDD,GAAG,CAACI,IAAI,CAACR,UAAU,CAACS,KAAK,CAAC,IAAIC,MAAM,CAAE,GAAEJ,oBAAoB,CAACD,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAER,KAAM,GAAE,CAAC,CAAC,CAAC;EACzF;EACA;EACA;EACA;EACA;;EAEA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACG,MAAM,EAAEF,CAAC,EAAE,EAAE;IACnC,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBN,kBAAkB,GAAGC,UAAU,CAACW,KAAK,CAAC,CAAC,EAAEP,GAAG,CAACC,CAAC,CAAC,CAACO,KAAK,CAAC,CAACC,MAAM,CAACP,oBAAoB,CAACD,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAACQ,MAAM,CAACjB,UAAU,CAAC,CAACiB,MAAM,CAAC,GAAG,CAAC;MAEjI;IACF;EACF;EACA,OAAOd,kBAAkB;AAC3B"},"metadata":{},"sourceType":"module"}