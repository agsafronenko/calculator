{"ast":null,"code":"import{findExpression,expression,regex}from\"./findExpression\";import{changeOneIntoAnother}from\"./changeOneIntoAnother\";export var finalDisplayAll=\"\";var displayAll=\"\";export var displayAllAfterTrigonometry=\"\";export function trigonometryInDegrees(trigFunction,state){displayAll=state.lastResult!==\"\"?state.lastResult:state.displayAll;findExpression(state);var arr=[];for(var i=0;i<changeOneIntoAnother.length;i++){arr.push(displayAll.match(new RegExp(\"\".concat(changeOneIntoAnother[i][\"before\"]).concat(regex,\"$\"))));}for(var _i=0;_i<arr.length;_i++){if(arr[_i]!==null){displayAllAfterTrigonometry=displayAll.slice(0,arr[_i].index).concat(changeOneIntoAnother[_i][\"afterTrigonometry\"]).replace(\"trigFunc\",trigFunction).concat(expression).concat(\")\");break;}}return displayAllAfterTrigonometry;}","map":{"version":3,"names":["findExpression","expression","regex","changeOneIntoAnother","finalDisplayAll","displayAll","displayAllAfterTrigonometry","trigonometryInDegrees","trigFunction","state","lastResult","arr","i","length","push","match","RegExp","slice","index","concat","replace"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/trigonometry.js"],"sourcesContent":["import { findExpression, expression, regex } from \"./findExpression\";\r\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\r\n\r\nexport let finalDisplayAll = \"\";\r\nlet displayAll = \"\";\r\nexport let displayAllAfterTrigonometry = \"\";\r\n\r\nexport function trigonometryInDegrees(trigFunction, state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  findExpression(state);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterTrigonometry = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterTrigonometry\"]).replace(\"trigFunc\", trigFunction).concat(expression).concat(\")\");\r\n\r\n      break;\r\n    }\r\n  }\r\n  return displayAllAfterTrigonometry;\r\n}\r\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,UAAU,CAAEC,KAAK,KAAQ,kBAAkB,CACpE,OAASC,oBAAoB,KAAQ,wBAAwB,CAE7D,MAAO,IAAIC,gBAAe,CAAG,EAAE,CAC/B,GAAIC,WAAU,CAAG,EAAE,CACnB,MAAO,IAAIC,4BAA2B,CAAG,EAAE,CAE3C,MAAO,SAASC,sBAAqB,CAACC,YAAY,CAAEC,KAAK,CAAE,CACzDJ,UAAU,CAAGI,KAAK,CAACC,UAAU,GAAK,EAAE,CAAGD,KAAK,CAACC,UAAU,CAAGD,KAAK,CAACJ,UAAU,CAE1EL,cAAc,CAACS,KAAK,CAAC,CAErB,GAAIE,IAAG,CAAG,EAAE,CACZ,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,oBAAoB,CAACU,MAAM,CAAED,CAAC,EAAE,CAAE,CACpDD,GAAG,CAACG,IAAI,CAACT,UAAU,CAACU,KAAK,CAAC,GAAIC,OAAM,WAAIb,oBAAoB,CAACS,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAGV,KAAK,MAAI,CAAC,CAAC,CACzF,CAEA,IAAK,GAAIU,GAAC,CAAG,CAAC,CAAEA,EAAC,CAAGD,GAAG,CAACE,MAAM,CAAED,EAAC,EAAE,CAAE,CACnC,GAAID,GAAG,CAACC,EAAC,CAAC,GAAK,IAAI,CAAE,CACnBN,2BAA2B,CAAGD,UAAU,CAACY,KAAK,CAAC,CAAC,CAAEN,GAAG,CAACC,EAAC,CAAC,CAACM,KAAK,CAAC,CAACC,MAAM,CAAChB,oBAAoB,CAACS,EAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAACQ,OAAO,CAAC,UAAU,CAAEZ,YAAY,CAAC,CAACW,MAAM,CAAClB,UAAU,CAAC,CAACkB,MAAM,CAAC,GAAG,CAAC,CAErL,MACF,CACF,CACA,MAAOb,4BAA2B,CACpC"},"metadata":{},"sourceType":"module"}