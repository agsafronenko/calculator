{"ast":null,"code":"import calculate, { findNegativeValues } from \"./equals\";\nimport { findExpression, expression, regex } from \"./findExpression\";\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\nexport let finalDisplayAll = \"\";\nlet displayAll = \"\";\nexport let displayAllAfterTrigonometry = \"\";\nexport function trigonometryInDegrees(trigFunc, state) {\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\n  let changeOneIntoAnother = [\n  // trigonometry function will be applied for:\n  // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\n  {\n    before: \"\\\\(\",\n    afterTrigonometry: `(${trigFunc}(`\n  }, {\n    before: \"\\\\( - \",\n    afterTrigonometry: `(${trigFunc}( - `\n  }, {\n    before: \"^\",\n    afterTrigonometry: `${trigFunc}(`\n  }, {\n    before: \"^ - \",\n    afterTrigonometry: `${trigFunc}( - `\n  },\n  // 2) the expression preceded by two consecutive operators:\n  {\n    before: \" -  - \",\n    afterTrigonometry: ` - ${trigFunc}( - `\n  }, {\n    before: \" \\\\+  - \",\n    afterTrigonometry: ` + ${trigFunc}( - `\n  }, {\n    before: \" \\\\*  - \",\n    afterTrigonometry: ` * ${trigFunc}( - `\n  }, {\n    before: \" \\\\/  - \",\n    afterTrigonometry: ` / ${trigFunc}( - `\n  }, {\n    before: \" \\\\^  - \",\n    afterTrigonometry: ` ^ ${trigFunc}( - `\n  }, {\n    before: \" yroot  - \",\n    afterTrigonometry: ` yroot ${trigFunc}( - `\n  }, {\n    before: \" mod  - \",\n    afterTrigonometry: ` mod ${trigFunc}( - `\n  },\n  // 3) the expression preceded by only one operator:\n  {\n    before: \" - \",\n    afterTrigonometry: ` - ${trigFunc}(`\n  }, {\n    before: \" \\\\+ \",\n    afterTrigonometry: ` + ${trigFunc}(`\n  }, {\n    before: \" \\\\* \",\n    afterTrigonometry: ` * ${trigFunc}(`\n  }, {\n    before: \" \\\\/ \",\n    afterTrigonometry: ` / ${trigFunc}(`\n  }, {\n    before: \" \\\\^ \",\n    afterTrigonometry: ` ^ ${trigFunc}(`\n  }, {\n    before: \" yroot \",\n    afterTrigonometry: ` yroot ${trigFunc}(`\n  }, {\n    before: \" log base \",\n    afterTrigonometry: ` log base ${trigFunc}(`\n  }, {\n    before: \" mod \",\n    afterTrigonometry: ` mod ${trigFunc}(`\n  }];\n  findExpression(state);\n  console.log(\"expression in trigonometry\", expression, \"regex\", regex);\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      displayAllAfterTrigonometry = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterTrigonometry\"]).concat(expression).concat(\")\");\n      break;\n    }\n  }\n  console.log(\"displayAllAfterTrigonometry\", displayAllAfterTrigonometry);\n  return displayAllAfterTrigonometry;\n}\n\n// function trigonometryCalculate(curDegree, trigFunc, state) {\n//   let reciprocal = {\n//     cot: \"tan\",\n//     sec: \"cos\",\n//     csc: \"sin\",\n//   };\n//   let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\n//   return calculateResult().toString();\n// }","map":{"version":3,"names":["calculate","findNegativeValues","findExpression","expression","regex","changeOneIntoAnother","finalDisplayAll","displayAll","displayAllAfterTrigonometry","trigonometryInDegrees","trigFunc","state","lastResult","before","afterTrigonometry","console","log","arr","i","length","push","match","RegExp","slice","index","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/trigonometry.js"],"sourcesContent":["import calculate, { findNegativeValues } from \"./equals\";\r\nimport { findExpression, expression, regex } from \"./findExpression\";\r\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\r\n\r\nexport let finalDisplayAll = \"\";\r\nlet displayAll = \"\";\r\nexport let displayAllAfterTrigonometry = \"\";\r\n\r\nexport function trigonometryInDegrees(trigFunc, state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n  let changeOneIntoAnother = [\r\n    // trigonometry function will be applied for:\r\n    // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\r\n    {\r\n      before: \"\\\\(\",\r\n      afterTrigonometry: `(${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \"\\\\( - \",\r\n      afterTrigonometry: `(${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \"^\",\r\n      afterTrigonometry: `${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \"^ - \",\r\n      afterTrigonometry: `${trigFunc}( - `,\r\n    },\r\n\r\n    // 2) the expression preceded by two consecutive operators:\r\n    {\r\n      before: \" -  - \",\r\n      afterTrigonometry: ` - ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      afterTrigonometry: ` + ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      afterTrigonometry: ` * ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      afterTrigonometry: ` / ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" \\\\^  - \",\r\n      afterTrigonometry: ` ^ ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" yroot  - \",\r\n      afterTrigonometry: ` yroot ${trigFunc}( - `,\r\n    },\r\n    {\r\n      before: \" mod  - \",\r\n      afterTrigonometry: ` mod ${trigFunc}( - `,\r\n    },\r\n    // 3) the expression preceded by only one operator:\r\n    {\r\n      before: \" - \",\r\n      afterTrigonometry: ` - ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      afterTrigonometry: ` + ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" \\\\* \",\r\n      afterTrigonometry: ` * ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" \\\\/ \",\r\n      afterTrigonometry: ` / ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" \\\\^ \",\r\n      afterTrigonometry: ` ^ ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" yroot \",\r\n      afterTrigonometry: ` yroot ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" log base \",\r\n      afterTrigonometry: ` log base ${trigFunc}(`,\r\n    },\r\n    {\r\n      before: \" mod \",\r\n      afterTrigonometry: ` mod ${trigFunc}(`,\r\n    },\r\n  ];\r\n\r\n  findExpression(state);\r\n  console.log(\"expression in trigonometry\", expression, \"regex\", regex);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterTrigonometry = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterTrigonometry\"]).concat(expression).concat(\")\");\r\n\r\n      break;\r\n    }\r\n  }\r\n  console.log(\"displayAllAfterTrigonometry\", displayAllAfterTrigonometry);\r\n  return displayAllAfterTrigonometry;\r\n}\r\n\r\n// function trigonometryCalculate(curDegree, trigFunc, state) {\r\n//   let reciprocal = {\r\n//     cot: \"tan\",\r\n//     sec: \"cos\",\r\n//     csc: \"sin\",\r\n//   };\r\n//   let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n//   return calculateResult().toString();\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}