{"ast":null,"code":"export let displayAllExpression = \"\";\nexport function deleteRedundantOperators(state, expr) {\n  console.log(\"deleteRedundant expr\", expr);\n  if (state.lastInputType === \"operator\") {\n    let lastDigitIndex = state.displayAll.split(\"\").reverse().findIndex(elem => /\\d|\\)/.test(elem));\n    displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n  console.log(\"deleteRedundant after\", displayAllExpression);\n}\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayAllExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\n\n// function deleteRedundantOperators(state) {\n//   console.log(\"deleteRedundant\", state.displayAll);\n//   console.log(\"state.displayCur\", state.displayCur);\n//   if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\n//     displayAllExpression = state.displayAll;\n//     // } else if (/\\d/.test(state.displayCur)) {\n//     //   displayAllExpression = state.displayAll;\n//   } else {\n//     let lastDigitIndex = state.displayAll\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\d/.test(elem));\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\n//   }\n//   addMissingParenthesis(state.parenthesesDelta);\n//   console.log(\"deleteRedundant after\", displayAllExpression);\n// }\n\n// export function addMissingParenthesis(delta) {\n//   if (delta > 0) {\n//     displayAllExpression += \")\";\n//     delta -= 1;\n//     addMissingParenthesis(delta);\n//   }\n// }","map":{"version":3,"names":["displayAllExpression","deleteRedundantOperators","state","expr","console","log","lastInputType","lastDigitIndex","displayAll","split","reverse","findIndex","elem","test","slice","length","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\nexport function deleteRedundantOperators(state, expr) {\r\n  console.log(\"deleteRedundant expr\", expr);\r\n  if (state.lastInputType === \"operator\") {\r\n    let lastDigitIndex = state.displayAll\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d|\\)/.test(elem));\r\n    displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n  console.log(\"deleteRedundant after\", displayAllExpression);\r\n}\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n\r\n// function deleteRedundantOperators(state) {\r\n//   console.log(\"deleteRedundant\", state.displayAll);\r\n//   console.log(\"state.displayCur\", state.displayCur);\r\n//   if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\r\n//     displayAllExpression = state.displayAll;\r\n//     // } else if (/\\d/.test(state.displayCur)) {\r\n//     //   displayAllExpression = state.displayAll;\r\n//   } else {\r\n//     let lastDigitIndex = state.displayAll\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\d/.test(elem));\r\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\r\n//   }\r\n//   addMissingParenthesis(state.parenthesesDelta);\r\n//   console.log(\"deleteRedundant after\", displayAllExpression);\r\n// }\r\n\r\n// export function addMissingParenthesis(delta) {\r\n//   if (delta > 0) {\r\n//     displayAllExpression += \")\";\r\n//     delta -= 1;\r\n//     addMissingParenthesis(delta);\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG,EAAE;AAEpC,OAAO,SAASC,wBAAwB,CAACC,KAAK,EAAEC,IAAI,EAAE;EACpDC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAAC;EACzC,IAAID,KAAK,CAACI,aAAa,KAAK,UAAU,EAAE;IACtC,IAAIC,cAAc,GAAGL,KAAK,CAACM,UAAU,CAClCC,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAEC,IAAI,IAAK,OAAO,CAACC,IAAI,CAACD,IAAI,CAAC,CAAC;IAC1CZ,oBAAoB,GAAGE,KAAK,CAACM,UAAU,CAACM,KAAK,CAAC,CAAC,EAAEZ,KAAK,CAACM,UAAU,CAACO,MAAM,GAAGR,cAAc,CAAC;EAC5F;EACAS,qBAAqB,CAACd,KAAK,CAACe,gBAAgB,CAAC;EAC7Cb,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,oBAAoB,CAAC;AAC5D;AAEA,OAAO,SAASgB,qBAAqB,CAACE,KAAK,EAAE;EAC3C,IAAIA,KAAK,GAAG,CAAC,EAAE;IACblB,oBAAoB,IAAI,GAAG;IAC3BkB,KAAK,IAAI,CAAC;IACVF,qBAAqB,CAACE,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}