{"ast":null,"code":"import { expression, expressionNegative, findExpression } from \"./findExpression\";\nimport calculate from \"./equals\";\nlet stateForFactorial = \"\";\nexport function factorialState(state) {\n  stateForFactorial = state;\n}\nexport let alertStatus = {\n  negative: false,\n  nonInteger: false\n};\nexport function factorial(num) {\n  let result = \"\";\n  if (num < 0) {\n    if (alertStatus.negative === false) {\n      alert(\"invalid input: factorials are only defined for positive numbers\");\n      alertStatus.negative = true;\n    }\n    return \"invalid input\";\n  } else if (num % 1 !== 0 && num !== \")\") {\n    findExpression(stateForFactorial);\n    let result = calculate(stateForFactorial, expression);\n    if (result % 1 !== 0) {\n      if (alertStatus.nonInteger === false) {\n        alert(`factorials for nonintegers are defined based on simplified Gamma function:\n      ~~ level of accuracy: low ~~`);\n        alertStatus.nonInteger = true;\n      }\n    }\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\n  } else if (num === \")\") {\n    return \"!\";\n  } else {\n    result = Number(num);\n    if (Number.isInteger(result)) {\n      for (let i = result - 1; i > 0; i--) {\n        result *= i;\n      }\n      return result;\n    }\n  }\n}","map":{"version":3,"names":["expression","expressionNegative","findExpression","calculate","stateForFactorial","factorialState","state","alertStatus","negative","nonInteger","factorial","num","result","alert","Math","pow","PI","E","Number","isInteger","i"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { expression, expressionNegative, findExpression } from \"./findExpression\";\r\nimport calculate from \"./equals\";\r\n\r\nlet stateForFactorial = \"\";\r\nexport function factorialState(state) {\r\n  stateForFactorial = state;\r\n}\r\n\r\nexport let alertStatus = {\r\n  negative: false,\r\n  nonInteger: false,\r\n};\r\n\r\nexport function factorial(num) {\r\n  let result = \"\";\r\n  if (num < 0) {\r\n    if (alertStatus.negative === false) {\r\n      alert(\"invalid input: factorials are only defined for positive numbers\");\r\n      alertStatus.negative = true;\r\n    }\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0 && num !== \")\") {\r\n    findExpression(stateForFactorial);\r\n    let result = calculate(stateForFactorial, expression);\r\n    if (result % 1 !== 0) {\r\n      if (alertStatus.nonInteger === false) {\r\n        alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n      ~~ level of accuracy: low ~~`);\r\n        alertStatus.nonInteger = true;\r\n      }\r\n    }\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else if (num === \")\") {\r\n    return \"!\";\r\n  } else {\r\n    result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,kBAAkB;AACjF,OAAOC,SAAS,MAAM,UAAU;AAEhC,IAAIC,iBAAiB,GAAG,EAAE;AAC1B,OAAO,SAASC,cAAc,CAACC,KAAK,EAAE;EACpCF,iBAAiB,GAAGE,KAAK;AAC3B;AAEA,OAAO,IAAIC,WAAW,GAAG;EACvBC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC;AAED,OAAO,SAASC,SAAS,CAACC,GAAG,EAAE;EAC7B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAID,GAAG,GAAG,CAAC,EAAE;IACX,IAAIJ,WAAW,CAACC,QAAQ,KAAK,KAAK,EAAE;MAClCK,KAAK,CAAC,iEAAiE,CAAC;MACxEN,WAAW,CAACC,QAAQ,GAAG,IAAI;IAC7B;IACA,OAAO,eAAe;EACxB,CAAC,MAAM,IAAIG,GAAG,GAAG,CAAC,KAAK,CAAC,IAAIA,GAAG,KAAK,GAAG,EAAE;IACvCT,cAAc,CAACE,iBAAiB,CAAC;IACjC,IAAIQ,MAAM,GAAGT,SAAS,CAACC,iBAAiB,EAAEJ,UAAU,CAAC;IACrD,IAAIY,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MACpB,IAAIL,WAAW,CAACE,UAAU,KAAK,KAAK,EAAE;QACpCI,KAAK,CAAE;AACf,mCAAmC,CAAC;QAC5BN,WAAW,CAACE,UAAU,GAAG,IAAI;MAC/B;IACF;IACA,OAAOK,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,GAAG,GAAGG,IAAI,CAACE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACJ,GAAG,GAAGG,IAAI,CAACG,CAAC,EAAEN,GAAG,CAAC;EACzE,CAAC,MAAM,IAAIA,GAAG,KAAK,GAAG,EAAE;IACtB,OAAO,GAAG;EACZ,CAAC,MAAM;IACLC,MAAM,GAAGM,MAAM,CAACP,GAAG,CAAC;IACpB,IAAIO,MAAM,CAACC,SAAS,CAACP,MAAM,CAAC,EAAE;MAC5B,KAAK,IAAIQ,CAAC,GAAGR,MAAM,GAAG,CAAC,EAAEQ,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnCR,MAAM,IAAIQ,CAAC;MACb;MACA,OAAOR,MAAM;IACf;EACF;AACF"},"metadata":{},"sourceType":"module"}