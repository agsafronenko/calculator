{"ast":null,"code":"export default function calculate(arr) {\n  arr = calcIdenticalOperations(arr, \"x\");\n  arr = calcIdenticalOperations(arr, \"/\");\n  arr = calcIdenticalOperations(arr, \"+\");\n  arr = calcIdenticalOperations(arr, \"-\");\n  return arr[0];\n}\nfunction calcIdenticalOperations(arr, operator) {\n  console.log(\"insede SameOperations\", arr, operator);\n  let operatorIndex = arr.findIndex(elem => elem === operator);\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = operator === \"x\" ? currentOperation[0] * currentOperation[2] : operator === \"/\" ? currentOperation[0] / currentOperation[2] : operator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calcIdenticalOperations(result, operator);\n  }\n  console.log(\"insede SameOperations before return\", arr, operator);\n  return arr;\n}","map":{"version":3,"names":["calculate","arr","calcIdenticalOperations","operator","console","log","operatorIndex","findIndex","elem","currentOperation","slice","currentResult","result","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["export default function calculate(arr) {\r\n  arr = calcIdenticalOperations(arr, \"x\");\r\n  arr = calcIdenticalOperations(arr, \"/\");\r\n  arr = calcIdenticalOperations(arr, \"+\");\r\n  arr = calcIdenticalOperations(arr, \"-\");\r\n\r\n  return arr[0];\r\n}\r\n\r\nfunction calcIdenticalOperations(arr, operator) {\r\n  console.log(\"insede SameOperations\", arr, operator);\r\n  let operatorIndex = arr.findIndex((elem) => elem === operator);\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    let currentResult = operator === \"x\" ? currentOperation[0] * currentOperation[2] : operator === \"/\" ? currentOperation[0] / currentOperation[2] : operator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calcIdenticalOperations(result, operator);\r\n  }\r\n  console.log(\"insede SameOperations before return\", arr, operator);\r\n  return arr;\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,SAAS,CAACC,GAAG,EAAE;EACrCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EACvCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EACvCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EACvCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EAEvC,OAAOA,GAAG,CAAC,CAAC,CAAC;AACf;AAEA,SAASC,uBAAuB,CAACD,GAAG,EAAEE,QAAQ,EAAE;EAC9CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,GAAG,EAAEE,QAAQ,CAAC;EACnD,IAAIG,aAAa,GAAGL,GAAG,CAACM,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKL,QAAQ,CAAC;EAC9D,IAAIG,aAAa,KAAK,CAAC,CAAC,EAAE;IACxB,IAAIG,gBAAgB,GAAGR,GAAG,CAACS,KAAK,CAACJ,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAG,CAAC,CAAC;IACtE,IAAIK,aAAa,GAAGR,QAAQ,KAAK,GAAG,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGN,QAAQ,KAAK,GAAG,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGN,QAAQ,KAAK,GAAG,GAAGM,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC;IAE1P,IAAIG,MAAM,GAAGX,GAAG,CACbS,KAAK,CAAC,CAAC,EAAEJ,aAAa,GAAG,CAAC,CAAC,CAC3BO,MAAM,CAACF,aAAa,CAAC,CACrBE,MAAM,CAACZ,GAAG,CAACS,KAAK,CAACJ,aAAa,GAAG,CAAC,CAAC,CAAC;IAEvC,OAAOJ,uBAAuB,CAACU,MAAM,EAAET,QAAQ,CAAC;EAClD;EACAC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEJ,GAAG,EAAEE,QAAQ,CAAC;EACjE,OAAOF,GAAG;AACZ"},"metadata":{},"sourceType":"module"}