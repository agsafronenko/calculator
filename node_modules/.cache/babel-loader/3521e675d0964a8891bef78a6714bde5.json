{"ast":null,"code":"export let alertStatus = {\n  negativeFactor: false,\n  nonIntegerFactor: false,\n  negativeLog: false,\n  zeroAsDenominator: false\n};\nexport function validInputLog(currentOperation) {\n  alertStatus.negativeLog = false;\n  return Math.log(currentOperation[0]) / Math.log(currentOperation[2]);\n}\nexport function invalidInputLog() {\n  if (alertStatus.negativeLog === false) {\n    alert(\"the logarithm of a negative number is undefined\");\n    alertStatus.negativeLog = true;\n    return \"invalid input\";\n  } else {\n    return \"invalid input\";\n  }\n}\nexport function validInputZero(currentOperation) {\n  alertStatus.zeroAsDenominator = false;\n  return currentOperation[0] / currentOperation[2];\n}\nexport function invalidInputZero() {\n  if (alertStatus.zeroAsDenominator === false) {\n    alert(\"you cannot divide by zero\");\n    alertStatus.zeroAsDenominator = true;\n    return \"invalid input\";\n  } else {\n    return \"invalid input\";\n  }\n}","map":{"version":3,"names":["alertStatus","negativeFactor","nonIntegerFactor","negativeLog","zeroAsDenominator","validInputLog","currentOperation","Math","log","invalidInputLog","alert","validInputZero","invalidInputZero"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/alertStatus.js"],"sourcesContent":["export let alertStatus = {\r\n  negativeFactor: false,\r\n  nonIntegerFactor: false,\r\n  negativeLog: false,\r\n  zeroAsDenominator: false,\r\n};\r\n\r\nexport function validInputLog(currentOperation) {\r\n  alertStatus.negativeLog = false;\r\n  return Math.log(currentOperation[0]) / Math.log(currentOperation[2]);\r\n}\r\n\r\nexport function invalidInputLog() {\r\n  if (alertStatus.negativeLog === false) {\r\n    alert(\"the logarithm of a negative number is undefined\");\r\n    alertStatus.negativeLog = true;\r\n    return \"invalid input\";\r\n  } else {\r\n    return \"invalid input\";\r\n  }\r\n}\r\n\r\nexport function validInputZero(currentOperation) {\r\n  alertStatus.zeroAsDenominator = false;\r\n  return currentOperation[0] / currentOperation[2];\r\n}\r\n\r\nexport function invalidInputZero() {\r\n  if (alertStatus.zeroAsDenominator === false) {\r\n    alert(\"you cannot divide by zero\");\r\n    alertStatus.zeroAsDenominator = true;\r\n    return \"invalid input\";\r\n  } else {\r\n    return \"invalid input\";\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,IAAIA,WAAW,GAAG;EACvBC,cAAc,EAAE,KAAK;EACrBC,gBAAgB,EAAE,KAAK;EACvBC,WAAW,EAAE,KAAK;EAClBC,iBAAiB,EAAE;AACrB,CAAC;AAED,OAAO,SAASC,aAAa,CAACC,gBAAgB,EAAE;EAC9CN,WAAW,CAACG,WAAW,GAAG,KAAK;EAC/B,OAAOI,IAAI,CAACC,GAAG,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACtE;AAEA,OAAO,SAASG,eAAe,GAAG;EAChC,IAAIT,WAAW,CAACG,WAAW,KAAK,KAAK,EAAE;IACrCO,KAAK,CAAC,iDAAiD,CAAC;IACxDV,WAAW,CAACG,WAAW,GAAG,IAAI;IAC9B,OAAO,eAAe;EACxB,CAAC,MAAM;IACL,OAAO,eAAe;EACxB;AACF;AAEA,OAAO,SAASQ,cAAc,CAACL,gBAAgB,EAAE;EAC/CN,WAAW,CAACI,iBAAiB,GAAG,KAAK;EACrC,OAAOE,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC;AAClD;AAEA,OAAO,SAASM,gBAAgB,GAAG;EACjC,IAAIZ,WAAW,CAACI,iBAAiB,KAAK,KAAK,EAAE;IAC3CM,KAAK,CAAC,2BAA2B,CAAC;IAClCV,WAAW,CAACI,iBAAiB,GAAG,IAAI;IACpC,OAAO,eAAe;EACxB,CAAC,MAAM;IACL,OAAO,eAAe;EACxB;AACF"},"metadata":{},"sourceType":"module"}