{"ast":null,"code":"import { alertStatus } from \"./alertStatus\";\nimport $ from \"jquery\";\nexport function factorial(num) {\n  if (num < 0) {\n    if (alertStatus.negativeFactor === false) {\n      alert(\"invalid input: factorials are only defined for positive numbers\");\n      alertStatus.negativeFactor = true;\n    }\n    $(\"button\").css(\"pointerEvents\", \"none\");\n    $(\"button\").css(\"opacity\", \"0.8\");\n    $(\"#clear\").css(\"pointerEvents\", \"auto\");\n    $(\"#clear\").css(\"opacity\", \"1\");\n    $(\"#delete\").css(\"pointerEvents\", \"auto\");\n    $(\"#delete\").css(\"opacity\", \"1\");\n    return \"invalid input\";\n  } else if (num % 1 !== 0) {\n    if (alertStatus.nonIntegerFactor === false) {\n      alert(`factorials for nonintegers are defined based on simplified Gamma function:\n      ~~ level of accuracy: low ~~`);\n      alertStatus.nonIntegerFactor = true;\n    }\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\n  } else {\n    let result = Number(num);\n    if (Number.isInteger(result)) {\n      for (let i = result - 1; i > 0; i--) {\n        result *= i;\n      }\n      return result;\n    }\n  }\n}","map":{"version":3,"names":["alertStatus","$","factorial","num","negativeFactor","alert","css","nonIntegerFactor","Math","pow","PI","E","result","Number","isInteger","i"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { alertStatus } from \"./alertStatus\";\r\nimport $ from \"jquery\";\r\n\r\nexport function factorial(num) {\r\n  if (num < 0) {\r\n    if (alertStatus.negativeFactor === false) {\r\n      alert(\"invalid input: factorials are only defined for positive numbers\");\r\n      alertStatus.negativeFactor = true;\r\n    }\r\n    $(\"button\").css(\"pointerEvents\", \"none\");\r\n    $(\"button\").css(\"opacity\", \"0.8\");\r\n    $(\"#clear\").css(\"pointerEvents\", \"auto\");\r\n    $(\"#clear\").css(\"opacity\", \"1\");\r\n    $(\"#delete\").css(\"pointerEvents\", \"auto\");\r\n    $(\"#delete\").css(\"opacity\", \"1\");\r\n\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0) {\r\n    if (alertStatus.nonIntegerFactor === false) {\r\n      alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n      ~~ level of accuracy: low ~~`);\r\n      alertStatus.nonIntegerFactor = true;\r\n    }\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else {\r\n    let result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,OAAOC,CAAC,MAAM,QAAQ;AAEtB,OAAO,SAASC,SAAS,CAACC,GAAG,EAAE;EAC7B,IAAIA,GAAG,GAAG,CAAC,EAAE;IACX,IAAIH,WAAW,CAACI,cAAc,KAAK,KAAK,EAAE;MACxCC,KAAK,CAAC,iEAAiE,CAAC;MACxEL,WAAW,CAACI,cAAc,GAAG,IAAI;IACnC;IACAH,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC;IACxCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC;IACjCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC;IACxCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC;IAC/BL,CAAC,CAAC,SAAS,CAAC,CAACK,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC;IACzCL,CAAC,CAAC,SAAS,CAAC,CAACK,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC;IAEhC,OAAO,eAAe;EACxB,CAAC,MAAM,IAAIH,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACxB,IAAIH,WAAW,CAACO,gBAAgB,KAAK,KAAK,EAAE;MAC1CF,KAAK,CAAE;AACb,mCAAmC,CAAC;MAC9BL,WAAW,CAACO,gBAAgB,GAAG,IAAI;IACrC;IACA,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,GAAG,GAAGK,IAAI,CAACE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACN,GAAG,GAAGK,IAAI,CAACG,CAAC,EAAER,GAAG,CAAC;EACzE,CAAC,MAAM;IACL,IAAIS,MAAM,GAAGC,MAAM,CAACV,GAAG,CAAC;IACxB,IAAIU,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE;MAC5B,KAAK,IAAIG,CAAC,GAAGH,MAAM,GAAG,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnCH,MAAM,IAAIG,CAAC;MACb;MACA,OAAOH,MAAM;IACf;EACF;AACF"},"metadata":{},"sourceType":"module"}