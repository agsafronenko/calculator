{"ast":null,"code":"export default function calculate(arr) {\n  arr = findNegativeValues(arr);\n  arr = calculateInOrder(arr, \"*/\");\n  arr = calculateInOrder(arr, \"+-\");\n  return arr[0];\n}\nfunction findNegativeValues(arr) {\n  console.log(\"arr inside calculate\", arr);\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \"-\" && arr[ind - 1] === \"-\" && typeof arr[ind + 1] === \"number\");\n  console.log(\"negativeIndex\", negativeIndex);\n  if (negativeIndex !== -1) {\n    let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n    findNegativeValues(newArr);\n  }\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  // console.log(\"inside SameOperations\", arr, operators);\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = currentOperator === \"*\" ? currentOperation[0] * currentOperation[2] : currentOperator === \"/\" ? currentOperation[0] / currentOperation[2] : currentOperator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calculateInOrder(result, operators);\n  }\n  // console.log(\"inside SameOperations before return\", arr, operator);\n  return arr;\n}","map":{"version":3,"names":["calculate","arr","findNegativeValues","calculateInOrder","console","log","negativeIndex","findIndex","elem","ind","newArr","slice","concat","operators","operatorIndex","currentOperator","currentOperation","currentResult","result"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["export default function calculate(arr) {\r\n  arr = findNegativeValues(arr);\r\n  arr = calculateInOrder(arr, \"*/\");\r\n  arr = calculateInOrder(arr, \"+-\");\r\n\r\n  return arr[0];\r\n}\r\n\r\nfunction findNegativeValues(arr) {\r\n  console.log(\"arr inside calculate\", arr);\r\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \"-\" && arr[ind - 1] === \"-\" && typeof arr[ind + 1] === \"number\");\r\n  console.log(\"negativeIndex\", negativeIndex);\r\n  if (negativeIndex !== -1) {\r\n    let newArr = arr\r\n      .slice(0, negativeIndex)\r\n      .concat(arr[negativeIndex + 1] * -1)\r\n      .concat(arr.slice(negativeIndex + 2));\r\n    findNegativeValues(newArr);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  // console.log(\"inside SameOperations\", arr, operators);\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n\r\n    let currentResult = currentOperator === \"*\" ? currentOperation[0] * currentOperation[2] : currentOperator === \"/\" ? currentOperation[0] / currentOperation[2] : currentOperator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  // console.log(\"inside SameOperations before return\", arr, operator);\r\n  return arr;\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,SAAS,CAACC,GAAG,EAAE;EACrCA,GAAG,GAAGC,kBAAkB,CAACD,GAAG,CAAC;EAC7BA,GAAG,GAAGE,gBAAgB,CAACF,GAAG,EAAE,IAAI,CAAC;EACjCA,GAAG,GAAGE,gBAAgB,CAACF,GAAG,EAAE,IAAI,CAAC;EAEjC,OAAOA,GAAG,CAAC,CAAC,CAAC;AACf;AAEA,SAASC,kBAAkB,CAACD,GAAG,EAAE;EAC/BG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,GAAG,CAAC;EACxC,IAAIK,aAAa,GAAGL,GAAG,CAACM,SAAS,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAKD,IAAI,KAAK,GAAG,IAAIP,GAAG,CAACQ,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,OAAOR,GAAG,CAACQ,GAAG,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC;EAC1HL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,aAAa,CAAC;EAC3C,IAAIA,aAAa,KAAK,CAAC,CAAC,EAAE;IACxB,IAAII,MAAM,GAAGT,GAAG,CACbU,KAAK,CAAC,CAAC,EAAEL,aAAa,CAAC,CACvBM,MAAM,CAACX,GAAG,CAACK,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CACnCM,MAAM,CAACX,GAAG,CAACU,KAAK,CAACL,aAAa,GAAG,CAAC,CAAC,CAAC;IACvCJ,kBAAkB,CAACQ,MAAM,CAAC;EAC5B;EACA,OAAOT,GAAG;AACZ;AAEA,SAASE,gBAAgB,CAACF,GAAG,EAAEY,SAAS,EAAE;EACxC;EACA,IAAIC,aAAa,GAAGb,GAAG,CAACM,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKK,SAAS,CAAC,CAAC,CAAC,IAAIL,IAAI,KAAKK,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3F,IAAIE,eAAe,GAAGd,GAAG,CAACa,aAAa,CAAC;EAExC,IAAIA,aAAa,KAAK,CAAC,CAAC,EAAE;IACxB,IAAIE,gBAAgB,GAAGf,GAAG,CAACU,KAAK,CAACG,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAG,CAAC,CAAC;IAEtE,IAAIG,aAAa,GAAGF,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGD,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGD,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC;IAE/Q,IAAIE,MAAM,GAAGjB,GAAG,CACbU,KAAK,CAAC,CAAC,EAAEG,aAAa,GAAG,CAAC,CAAC,CAC3BF,MAAM,CAACK,aAAa,CAAC,CACrBL,MAAM,CAACX,GAAG,CAACU,KAAK,CAACG,aAAa,GAAG,CAAC,CAAC,CAAC;IAEvC,OAAOX,gBAAgB,CAACe,MAAM,EAAEL,SAAS,CAAC;EAC5C;EACA;EACA,OAAOZ,GAAG;AACZ"},"metadata":{},"sourceType":"module"}