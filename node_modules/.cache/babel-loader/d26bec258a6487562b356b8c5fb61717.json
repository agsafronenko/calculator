{"ast":null,"code":"export let displayAllExpression = \"\";\nexport function FixIncompleteInputs(state, expr) {\n  if (state.lastInputType !== \"digit\" || state.lastInput !== \")\") {\n    let lastDigitIndex = expr.split(\"\").reverse().findIndex(elem => /\\d|\\)/.test(elem));\n    displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\n    console.log(\"expr\", expr);\n    let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex).concat(\"akunamatata\");\n    let openingParanthesesAfterTheLastDigit = afterTheLastDigit.match(\"(\");\n    console.log(\"leftParanthersesAtTheEnd\", afterTheLastDigit, openingParanthesesAfterTheLastDigit);\n  } else {\n    displayAllExpression = expr;\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n  console.log(\"deleteRedundant after\", displayAllExpression);\n}\n_c = FixIncompleteInputs;\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayAllExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\n\n// export function deleteRedundantOperators(state) {\n//   console.log(\"deleteRedundant\", state.displayAll);\n//   console.log(\"state.displayCur\", state.displayCur);\n//   if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\n//     displayAllExpression = state.displayAll;\n//   } else {\n//     let lastDigitIndex = state.displayAll\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\d/.test(elem));\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\n//   }\n//   addMissingParenthesis(state.parenthesesDelta);\n//   console.log(\"deleteRedundant after\", displayAllExpression);\n// }\n\n// export function addMissingParenthesis(delta) {\n//   if (delta > 0) {\n//     displayAllExpression += \")\";\n//     delta -= 1;\n//     addMissingParenthesis(delta);\n//   }\n// }\nvar _c;\n$RefreshReg$(_c, \"FixIncompleteInputs\");","map":{"version":3,"names":["displayAllExpression","FixIncompleteInputs","state","expr","lastInputType","lastInput","lastDigitIndex","split","reverse","findIndex","elem","test","slice","length","console","log","afterTheLastDigit","concat","openingParanthesesAfterTheLastDigit","match","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\nexport function FixIncompleteInputs(state, expr) {\r\n  if (state.lastInputType !== \"digit\" || state.lastInput !== \")\") {\r\n    let lastDigitIndex = expr\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d|\\)/.test(elem));\r\n    displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\r\n    console.log(\"expr\", expr);\r\n\r\n    let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex).concat(\"akunamatata\");\r\n    let openingParanthesesAfterTheLastDigit = afterTheLastDigit.match(\"(\");\r\n    console.log(\"leftParanthersesAtTheEnd\", afterTheLastDigit, openingParanthesesAfterTheLastDigit);\r\n  } else {\r\n    displayAllExpression = expr;\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n  console.log(\"deleteRedundant after\", displayAllExpression);\r\n}\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n\r\n// export function deleteRedundantOperators(state) {\r\n//   console.log(\"deleteRedundant\", state.displayAll);\r\n//   console.log(\"state.displayCur\", state.displayCur);\r\n//   if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\r\n//     displayAllExpression = state.displayAll;\r\n//   } else {\r\n//     let lastDigitIndex = state.displayAll\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\d/.test(elem));\r\n//     displayAllExpression = state.displayAll.slice(0, state.displayAll.length - lastDigitIndex);\r\n//   }\r\n//   addMissingParenthesis(state.parenthesesDelta);\r\n//   console.log(\"deleteRedundant after\", displayAllExpression);\r\n// }\r\n\r\n// export function addMissingParenthesis(delta) {\r\n//   if (delta > 0) {\r\n//     displayAllExpression += \")\";\r\n//     delta -= 1;\r\n//     addMissingParenthesis(delta);\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG,EAAE;AAEpC,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC/C,IAAID,KAAK,CAACE,aAAa,KAAK,OAAO,IAAIF,KAAK,CAACG,SAAS,KAAK,GAAG,EAAE;IAC9D,IAAIC,cAAc,GAAGH,IAAI,CACtBI,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAEC,IAAI,IAAK,OAAO,CAACC,IAAI,CAACD,IAAI,CAAC,CAAC;IAC1CV,oBAAoB,GAAGG,IAAI,CAACS,KAAK,CAAC,CAAC,EAAET,IAAI,CAACU,MAAM,GAAGP,cAAc,CAAC;IAClEQ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEZ,IAAI,CAAC;IAEzB,IAAIa,iBAAiB,GAAGb,IAAI,CAACS,KAAK,CAACT,IAAI,CAACU,MAAM,GAAGP,cAAc,CAAC,CAACW,MAAM,CAAC,aAAa,CAAC;IACtF,IAAIC,mCAAmC,GAAGF,iBAAiB,CAACG,KAAK,CAAC,GAAG,CAAC;IACtEL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEC,iBAAiB,EAAEE,mCAAmC,CAAC;EACjG,CAAC,MAAM;IACLlB,oBAAoB,GAAGG,IAAI;EAC7B;EACAiB,qBAAqB,CAAClB,KAAK,CAACmB,gBAAgB,CAAC;EAC7CP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEf,oBAAoB,CAAC;AAC5D;AAAC,KAjBeC,mBAAmB;AAmBnC,OAAO,SAASmB,qBAAqB,CAACE,KAAK,EAAE;EAC3C,IAAIA,KAAK,GAAG,CAAC,EAAE;IACbtB,oBAAoB,IAAI,GAAG;IAC3BsB,KAAK,IAAI,CAAC;IACVF,qBAAqB,CAACE,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}