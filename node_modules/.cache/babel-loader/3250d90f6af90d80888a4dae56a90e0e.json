{"ast":null,"code":"import calculate from \"./equals\";\nimport { expression, expressionNegative, regex, findExpression } from \"./findExpression\";\nexport let displayAllAfterDenomination = \"\";\nlet displayAll = \"\";\nexport function switchToDenominator(state) {\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\n  let changeOneIntoAnother = [\n  // the sign will be changed from positive to negative or vice versa for:\n  // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\n  {\n    before: \"\\\\(\",\n    after: \"(1 / (\"\n  }, {\n    before: \"\\\\( - \",\n    after: \"(1 / ( - \"\n  }, {\n    before: \"^\",\n    after: \"1 / (\"\n  }, {\n    before: \"^ - \",\n    after: \"1 / ( - \"\n  },\n  // 2) the expression preceded by two consecutive operators:\n  {\n    before: \" -  - \",\n    after: \" - 1 / ( - \"\n  }, {\n    before: \" \\\\+  - \",\n    after: \" + 1 / ( - \"\n  }, {\n    before: \" \\\\*  - \",\n    after: \" * 1 / ( - \"\n  }, {\n    before: \" \\\\/  - \",\n    after: \" / 1 / ( - \"\n  }, {\n    before: \" \\\\^  - \",\n    after: \" ^ 1 / ( - \"\n  }, {\n    before: \" yroot  - \",\n    after: \" yroot 1 / ( - \"\n  },\n  // 3) the expression preceded by only one operator:\n  {\n    before: \" - \",\n    after: \" - 1 / (\"\n  }, {\n    before: \" \\\\+ \",\n    after: \" + 1 / (\"\n  }, {\n    before: \" \\\\* \",\n    after: \" * 1 / (\"\n  }, {\n    before: \" \\\\/ \",\n    after: \" / 1 / (\"\n  }, {\n    before: \" \\\\^ \",\n    after: \" ^ 1 / (\"\n  }, {\n    before: \" yroot \",\n    after: \" yroot 1 / (\"\n  }];\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\n\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n  }\n  // console.log(\"displayAll\", displayAll);\n  // console.log(\"expression\", expression);\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\n  // console.log(\"arr\", arr);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      displayAllAfterDenomination = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\n      break;\n    }\n  }\n  return displayAllAfterDenomination;\n}\n\n// export function switchToDenominator(state) {\n//   let displayAllExpression = \"\";\n//   let displayAll = state.displayAll;\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n//     console.log(\"abs stage 1\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i - 3;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\n//     console.log(\"abs stage 0.7\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n//     console.log(\"abs stage 2\");\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n//     displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`1 / (${state.displayAll.slice(lastTrigonometryIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.lastInput === \")\") {\n//     console.log(\"abs stage 3\");\n//     let displayAllLength = displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (displayAll[i] === \")\") closingNum++;\n//       if (displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         break;\n//       }\n//     }\n//     displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`1 / (${displayAll.slice(firstOpeningIndex)})`);\n//     console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\n//     return displayAllExpression;\n//   } else if (state.lastInputType === \"digit\") {\n//     console.log(\"abs stage 4\");\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n//       console.log(\"abs stage 4.1\");\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n//       console.log(\"abs stage 4.15\");\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`1 / ${lastNegativeNum})`);\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n//       console.log(\"denominator stage 4.2\");\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\n//       displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`1 / (${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\n\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else {\n//       console.log(\"denominator stage 4.3\");\n//       let regexNum = new RegExp(`${state.displayCur}$`);\n//       let lastNumIndex = displayAll.match(regexNum).index;\n//       displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`1 / (${state.displayCur})`);\n//       return displayAllExpression;\n//     }\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n//     console.log(\"denominator stage 5\");\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n//     let lastNum = displayAll.match(regexNum);\n//     displayAllExpression = displayAll.slice(0, lastNum.index).concat(`1 / (${lastNum})`);\n//     return displayAllExpression;\n//   }\n// }","map":{"version":3,"names":["calculate","expression","expressionNegative","regex","findExpression","displayAllAfterDenomination","displayAll","switchToDenominator","state","lastResult","changeOneIntoAnother","before","after","arr","i","length","push","match","RegExp","slice","index","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/switchToDenominator.js"],"sourcesContent":["import calculate from \"./equals\";\r\nimport { expression, expressionNegative, regex, findExpression } from \"./findExpression\";\r\n\r\nexport let displayAllAfterDenomination = \"\";\r\nlet displayAll = \"\";\r\n\r\nexport function switchToDenominator(state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  let changeOneIntoAnother = [\r\n    // the sign will be changed from positive to negative or vice versa for:\r\n    // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\r\n    {\r\n      before: \"\\\\(\",\r\n      after: \"(1 / (\",\r\n    },\r\n    {\r\n      before: \"\\\\( - \",\r\n      after: \"(1 / ( - \",\r\n    },\r\n    {\r\n      before: \"^\",\r\n      after: \"1 / (\",\r\n    },\r\n    {\r\n      before: \"^ - \",\r\n      after: \"1 / ( - \",\r\n    },\r\n\r\n    // 2) the expression preceded by two consecutive operators:\r\n    {\r\n      before: \" -  - \",\r\n      after: \" - 1 / ( - \",\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      after: \" + 1 / ( - \",\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      after: \" * 1 / ( - \",\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      after: \" / 1 / ( - \",\r\n    },\r\n    {\r\n      before: \" \\\\^  - \",\r\n      after: \" ^ 1 / ( - \",\r\n    },\r\n    {\r\n      before: \" yroot  - \",\r\n      after: \" yroot 1 / ( - \",\r\n    },\r\n    // 3) the expression preceded by only one operator:\r\n    {\r\n      before: \" - \",\r\n      after: \" - 1 / (\",\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      after: \" + 1 / (\",\r\n    },\r\n    {\r\n      before: \" \\\\* \",\r\n      after: \" * 1 / (\",\r\n    },\r\n    {\r\n      before: \" \\\\/ \",\r\n      after: \" / 1 / (\",\r\n    },\r\n    {\r\n      before: \" \\\\^ \",\r\n      after: \" ^ 1 / (\",\r\n    },\r\n    {\r\n      before: \" yroot \",\r\n      after: \" yroot 1 / (\",\r\n    },\r\n  ];\r\n\r\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n  // console.log(\"displayAll\", displayAll);\r\n  // console.log(\"expression\", expression);\r\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\r\n  // console.log(\"arr\", arr);\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterDenomination = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\r\n      break;\r\n    }\r\n  }\r\n  return displayAllAfterDenomination;\r\n}\r\n\r\n// export function switchToDenominator(state) {\r\n//   let displayAllExpression = \"\";\r\n//   let displayAll = state.displayAll;\r\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n//     console.log(\"abs stage 1\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i - 3;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n//     console.log(\"abs stage 0.7\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n//     console.log(\"abs stage 2\");\r\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n//     displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`1 / (${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastInput === \")\") {\r\n//     console.log(\"abs stage 3\");\r\n//     let displayAllLength = displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (displayAll[i] === \")\") closingNum++;\r\n//       if (displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`1 / (${displayAll.slice(firstOpeningIndex)})`);\r\n//     console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastInputType === \"digit\") {\r\n//     console.log(\"abs stage 4\");\r\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n//       console.log(\"abs stage 4.1\");\r\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n//       console.log(\"abs stage 4.15\");\r\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`1 / ${lastNegativeNum})`);\r\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n//       console.log(\"denominator stage 4.2\");\r\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n//       displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`1 / (${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n\r\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else {\r\n//       console.log(\"denominator stage 4.3\");\r\n//       let regexNum = new RegExp(`${state.displayCur}$`);\r\n//       let lastNumIndex = displayAll.match(regexNum).index;\r\n//       displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`1 / (${state.displayCur})`);\r\n//       return displayAllExpression;\r\n//     }\r\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n//     console.log(\"denominator stage 5\");\r\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n//     let lastNum = displayAll.match(regexNum);\r\n//     displayAllExpression = displayAll.slice(0, lastNum.index).concat(`1 / (${lastNum})`);\r\n//     return displayAllExpression;\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAChC,SAASC,UAAU,EAAEC,kBAAkB,EAAEC,KAAK,EAAEC,cAAc,QAAQ,kBAAkB;AAExF,OAAO,IAAIC,2BAA2B,GAAG,EAAE;AAC3C,IAAIC,UAAU,GAAG,EAAE;AAEnB,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAE;EACzCF,UAAU,GAAGE,KAAK,CAACC,UAAU,KAAK,EAAE,GAAGD,KAAK,CAACC,UAAU,GAAGD,KAAK,CAACF,UAAU;EAE1E,IAAII,oBAAoB,GAAG;EACzB;EACA;EACA;IACEC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,QAAQ;IAChBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EAED;EACA;IACED,MAAM,EAAE,QAAQ;IAChBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,YAAY;IACpBC,KAAK,EAAE;EACT,CAAC;EACD;EACA;IACED,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE;EACT,CAAC,CACF;EAEDR,cAAc,CAACI,KAAK,CAAC,CAAC,CAAC;;EAEvB,IAAIK,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,oBAAoB,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACpDD,GAAG,CAACG,IAAI,CAACV,UAAU,CAACW,KAAK,CAAC,IAAIC,MAAM,CAAE,GAAER,oBAAoB,CAACI,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAEX,KAAM,GAAE,CAAC,CAAC,CAAC;EACzF;EACA;EACA;EACA;EACA;;EAEA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBT,2BAA2B,GAAGC,UAAU,CAACa,KAAK,CAAC,CAAC,EAAEN,GAAG,CAACC,CAAC,CAAC,CAACM,KAAK,CAAC,CAACC,MAAM,CAACX,oBAAoB,CAACI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAACO,MAAM,CAACpB,UAAU,CAAC;MAC3H;IACF;EACF;EACA,OAAOI,2BAA2B;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}