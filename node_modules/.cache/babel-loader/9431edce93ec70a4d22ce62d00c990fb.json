{"ast":null,"code":"import { findExpression, expression, regex } from \"./findExpression\";\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\nexport let finalDisplayAll = \"\";\nlet displayAll = \"\";\nexport let displayAllAfterTrigonometry = \"\";\nexport function trigonometryInDegrees(trigFunction, state) {\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\n  findExpression(state);\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      displayAllAfterTrigonometry = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterTrigonometry\"]).replace(\"trigFunc\", trigFunction).concat(expression).concat(\")\");\n      break;\n    }\n  }\n  return displayAllAfterTrigonometry;\n}","map":{"version":3,"names":["findExpression","expression","regex","changeOneIntoAnother","finalDisplayAll","displayAll","displayAllAfterTrigonometry","trigonometryInDegrees","trigFunction","state","lastResult","arr","i","length","push","match","RegExp","slice","index","concat","replace"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/trigonometry.js"],"sourcesContent":["import { findExpression, expression, regex } from \"./findExpression\";\r\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\r\n\r\nexport let finalDisplayAll = \"\";\r\nlet displayAll = \"\";\r\nexport let displayAllAfterTrigonometry = \"\";\r\n\r\nexport function trigonometryInDegrees(trigFunction, state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  findExpression(state);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterTrigonometry = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterTrigonometry\"]).replace(\"trigFunc\", trigFunction).concat(expression).concat(\")\");\r\n\r\n      break;\r\n    }\r\n  }\r\n  return displayAllAfterTrigonometry;\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,oBAAoB,QAAQ,wBAAwB;AAE7D,OAAO,IAAIC,eAAe,GAAG,EAAE;AAC/B,IAAIC,UAAU,GAAG,EAAE;AACnB,OAAO,IAAIC,2BAA2B,GAAG,EAAE;AAE3C,OAAO,SAASC,qBAAqB,CAACC,YAAY,EAAEC,KAAK,EAAE;EACzDJ,UAAU,GAAGI,KAAK,CAACC,UAAU,KAAK,EAAE,GAAGD,KAAK,CAACC,UAAU,GAAGD,KAAK,CAACJ,UAAU;EAE1EL,cAAc,CAACS,KAAK,CAAC;EAErB,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,oBAAoB,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IACpDD,GAAG,CAACG,IAAI,CAACT,UAAU,CAACU,KAAK,CAAC,IAAIC,MAAM,CAAE,GAAEb,oBAAoB,CAACS,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAEV,KAAM,GAAE,CAAC,CAAC,CAAC;EACzF;EAEA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBN,2BAA2B,GAAGD,UAAU,CAACY,KAAK,CAAC,CAAC,EAAEN,GAAG,CAACC,CAAC,CAAC,CAACM,KAAK,CAAC,CAACC,MAAM,CAAChB,oBAAoB,CAACS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAACQ,OAAO,CAAC,UAAU,EAAEZ,YAAY,CAAC,CAACW,MAAM,CAAClB,UAAU,CAAC,CAACkB,MAAM,CAAC,GAAG,CAAC;MAErL;IACF;EACF;EACA,OAAOb,2BAA2B;AACpC"},"metadata":{},"sourceType":"module"}