{"ast":null,"code":"export default function calculate(arr) {\n  console.log(\"arr inside calculate\", arr);\n  arr = calculateInOrder(arr, \"*/\");\n  arr = calculateInOrder(arr, \"+-\");\n  return arr[0];\n}\nfunction calculateInOrder(arr, operators) {\n  // console.log(\"inside SameOperations\", arr, operators);\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = currentOperator === \"*\" ? currentOperation[0] * currentOperation[2] : currentOperator === \"/\" ? currentOperation[0] / currentOperation[2] : currentOperator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calculateInOrder(result, operators);\n  }\n  // console.log(\"inside SameOperations before return\", arr, operator);\n  return arr;\n}","map":{"version":3,"names":["calculate","arr","console","log","calculateInOrder","operators","operatorIndex","findIndex","elem","currentOperator","currentOperation","slice","currentResult","result","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["export default function calculate(arr) {\r\n  console.log(\"arr inside calculate\", arr);\r\n\r\n  arr = calculateInOrder(arr, \"*/\");\r\n  arr = calculateInOrder(arr, \"+-\");\r\n\r\n  return arr[0];\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  // console.log(\"inside SameOperations\", arr, operators);\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n\r\n    let currentResult = currentOperator === \"*\" ? currentOperation[0] * currentOperation[2] : currentOperator === \"/\" ? currentOperation[0] / currentOperation[2] : currentOperator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  // console.log(\"inside SameOperations before return\", arr, operator);\r\n  return arr;\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,SAAS,CAACC,GAAG,EAAE;EACrCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,GAAG,CAAC;EAExCA,GAAG,GAAGG,gBAAgB,CAACH,GAAG,EAAE,IAAI,CAAC;EACjCA,GAAG,GAAGG,gBAAgB,CAACH,GAAG,EAAE,IAAI,CAAC;EAEjC,OAAOA,GAAG,CAAC,CAAC,CAAC;AACf;AAEA,SAASG,gBAAgB,CAACH,GAAG,EAAEI,SAAS,EAAE;EACxC;EACA,IAAIC,aAAa,GAAGL,GAAG,CAACM,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKH,SAAS,CAAC,CAAC,CAAC,IAAIG,IAAI,KAAKH,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3F,IAAII,eAAe,GAAGR,GAAG,CAACK,aAAa,CAAC;EAExC,IAAIA,aAAa,KAAK,CAAC,CAAC,EAAE;IACxB,IAAII,gBAAgB,GAAGT,GAAG,CAACU,KAAK,CAACL,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAG,CAAC,CAAC;IAEtE,IAAIM,aAAa,GAAGH,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGD,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGD,eAAe,KAAK,GAAG,GAAGC,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC;IAE/Q,IAAIG,MAAM,GAAGZ,GAAG,CACbU,KAAK,CAAC,CAAC,EAAEL,aAAa,GAAG,CAAC,CAAC,CAC3BQ,MAAM,CAACF,aAAa,CAAC,CACrBE,MAAM,CAACb,GAAG,CAACU,KAAK,CAACL,aAAa,GAAG,CAAC,CAAC,CAAC;IAEvC,OAAOF,gBAAgB,CAACS,MAAM,EAAER,SAAS,CAAC;EAC5C;EACA;EACA,OAAOJ,GAAG;AACZ"},"metadata":{},"sourceType":"module"}