{"ast":null,"code":"export default function calculate(arr) {\n  arr = calcIdenticalOperations(arr, \"*\", \"/\");\n  // arr = calcIdenticalOperations(arr, \"/\");\n  arr = calcIdenticalOperations(arr, \"+\");\n  arr = calcIdenticalOperations(arr, \"-\");\n  return arr[0];\n}\nfunction calcIdenticalOperations(arr, operator1, operator2) {\n  console.log(\"insede SameOperations\", arr, operator);\n  let operatorIndex = arr.findIndex(elem => elem === operator1 || operator2);\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = operator === \"*\" ? currentOperation[0] * currentOperation[2] : operator === \"/\" ? currentOperation[0] / currentOperation[2] : operator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calcIdenticalOperations(result, operator);\n  }\n  console.log(\"insede SameOperations before return\", arr, operator);\n  return arr;\n}","map":{"version":3,"names":["calculate","arr","calcIdenticalOperations","operator1","operator2","console","log","operator","operatorIndex","findIndex","elem","currentOperation","slice","currentResult","result","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["export default function calculate(arr) {\r\n  arr = calcIdenticalOperations(arr, \"*\", \"/\");\r\n  // arr = calcIdenticalOperations(arr, \"/\");\r\n  arr = calcIdenticalOperations(arr, \"+\");\r\n  arr = calcIdenticalOperations(arr, \"-\");\r\n\r\n  return arr[0];\r\n}\r\n\r\nfunction calcIdenticalOperations(arr, operator1, operator2) {\r\n  console.log(\"insede SameOperations\", arr, operator);\r\n  let operatorIndex = arr.findIndex((elem) => elem === operator1 || operator2);\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    let currentResult = operator === \"*\" ? currentOperation[0] * currentOperation[2] : operator === \"/\" ? currentOperation[0] / currentOperation[2] : operator === \"+\" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calcIdenticalOperations(result, operator);\r\n  }\r\n  console.log(\"insede SameOperations before return\", arr, operator);\r\n  return arr;\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,SAAS,CAACC,GAAG,EAAE;EACrCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5C;EACAA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EACvCA,GAAG,GAAGC,uBAAuB,CAACD,GAAG,EAAE,GAAG,CAAC;EAEvC,OAAOA,GAAG,CAAC,CAAC,CAAC;AACf;AAEA,SAASC,uBAAuB,CAACD,GAAG,EAAEE,SAAS,EAAEC,SAAS,EAAE;EAC1DC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,GAAG,EAAEM,QAAQ,CAAC;EACnD,IAAIC,aAAa,GAAGP,GAAG,CAACQ,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAKP,SAAS,IAAIC,SAAS,CAAC;EAC5E,IAAII,aAAa,KAAK,CAAC,CAAC,EAAE;IACxB,IAAIG,gBAAgB,GAAGV,GAAG,CAACW,KAAK,CAACJ,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAG,CAAC,CAAC;IACtE,IAAIK,aAAa,GAAGN,QAAQ,KAAK,GAAG,GAAGI,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGJ,QAAQ,KAAK,GAAG,GAAGI,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGJ,QAAQ,KAAK,GAAG,GAAGI,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,CAAC,CAAC,CAAC;IAE1P,IAAIG,MAAM,GAAGb,GAAG,CACbW,KAAK,CAAC,CAAC,EAAEJ,aAAa,GAAG,CAAC,CAAC,CAC3BO,MAAM,CAACF,aAAa,CAAC,CACrBE,MAAM,CAACd,GAAG,CAACW,KAAK,CAACJ,aAAa,GAAG,CAAC,CAAC,CAAC;IAEvC,OAAON,uBAAuB,CAACY,MAAM,EAAEP,QAAQ,CAAC;EAClD;EACAF,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEL,GAAG,EAAEM,QAAQ,CAAC;EACjE,OAAON,GAAG;AACZ"},"metadata":{},"sourceType":"module"}