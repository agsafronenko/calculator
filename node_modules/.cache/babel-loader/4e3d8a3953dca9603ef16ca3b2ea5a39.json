{"ast":null,"code":"import { expression, expressionNegative, findExpression } from \"./findExpression\";\nimport calculate from \"./equals\";\nexport function factorial(state) {\n  findExpression(state);\n  let result = calculate(state, expression);\n  console.log(\"you are in factorial: RESULT\", result);\n  // if (expression < 0) {\n  //       if (alertActive.negative) {\n  //         alert(\"invalid input: factorials are only defined for positive numbers\");\n  //       }\n  //       return \"invalid input\";\n}\n\n//   } else if (num % 1 !== 0 && num !== \")\") {\n//     alert(`factorials for nonintegers are defined based on simplified Gamma function:\n//       ~~ level of accuracy: low ~~`);\n//     return [Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num), false];\n//   } else if (num === \")\") {\n//     return [\"!\", false];\n//   } else {\n//     result = Number(num);\n//     if (Number.isInteger(result)) {\n//       for (let i = result - 1; i > 0; i--) {\n//         result *= i;\n//       }\n//       return [result, false];\n//     }\n//   }\n// }\n\n// export function factorial(num, alertActive) {\n//   let result = \"\";\n\n//   if (num < 0) {\n//     if (alertActive.negative) {\n//       alert(\"invalid input: factorials are only defined for positive numbers\");\n//     }\n//     return [\"invalid input\", false];\n//   } else if (num % 1 !== 0 && num !== \")\") {\n//     alert(`factorials for nonintegers are defined based on simplified Gamma function:\n//       ~~ level of accuracy: low ~~`);\n//     return [Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num), false];\n//   } else if (num === \")\") {\n//     return [\"!\", false];\n//   } else {\n//     result = Number(num);\n//     if (Number.isInteger(result)) {\n//       for (let i = result - 1; i > 0; i--) {\n//         result *= i;\n//       }\n//       return [result, false];\n//     }\n//   }\n// }","map":{"version":3,"names":["expression","expressionNegative","findExpression","calculate","factorial","state","result","console","log"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { expression, expressionNegative, findExpression } from \"./findExpression\";\r\nimport calculate from \"./equals\";\r\n\r\nexport function factorial(state) {\r\n  findExpression(state);\r\n  let result = calculate(state, expression);\r\n  console.log(\"you are in factorial: RESULT\", result);\r\n  // if (expression < 0) {\r\n  //       if (alertActive.negative) {\r\n  //         alert(\"invalid input: factorials are only defined for positive numbers\");\r\n  //       }\r\n  //       return \"invalid input\";\r\n}\r\n\r\n//   } else if (num % 1 !== 0 && num !== \")\") {\r\n//     alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n//       ~~ level of accuracy: low ~~`);\r\n//     return [Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num), false];\r\n//   } else if (num === \")\") {\r\n//     return [\"!\", false];\r\n//   } else {\r\n//     result = Number(num);\r\n//     if (Number.isInteger(result)) {\r\n//       for (let i = result - 1; i > 0; i--) {\r\n//         result *= i;\r\n//       }\r\n//       return [result, false];\r\n//     }\r\n//   }\r\n// }\r\n\r\n// export function factorial(num, alertActive) {\r\n//   let result = \"\";\r\n\r\n//   if (num < 0) {\r\n//     if (alertActive.negative) {\r\n//       alert(\"invalid input: factorials are only defined for positive numbers\");\r\n//     }\r\n//     return [\"invalid input\", false];\r\n//   } else if (num % 1 !== 0 && num !== \")\") {\r\n//     alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n//       ~~ level of accuracy: low ~~`);\r\n//     return [Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num), false];\r\n//   } else if (num === \")\") {\r\n//     return [\"!\", false];\r\n//   } else {\r\n//     result = Number(num);\r\n//     if (Number.isInteger(result)) {\r\n//       for (let i = result - 1; i > 0; i--) {\r\n//         result *= i;\r\n//       }\r\n//       return [result, false];\r\n//     }\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,kBAAkB;AACjF,OAAOC,SAAS,MAAM,UAAU;AAEhC,OAAO,SAASC,SAAS,CAACC,KAAK,EAAE;EAC/BH,cAAc,CAACG,KAAK,CAAC;EACrB,IAAIC,MAAM,GAAGH,SAAS,CAACE,KAAK,EAAEL,UAAU,CAAC;EACzCO,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,MAAM,CAAC;EACnD;EACA;EACA;EACA;EACA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}