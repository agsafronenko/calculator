{"ast":null,"code":"import { findExpression, expression, expressionNegative } from \"./findExpression\";\nexport let finalDisplayAll = \"\";\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\n  findExpression(state);\n}\n\n// export function trigonometryInDegrees(curDegree, trigFunc, state) {\n//   console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\n//   let displayAll = state.displayAll;\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n//     console.log(\"trigonometry stage 0.5\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i - 3;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\n//     return \"\";\n//   } else if (state.displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\n//     console.log(\"trigonometry stage 0.7\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\n//     return \"\";\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n//     console.log(\"trigonometry stage 1\");\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n//     finalDisplayAll = state.displayAll.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayAll.slice(lastTrigonometryIndex)})`);\n//     return \"\";\n//   } else if (state.lastInput === \")\") {\n//     console.log(\"trigonometry stage 2\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         break;\n//       }\n//     }\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayAll.slice(firstOpeningIndex)}`);\n//     return \"\";\n//   } else if (state.lastInputType === \"digit\") {\n//     console.log(\"trigonometry stage 3\");\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n//       console.log(\"trigonometry stage 3.1\");\n//       let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n//       let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\n//       finalDisplayAll = displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n//       console.log(\"abs stage 4.15\");\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n//       finalDisplayAll = displayAll.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\n\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n//       console.log(\"trigonometry stage 3.2\");\n//       let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n//       let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\n//       finalDisplayAll =\n//         lastNegativeNumIndex !== 0\n//           ? displayAll\n//               .slice(0, lastNegativeNumIndex)\n//               .concat(\" + \")\n//               .concat(`${trigFunc}(${lastPositiveNum * -1})`)\n//           : displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else {\n//       console.log(\"trigonometry stage 3.3\");\n//       let regexNum = new RegExp(`${state.displayCur}$`);\n//       let lastNumIndex = displayAll.match(regexNum).index;\n//       finalDisplayAll = displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\n//       let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n//       return calculateResult;\n//     }\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n//     // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n//     let lastNumIndex = state.displayAll.match(regexNum).index;\n//     finalDisplayAll = state.displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayAll.match(regexNum)})`);\n//     return \"\";\n//   }\n// }\n\n// function trigonometryCalculate(curDegree, trigFunc, state) {\n//   let reciprocal = {\n//     cot: \"tan\",\n//     sec: \"cos\",\n//     csc: \"sin\",\n//   };\n//   let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\n//   return calculateResult().toString();\n// }","map":{"version":3,"names":["findExpression","expression","expressionNegative","finalDisplayAll","trigonometryInDegrees","curDegree","trigFunc","state"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/trigonometry.js"],"sourcesContent":["import { findExpression, expression, expressionNegative } from \"./findExpression\";\r\nexport let finalDisplayAll = \"\";\r\n\r\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n  findExpression(state);\r\n}\r\n\r\n// export function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n//   console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\r\n//   let displayAll = state.displayAll;\r\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n//     console.log(\"trigonometry stage 0.5\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i - 3;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return \"\";\r\n//   } else if (state.displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n//     console.log(\"trigonometry stage 0.7\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return \"\";\r\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n//     console.log(\"trigonometry stage 1\");\r\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n//     finalDisplayAll = state.displayAll.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n//     return \"\";\r\n//   } else if (state.lastInput === \")\") {\r\n//     console.log(\"trigonometry stage 2\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         break;\r\n//       }\r\n//     }\r\n//     finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayAll.slice(firstOpeningIndex)}`);\r\n//     return \"\";\r\n//   } else if (state.lastInputType === \"digit\") {\r\n//     console.log(\"trigonometry stage 3\");\r\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n//       console.log(\"trigonometry stage 3.1\");\r\n//       let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n//       let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n//       finalDisplayAll = displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n//       console.log(\"abs stage 4.15\");\r\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n//       finalDisplayAll = displayAll.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\r\n\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n//       console.log(\"trigonometry stage 3.2\");\r\n//       let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n//       let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n//       finalDisplayAll =\r\n//         lastNegativeNumIndex !== 0\r\n//           ? displayAll\r\n//               .slice(0, lastNegativeNumIndex)\r\n//               .concat(\" + \")\r\n//               .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n//           : displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else {\r\n//       console.log(\"trigonometry stage 3.3\");\r\n//       let regexNum = new RegExp(`${state.displayCur}$`);\r\n//       let lastNumIndex = displayAll.match(regexNum).index;\r\n//       finalDisplayAll = displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n//       let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n//       return calculateResult;\r\n//     }\r\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n//     // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n//     let lastNumIndex = state.displayAll.match(regexNum).index;\r\n//     finalDisplayAll = state.displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayAll.match(regexNum)})`);\r\n//     return \"\";\r\n//   }\r\n// }\r\n\r\n// function trigonometryCalculate(curDegree, trigFunc, state) {\r\n//   let reciprocal = {\r\n//     cot: \"tan\",\r\n//     sec: \"cos\",\r\n//     csc: \"sin\",\r\n//   };\r\n//   let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n//   return calculateResult().toString();\r\n// }\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,kBAAkB;AACjF,OAAO,IAAIC,eAAe,GAAG,EAAE;AAE/B,OAAO,SAASC,qBAAqB,CAACC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EAChEP,cAAc,CAACO,KAAK,CAAC;AACv},"metadata":{},"sourceType":"module"}