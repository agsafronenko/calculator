{"ast":null,"code":"export let finalDisplayOpsChangeSign = \"\";\nexport function changeSign(state) {\n  console.log(\"you are in changeSign function\");\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  let changeOneIntoAnother = [{\n    before: \" \\\\-  - \",\n    after: \" - \"\n  }, {\n    before: \" \\\\+  - \",\n    after: \" + \"\n  }, {\n    before: \" \\\\*  - \",\n    after: \" * \"\n  }, {\n    before: \" \\\\/  - \",\n    after: \" / \"\n  }, {\n    before: \" ^ - \",\n    after: \" ^ \"\n  }, {\n    before: \" yroot - \",\n    after: \" yroot \"\n  }, {\n    before: \" - \",\n    after: \" + \"\n  }, {\n    before: \" \\\\+ \",\n    after: \" - \"\n  }, {\n    before: \"\",\n    after: \" - \"\n  }];\n  let expression = findExpression(state);\n  console.log(\"expression\", expression);\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\n    console.log(\"i\", i, \"displayOps\", displayOps, \"arr\", arr, \"push\", displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\n      console.log(\"finalDisplayOpsChangesign\", finalDisplayOpsChangeSign);\n      break;\n    }\n  }\n  return finalDisplayOpsChangeSign;\n}\nfunction findExpression(state) {\n  if (state.displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n    console.log(\"changeSign stage 0.5\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i - 3;\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n        break;\n      }\n    }\n    let result = state.displayOps.slice(firstOpeningIndex);\n    return result;\n  }\n}\n//   } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\n//     console.log(\"trigonometry stage 0.7\");\n//     let displayOpsLength = state.displayOps.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayOpsLength - 2; i >= 0; i--) {\n//       if (state.displayOps[i] === \")\") closingNum++;\n//       if (state.displayOps[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n//     return \"\";\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n//     console.log(\"trigonometry stage 1\");\n//     let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n//     let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n//     finalDisplayOps = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n//     return \"\";\n//   } else if (state.lastInput === \")\") {\n//     console.log(\"trigonometry stage 2\");\n//     let displayOpsLength = state.displayOps.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayOpsLength - 2; i >= 0; i--) {\n//       if (state.displayOps[i] === \")\") closingNum++;\n//       if (state.displayOps[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         break;\n//       }\n//     }\n//     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\n//     return \"\";\n//   } else if (state.lastInputType === \"digit\") {\n//     console.log(\"trigonometry stage 3\");\n//     if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n//       console.log(\"trigonometry stage 3.1\");\n//       let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n//       let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n//       finalDisplayOps = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOps\", finalDisplayOps);\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n//       console.log(\"abs stage 4.15\");\n//       let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n//       finalDisplayOps = displayOps.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\n\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n//       console.log(\"trigonometry stage 3.2\");\n//       let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n//       let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n//       finalDisplayOps =\n//         lastNegativeNumIndex !== 0\n//           ? displayOps\n//               .slice(0, lastNegativeNumIndex)\n//               .concat(\" + \")\n//               .concat(`${trigFunc}(${lastPositiveNum * -1})`)\n//           : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOps\", finalDisplayOps);\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n//       return calculateResult;\n//     } else {\n//       console.log(\"trigonometry stage 3.3\");\n//       let regexNum = new RegExp(`${state.displayCur}$`);\n//       let lastNumIndex = displayOps.match(regexNum).index;\n//       finalDisplayOps = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\n//       let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n//       return calculateResult;\n//     }\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n//     // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n//     let lastNumIndex = state.displayOps.match(regexNum).index;\n//     finalDisplayOps = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\n//     return \"\";\n//   }\n// }","map":{"version":3,"names":["finalDisplayOpsChangeSign","changeSign","state","console","log","displayOps","lastResult","concat","changeOneIntoAnother","before","after","expression","findExpression","arr","i","length","push","match","slice","index","lastOperator","displayOpsLength","closingNum","openingNum","firstOpeningIndex","result"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeSign.js"],"sourcesContent":["export let finalDisplayOpsChangeSign = \"\";\r\n\r\nexport function changeSign(state) {\r\n  console.log(\"you are in changeSign function\");\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n\r\n  let changeOneIntoAnother = [\r\n    {\r\n      before: \" \\\\-  - \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      after: \" * \",\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      after: \" / \",\r\n    },\r\n    {\r\n      before: \" ^ - \",\r\n      after: \" ^ \",\r\n    },\r\n    {\r\n      before: \" yroot - \",\r\n      after: \" yroot \",\r\n    },\r\n    {\r\n      before: \" - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \"\",\r\n      after: \" - \",\r\n    },\r\n  ];\r\n\r\n  let expression = findExpression(state);\r\n  console.log(\"expression\", expression);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\r\n    console.log(\"i\", i, \"displayOps\", displayOps, \"arr\", arr, \"push\", displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\r\n  }\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\r\n      console.log(\"finalDisplayOpsChangesign\", finalDisplayOpsChangeSign);\r\n      break;\r\n    }\r\n  }\r\n  return finalDisplayOpsChangeSign;\r\n}\r\n\r\nfunction findExpression(state) {\r\n  if (state.displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"changeSign stage 0.5\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    let result = state.displayOps.slice(firstOpeningIndex);\r\n    return result;\r\n  }\r\n}\r\n//   } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n//     console.log(\"trigonometry stage 0.7\");\r\n//     let displayOpsLength = state.displayOps.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n//       if (state.displayOps[i] === \")\") closingNum++;\r\n//       if (state.displayOps[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n//     return \"\";\r\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n//     console.log(\"trigonometry stage 1\");\r\n//     let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n//     let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n//     finalDisplayOps = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n//     return \"\";\r\n//   } else if (state.lastInput === \")\") {\r\n//     console.log(\"trigonometry stage 2\");\r\n//     let displayOpsLength = state.displayOps.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n//       if (state.displayOps[i] === \")\") closingNum++;\r\n//       if (state.displayOps[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         break;\r\n//       }\r\n//     }\r\n//     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\r\n//     return \"\";\r\n//   } else if (state.lastInputType === \"digit\") {\r\n//     console.log(\"trigonometry stage 3\");\r\n//     if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n//       console.log(\"trigonometry stage 3.1\");\r\n//       let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n//       let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n//       finalDisplayOps = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOps\", finalDisplayOps);\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n//       console.log(\"abs stage 4.15\");\r\n//       let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n//       finalDisplayOps = displayOps.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\r\n\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n//       console.log(\"trigonometry stage 3.2\");\r\n//       let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n//       let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n//       finalDisplayOps =\r\n//         lastNegativeNumIndex !== 0\r\n//           ? displayOps\r\n//               .slice(0, lastNegativeNumIndex)\r\n//               .concat(\" + \")\r\n//               .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n//           : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOps\", finalDisplayOps);\r\n//       let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n//       return calculateResult;\r\n//     } else {\r\n//       console.log(\"trigonometry stage 3.3\");\r\n//       let regexNum = new RegExp(`${state.displayCur}$`);\r\n//       let lastNumIndex = displayOps.match(regexNum).index;\r\n//       finalDisplayOps = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n//       let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n//       return calculateResult;\r\n//     }\r\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n//     // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n//     let lastNumIndex = state.displayOps.match(regexNum).index;\r\n//     finalDisplayOps = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\r\n//     return \"\";\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,OAAO,IAAIA,yBAAyB,GAAG,EAAE;AAEzC,OAAO,SAASC,UAAU,CAACC,KAAK,EAAE;EAChCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC7C,IAAIC,UAAU,GAAGH,KAAK,CAACG,UAAU;EACjC,IAAIH,KAAK,CAACI,UAAU,KAAK,EAAE,EAAED,UAAU,GAAG,EAAE,CAACE,MAAM,CAACL,KAAK,CAACI,UAAU,CAAC;EAErE,IAAIE,oBAAoB,GAAG,CACzB;IACEC,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,WAAW;IACnBC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE;EACT,CAAC,EACD;IACED,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE;EACT,CAAC,CACF;EAED,IAAIC,UAAU,GAAGC,cAAc,CAACV,KAAK,CAAC;EACtCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,UAAU,CAAC;EAErC,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,oBAAoB,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACpDD,GAAG,CAACG,IAAI,CAACX,UAAU,CAACY,KAAK,CAAE,GAAET,oBAAoB,CAACM,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAEH,UAAW,GAAE,CAAC,CAAC;IAChFR,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEU,CAAC,EAAE,YAAY,EAAET,UAAU,EAAE,KAAK,EAAEQ,GAAG,EAAE,MAAM,EAAER,UAAU,CAACY,KAAK,CAAE,GAAET,oBAAoB,CAACM,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAEH,UAAW,GAAE,CAAC,CAAC;EAC3I;EAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBd,yBAAyB,GAAGK,UAAU,CAACa,KAAK,CAAC,CAAC,EAAEL,GAAG,CAACC,CAAC,CAAC,CAACK,KAAK,CAAC,CAACZ,MAAM,CAACC,oBAAoB,CAACM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAACP,MAAM,CAACI,UAAU,CAAC;MACzHR,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,yBAAyB,CAAC;MACnE;IACF;EACF;EACA,OAAOA,yBAAyB;AAClC;AAEA,SAASY,cAAc,CAACV,KAAK,EAAE;EAC7B,IAAIA,KAAK,CAACG,UAAU,CAACY,KAAK,CAAC,OAAO,CAAC,KAAKf,KAAK,CAACkB,YAAY,KAAK,cAAc,IAAIlB,KAAK,CAACkB,YAAY,KAAK,KAAK,CAAC,EAAE;IAC9GjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,IAAIiB,gBAAgB,GAAGnB,KAAK,CAACG,UAAU,CAACU,MAAM;IAC9C,IAAIO,UAAU,GAAG,CAAC;IAClB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,iBAAiB,GAAG,CAAC;IACzB,KAAK,IAAIV,CAAC,GAAGO,gBAAgB,GAAG,CAAC,EAAEP,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9C,IAAIZ,KAAK,CAACG,UAAU,CAACS,CAAC,CAAC,KAAK,GAAG,EAAEQ,UAAU,EAAE;MAC7C,IAAIpB,KAAK,CAACG,UAAU,CAACS,CAAC,CAAC,KAAK,GAAG,EAAES,UAAU,EAAE;MAC7C,IAAID,UAAU,KAAKC,UAAU,EAAE;QAC7BC,iBAAiB,GAAGV,CAAC,GAAG,CAAC;QACzBX,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEkB,UAAU,EAAEC,UAAU,EAAEC,iBAAiB,CAAC;QAC7E;MACF;IACF;IACA,IAAIC,MAAM,GAAGvB,KAAK,CAACG,UAAU,CAACa,KAAK,CAACM,iBAAiB,CAAC;IACtD,OAAOC,MAAM;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}