{"ast":null,"code":"export var displayAllExpression=\"\";export function FixIncompleteInputs(state,expr){if(/\\d/.test(expr)===false){displayAllExpression=\"0\";}else{var openingParanthesesAfterTheLastDigit=0;if(state.lastInputType!==\"digit\"&&state.lastInput!==\")\"){var lastDigitIndex=expr.split(\"\").reverse().findIndex(function(elem){return /\\d|!|%|\\)/.test(elem);});displayAllExpression=expr.slice(0,expr.length-lastDigitIndex);var afterTheLastDigit=expr.slice(expr.length-lastDigitIndex);for(var i=0;i<afterTheLastDigit.length;i++){if(afterTheLastDigit[i]===\"(\")openingParanthesesAfterTheLastDigit++;}}else{displayAllExpression=expr;}addMissingParenthesis(state.parenthesesDelta-openingParanthesesAfterTheLastDigit);}}function addMissingParenthesis(delta){if(delta>0){displayAllExpression+=\")\";delta-=1;addMissingParenthesis(delta);}}","map":{"version":3,"names":["displayAllExpression","FixIncompleteInputs","state","expr","test","openingParanthesesAfterTheLastDigit","lastInputType","lastInput","lastDigitIndex","split","reverse","findIndex","elem","slice","length","afterTheLastDigit","i","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\nexport function FixIncompleteInputs(state, expr) {\r\n  if (/\\d/.test(expr) === false) {\r\n    displayAllExpression = \"0\";\r\n  } else {\r\n    let openingParanthesesAfterTheLastDigit = 0;\r\n    if (state.lastInputType !== \"digit\" && state.lastInput !== \")\") {\r\n      let lastDigitIndex = expr\r\n        .split(\"\")\r\n        .reverse()\r\n        .findIndex((elem) => /\\d|!|%|\\)/.test(elem));\r\n      displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\r\n      let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex);\r\n\r\n      for (let i = 0; i < afterTheLastDigit.length; i++) {\r\n        if (afterTheLastDigit[i] === \"(\") openingParanthesesAfterTheLastDigit++;\r\n      }\r\n    } else {\r\n      displayAllExpression = expr;\r\n    }\r\n    addMissingParenthesis(state.parenthesesDelta - openingParanthesesAfterTheLastDigit);\r\n  }\r\n}\r\n\r\nfunction addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAO,IAAIA,qBAAoB,CAAG,EAAE,CAEpC,MAAO,SAASC,oBAAmB,CAACC,KAAK,CAAEC,IAAI,CAAE,CAC/C,GAAI,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC,GAAK,KAAK,CAAE,CAC7BH,oBAAoB,CAAG,GAAG,CAC5B,CAAC,IAAM,CACL,GAAIK,oCAAmC,CAAG,CAAC,CAC3C,GAAIH,KAAK,CAACI,aAAa,GAAK,OAAO,EAAIJ,KAAK,CAACK,SAAS,GAAK,GAAG,CAAE,CAC9D,GAAIC,eAAc,CAAGL,IAAI,CACtBM,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAC,SAACC,IAAI,QAAK,YAAW,CAACR,IAAI,CAACQ,IAAI,CAAC,GAAC,CAC9CZ,oBAAoB,CAAGG,IAAI,CAACU,KAAK,CAAC,CAAC,CAAEV,IAAI,CAACW,MAAM,CAAGN,cAAc,CAAC,CAClE,GAAIO,kBAAiB,CAAGZ,IAAI,CAACU,KAAK,CAACV,IAAI,CAACW,MAAM,CAAGN,cAAc,CAAC,CAEhE,IAAK,GAAIQ,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,iBAAiB,CAACD,MAAM,CAAEE,CAAC,EAAE,CAAE,CACjD,GAAID,iBAAiB,CAACC,CAAC,CAAC,GAAK,GAAG,CAAEX,mCAAmC,EAAE,CACzE,CACF,CAAC,IAAM,CACLL,oBAAoB,CAAGG,IAAI,CAC7B,CACAc,qBAAqB,CAACf,KAAK,CAACgB,gBAAgB,CAAGb,mCAAmC,CAAC,CACrF,CACF,CAEA,QAASY,sBAAqB,CAACE,KAAK,CAAE,CACpC,GAAIA,KAAK,CAAG,CAAC,CAAE,CACbnB,oBAAoB,EAAI,GAAG,CAC3BmB,KAAK,EAAI,CAAC,CACVF,qBAAqB,CAACE,KAAK,CAAC,CAC9B,CACF"},"metadata":{},"sourceType":"module"}