{"ast":null,"code":"// next steps:\n// avast full scan\n// install update\n// full back-up, incl saves, scr of acc names incl wind\n// pc troubleshoot - fix for drivers\n// re-code change sign\n// show in displayCur result for current trigonometry, factorial, etc\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\n// consider adding event listeners\n// - check every input mixing with others\n\n// - when invalid input appers or any other error, block all keys except for AC and del\nimport { factorial } from \"./factorial\";\nexport default function calculate(expr) {\n  expr = expr === \"\" ? convertDisplayOpsIntoArray(\"0\") : convertDisplayOpsIntoArray(expr);\n  return findParenthesis(expr);\n}\nfunction convertDisplayOpsIntoArray(string) {\n  console.log(\"string inside convertDisplayIntoArr\", string);\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\n  let displayOpsArray = string.match(parseRegex).map(elem => isFinite(elem) ? Number(elem) : elem);\n  displayOpsArray.unshift(\"(\");\n  displayOpsArray.push(\")\");\n  console.log(\"convertDisplayIntoArr\", displayOpsArray);\n  return displayOpsArray;\n}\nfunction findParenthesis(expr) {\n  let firstClosingIndex = expr.findIndex(parentesis => parentesis === \")\");\n  if (firstClosingIndex !== -1) {\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex(parentesis => parentesis === \"(\");\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\n    expr = expr.slice(0, firstClosingIndex - firstOpeningIndex - 1).concat(resultInsideParentheses).concat(expr.slice(firstClosingIndex + 1));\n    return findParenthesis(expr);\n  }\n  return expr[0];\n}\nfunction calculateInsideParentheses(expr) {\n  expr = findNegativeValues(expr);\n  expr = calculateInOrder(expr, [\"abs\", \" log base \"]);\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\n  expr = calculateInOrder(expr, [\" mod \", \" mod \"]);\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\n  return expr[0];\n}\nfunction findNegativeValues(arr) {\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && ind === 0 || elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\");\n  if (negativeIndex !== -1) {\n    let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n    return findNegativeValues(newArr);\n  }\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  if (arr.some(elem => elem === \"invalid input\")) {\n    arr = [\"invalid input\"];\n  }\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\n    let currentResult = currentOperator === \"abs\" ? Math.abs(currentOperation[currentOperation.length - 1]) : currentOperator === \"sin\" ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cos\" ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"tan\" ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cot\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"sec\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"csc\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"!\" ? factorial(currentOperation[0]) : currentOperator === \"%\" ? currentOperation[0] / 100 : currentOperator === \" log base \" ? Math.log(currentOperation[0]) / Math.log(currentOperation[2]) : currentOperator === \" mod \" ? currentOperation[0] % currentOperation[2] : currentOperator === \" yroot \" ? Math.pow(currentOperation[0], 1 / currentOperation[2]) : currentOperator === \" ^ \" ? Math.pow(currentOperation[0], currentOperation[2]) : currentOperator === \" * \" ? currentOperation[0] * currentOperation[2] : currentOperator === \" / \" ? currentOperation[0] / currentOperation[2] : currentOperator === \" + \" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\n    let result = currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\" ? arr.slice(0, operatorIndex).concat(currentResult).concat(arr.slice(operatorIndex + 2)) : currentOperator === \"!\" || currentOperator === \"%\" ? arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 1)) : arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    console.log(\"result\", result);\n    return calculateInOrder(result, operators);\n  }\n  return arr;\n}\nexport let displayOpsExpression = \"\";\nexport function lastLegitSymbol(displayOps) {\n  console.log(\"you actually here\", displayOps);\n  let lastLegitSymbol = displayOps.split(\"\").reverse().findIndex(elem => /\\d|\\(|!/.test(elem));\n  return lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayOps.length;\n}\nexport function deleteRedundantOperators(state) {\n  console.log(\"deleteRedundant\", state.displayOps);\n  console.log(\"state.displayCur\", state.displayCur);\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\n    displayOpsExpression = state.displayOps;\n    // } else if (/\\d/.test(state.displayCur)) {\n    //   displayOpsExpression = state.displayOps;\n  } else {\n    let lastDigitIndex = state.displayOps.split(\"\").reverse().findIndex(elem => /\\d/.test(elem));\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n  console.log(\"deleteRedundant after\", displayOpsExpression);\n}\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayOpsExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}","map":{"version":3,"names":["factorial","calculate","expr","convertDisplayOpsIntoArray","findParenthesis","string","console","log","parseRegex","RegExp","displayOpsArray","match","map","elem","isFinite","Number","unshift","push","firstClosingIndex","findIndex","parentesis","exprInsideParantethes","slice","firstOpeningIndex","reverse","resultInsideParentheses","calculateInsideParentheses","concat","findNegativeValues","calculateInOrder","arr","negativeIndex","ind","newArr","operators","some","operatorIndex","currentOperator","currentOperation","currentResult","Math","abs","length","sin","PI","cos","tan","pow","result","displayOpsExpression","lastLegitSymbol","displayOps","split","test","deleteRedundantOperators","state","displayCur","lastOperator","lastDigitIndex","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/equals.js"],"sourcesContent":["// next steps:\r\n// avast full scan\r\n// install update\r\n// full back-up, incl saves, scr of acc names incl wind\r\n// pc troubleshoot - fix for drivers\r\n// re-code change sign\r\n// show in displayCur result for current trigonometry, factorial, etc\r\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\r\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\r\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\r\n// consider adding event listeners\r\n// - check every input mixing with others\r\n\r\n// - when invalid input appers or any other error, block all keys except for AC and del\r\nimport { factorial } from \"./factorial\";\r\n\r\nexport default function calculate(expr) {\r\n  expr = expr === \"\" ? convertDisplayOpsIntoArray(\"0\") : convertDisplayOpsIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayOpsIntoArray(string) {\r\n  console.log(\"string inside convertDisplayIntoArr\", string);\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayOpsArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayOpsArray.unshift(\"(\");\r\n  displayOpsArray.push(\")\");\r\n  console.log(\"convertDisplayIntoArr\", displayOpsArray);\r\n  return displayOpsArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\"abs\", \" log base \"]);\r\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\r\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\r\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\r\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" mod \", \" mod \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nfunction findNegativeValues(arr) {\r\n  let negativeIndex = arr.findIndex((elem, ind) => (elem === \" - \" && ind === 0) || (elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\"));\r\n  if (negativeIndex !== -1) {\r\n    let newArr = arr\r\n      .slice(0, negativeIndex)\r\n      .concat(arr[negativeIndex + 1] * -1)\r\n      .concat(arr.slice(negativeIndex + 2));\r\n    return findNegativeValues(newArr);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  if (arr.some((elem) => elem === \"invalid input\")) {\r\n    arr = [\"invalid input\"];\r\n  }\r\n\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\r\n\r\n    let currentResult =\r\n      currentOperator === \"abs\"\r\n        ? Math.abs(currentOperation[currentOperation.length - 1])\r\n        : currentOperator === \"sin\"\r\n        ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cos\"\r\n        ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"tan\"\r\n        ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cot\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"sec\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"csc\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"!\"\r\n        ? factorial(currentOperation[0])\r\n        : currentOperator === \"%\"\r\n        ? currentOperation[0] / 100\r\n        : currentOperator === \" log base \"\r\n        ? Math.log(currentOperation[0]) / Math.log(currentOperation[2])\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[0] / currentOperation[2]\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\r\n\r\n    let result =\r\n      currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\"\r\n        ? arr\r\n            .slice(0, operatorIndex)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2))\r\n        : currentOperator === \"!\" || currentOperator === \"%\"\r\n        ? arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 1))\r\n        : arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2));\r\n    console.log(\"result\", result);\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport let displayOpsExpression = \"\";\r\n\r\nexport function lastLegitSymbol(displayOps) {\r\n  console.log(\"you actually here\", displayOps);\r\n  let lastLegitSymbol = displayOps\r\n    .split(\"\")\r\n    .reverse()\r\n    .findIndex((elem) => /\\d|\\(|!/.test(elem));\r\n  return (lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayOps.length);\r\n}\r\n\r\nexport function deleteRedundantOperators(state) {\r\n  console.log(\"deleteRedundant\", state.displayOps);\r\n  console.log(\"state.displayCur\", state.displayCur);\r\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\r\n    displayOpsExpression = state.displayOps;\r\n    // } else if (/\\d/.test(state.displayCur)) {\r\n    //   displayOpsExpression = state.displayOps;\r\n  } else {\r\n    let lastDigitIndex = state.displayOps\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d/.test(elem));\r\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n  console.log(\"deleteRedundant after\", displayOpsExpression);\r\n}\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayOpsExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}