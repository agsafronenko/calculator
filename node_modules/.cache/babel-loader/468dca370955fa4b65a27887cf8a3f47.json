{"ast":null,"code":"export let changeOneIntoAnother = [\n// change for:\n// 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\n{\n  before: \"\\\\(\",\n  afterChangeSign: \"( - \",\n  afterAbs: \"(abs(\",\n  afterAfterDenomination: \"((1 / (\",\n  afterTrigonometry: `(trigFunc(`\n}, {\n  before: \"\\\\( - \",\n  afterChangeSign: \"(\",\n  afterAbs: \"(abs( - \",\n  afterAfterDenomination: \"((1 / ( - \",\n  afterTrigonometry: `(trigFunc( - `\n}, {\n  before: \"^\",\n  afterChangeSign: \" - \",\n  afterAbs: \"abs(\",\n  afterAfterDenomination: \"(1 / (\",\n  afterTrigonometry: `trigFunc(`\n}, {\n  before: \"^ - \",\n  afterChangeSign: \"\",\n  afterAbs: \"abs( - \",\n  afterAfterDenomination: \"(1 / ( - \",\n  afterTrigonometry: `trigFunc( - `\n}\n\n//   // 2) the expression preceded by two consecutive operators:\n//   {\n//     before: \" -  - \",\n//     afterChangeSign: \" - \",\n//     afterAbs: \" - abs( - \",\n//     afterAfterDenomination: \" - (1 / ( - \",\n//   },\n//   {\n//     before: \" \\\\+  - \",\n//     afterChangeSign: \" + \",\n//     afterAbs: \" + abs( - \",\n//     afterAfterDenomination: \" + (1 / ( - \",\n//   },\n//   {\n//     before: \" \\\\*  - \",\n//     afterChangeSign: \" * \",\n//     afterAbs: \" * abs( - \",\n//     afterAfterDenomination: \" * (1 / ( - \",\n//   },\n//   {\n//     before: \" \\\\/  - \",\n//     afterChangeSign: \" / \",\n//     afterAbs: \" / abs( - \",\n//     afterAfterDenomination: \" / (1 / ( - \",\n//   },\n//   {\n//     before: \" \\\\^  - \",\n//     afterChangeSign: \" ^ \",\n//     afterAbs: \" ^ abs( - \",\n//     afterAfterDenomination: \" ^ (1 / ( - \",\n//   },\n//   {\n//     before: \" yroot  - \",\n//     afterChangeSign: \" yroot \",\n//     afterAbs: \" yroot abs( - \",\n//     afterAfterDenomination: \" yroot (1 / ( - \",\n//   },\n//   {\n//     before: \" mod  - \",\n//     afterChangeSign: \" mod \",\n//     afterAbs: \" mod abs( - \",\n//     afterAfterDenomination: \" mod (1 / ( - \",\n//   },\n//   // 3) the expression preceded by only one operator:\n//   {\n//     before: \" - \",\n//     afterChangeSign: \" + \",\n//     afterAbs: \" - abs(\",\n//     afterAfterDenomination: \" - (1 / (\",\n//   },\n//   {\n//     before: \" \\\\+ \",\n//     afterChangeSign: \" - \",\n//     afterAbs: \" + abs(\",\n//     afterAfterDenomination: \" + (1 / (\",\n//   },\n//   {\n//     before: \" \\\\* \",\n//     afterChangeSign: \" *  - \",\n//     afterAbs: \" * abs(\",\n//     afterAfterDenomination: \" * (1 / (\",\n//   },\n//   {\n//     before: \" \\\\/ \",\n//     afterChangeSign: \" /  - \",\n//     afterAbs: \" / abs(\",\n//     afterAfterDenomination: \" / (1 / (\",\n//   },\n//   {\n//     before: \" \\\\^ \",\n//     afterChangeSign: \" ^  - \",\n//     afterAbs: \" ^ abs(\",\n//     afterAfterDenomination: \" ^ (1 / (\",\n//   },\n//   {\n//     before: \" yroot \",\n//     afterChangeSign: \" yroot  - \",\n//     afterAbs: \" yroot abs(\",\n//     afterAfterDenomination: \" yroot (1 / (\",\n//   },\n//   {\n//     before: \" log base \",\n//     afterChangeSign: \" log base \",\n//     afterAbs: \" log base abs(\",\n//     afterAfterDenomination: \" log base (1 / (\",\n//   },\n//   {\n//     before: \" mod \",\n//     afterChangeSign: \" mod \",\n//     afterAbs: \" mod abs(\",\n//     afterAfterDenomination: \" mod (1 / (\",\n//   },\n];","map":{"version":3,"names":["changeOneIntoAnother","before","afterChangeSign","afterAbs","afterAfterDenomination","afterTrigonometry"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeOneIntoAnother.js"],"sourcesContent":["export let changeOneIntoAnother = [\r\n  // change for:\r\n  // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\r\n  {\r\n    before: \"\\\\(\",\r\n    afterChangeSign: \"( - \",\r\n    afterAbs: \"(abs(\",\r\n    afterAfterDenomination: \"((1 / (\",\r\n    afterTrigonometry: `(trigFunc(`,\r\n  },\r\n  {\r\n    before: \"\\\\( - \",\r\n    afterChangeSign: \"(\",\r\n    afterAbs: \"(abs( - \",\r\n    afterAfterDenomination: \"((1 / ( - \",\r\n    afterTrigonometry: `(trigFunc( - `,\r\n  },\r\n  {\r\n    before: \"^\",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \"abs(\",\r\n    afterAfterDenomination: \"(1 / (\",\r\n    afterTrigonometry: `trigFunc(`,\r\n  },\r\n  {\r\n    before: \"^ - \",\r\n    afterChangeSign: \"\",\r\n    afterAbs: \"abs( - \",\r\n    afterAfterDenomination: \"(1 / ( - \",\r\n    afterTrigonometry: `trigFunc( - `,\r\n  },\r\n\r\n  //   // 2) the expression preceded by two consecutive operators:\r\n  //   {\r\n  //     before: \" -  - \",\r\n  //     afterChangeSign: \" - \",\r\n  //     afterAbs: \" - abs( - \",\r\n  //     afterAfterDenomination: \" - (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\+  - \",\r\n  //     afterChangeSign: \" + \",\r\n  //     afterAbs: \" + abs( - \",\r\n  //     afterAfterDenomination: \" + (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\*  - \",\r\n  //     afterChangeSign: \" * \",\r\n  //     afterAbs: \" * abs( - \",\r\n  //     afterAfterDenomination: \" * (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\/  - \",\r\n  //     afterChangeSign: \" / \",\r\n  //     afterAbs: \" / abs( - \",\r\n  //     afterAfterDenomination: \" / (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\^  - \",\r\n  //     afterChangeSign: \" ^ \",\r\n  //     afterAbs: \" ^ abs( - \",\r\n  //     afterAfterDenomination: \" ^ (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" yroot  - \",\r\n  //     afterChangeSign: \" yroot \",\r\n  //     afterAbs: \" yroot abs( - \",\r\n  //     afterAfterDenomination: \" yroot (1 / ( - \",\r\n  //   },\r\n  //   {\r\n  //     before: \" mod  - \",\r\n  //     afterChangeSign: \" mod \",\r\n  //     afterAbs: \" mod abs( - \",\r\n  //     afterAfterDenomination: \" mod (1 / ( - \",\r\n  //   },\r\n  //   // 3) the expression preceded by only one operator:\r\n  //   {\r\n  //     before: \" - \",\r\n  //     afterChangeSign: \" + \",\r\n  //     afterAbs: \" - abs(\",\r\n  //     afterAfterDenomination: \" - (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\+ \",\r\n  //     afterChangeSign: \" - \",\r\n  //     afterAbs: \" + abs(\",\r\n  //     afterAfterDenomination: \" + (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\* \",\r\n  //     afterChangeSign: \" *  - \",\r\n  //     afterAbs: \" * abs(\",\r\n  //     afterAfterDenomination: \" * (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\/ \",\r\n  //     afterChangeSign: \" /  - \",\r\n  //     afterAbs: \" / abs(\",\r\n  //     afterAfterDenomination: \" / (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" \\\\^ \",\r\n  //     afterChangeSign: \" ^  - \",\r\n  //     afterAbs: \" ^ abs(\",\r\n  //     afterAfterDenomination: \" ^ (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" yroot \",\r\n  //     afterChangeSign: \" yroot  - \",\r\n  //     afterAbs: \" yroot abs(\",\r\n  //     afterAfterDenomination: \" yroot (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" log base \",\r\n  //     afterChangeSign: \" log base \",\r\n  //     afterAbs: \" log base abs(\",\r\n  //     afterAfterDenomination: \" log base (1 / (\",\r\n  //   },\r\n  //   {\r\n  //     before: \" mod \",\r\n  //     afterChangeSign: \" mod \",\r\n  //     afterAbs: \" mod abs(\",\r\n  //     afterAfterDenomination: \" mod (1 / (\",\r\n  //   },\r\n];\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG;AAChC;AACA;AACA;EACEC,MAAM,EAAE,KAAK;EACbC,eAAe,EAAE,MAAM;EACvBC,QAAQ,EAAE,OAAO;EACjBC,sBAAsB,EAAE,SAAS;EACjCC,iBAAiB,EAAG;AACtB,CAAC,EACD;EACEJ,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,GAAG;EACpBC,QAAQ,EAAE,UAAU;EACpBC,sBAAsB,EAAE,YAAY;EACpCC,iBAAiB,EAAG;AACtB,CAAC,EACD;EACEJ,MAAM,EAAE,GAAG;EACXC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE,MAAM;EAChBC,sBAAsB,EAAE,QAAQ;EAChCC,iBAAiB,EAAG;AACtB,CAAC,EACD;EACEJ,MAAM,EAAE,MAAM;EACdC,eAAe,EAAE,EAAE;EACnBC,QAAQ,EAAE,SAAS;EACnBC,sBAAsB,EAAE,WAAW;EACnCC,iBAAiB,EAAG;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD"},"metadata":{},"sourceType":"module"}