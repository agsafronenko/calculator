{"ast":null,"code":"export let displayAllExpression = \"\";\nexport function FixIncompleteInputs(state, expr) {\n  if (/\\d/.test(expr) === false) {\n    displayAllExpression = \"0\";\n  } else {\n    let openingParanthesesAfterTheLastDigit = 0;\n    if (state.lastInputType !== \"digit\" && state.lastInput !== \")\") {\n      let lastDigitIndex = expr.split(\"\").reverse().findIndex(elem => /\\d|!|%|\\)/.test(elem));\n      displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\n      let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex);\n      for (let i = 0; i < afterTheLastDigit.length; i++) {\n        if (afterTheLastDigit[i] === \"(\") openingParanthesesAfterTheLastDigit++;\n      }\n    } else {\n      displayAllExpression = expr;\n    }\n    addMissingParenthesis(state.parenthesesDelta - openingParanthesesAfterTheLastDigit);\n  }\n}\n_c = FixIncompleteInputs;\nfunction addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayAllExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"FixIncompleteInputs\");","map":{"version":3,"names":["displayAllExpression","FixIncompleteInputs","state","expr","test","openingParanthesesAfterTheLastDigit","lastInputType","lastInput","lastDigitIndex","split","reverse","findIndex","elem","slice","length","afterTheLastDigit","i","addMissingParenthesis","parenthesesDelta","delta"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/FixIncompleteInputs.js"],"sourcesContent":["export let displayAllExpression = \"\";\r\n\r\nexport function FixIncompleteInputs(state, expr) {\r\n  if (/\\d/.test(expr) === false) {\r\n    displayAllExpression = \"0\";\r\n  } else {\r\n    let openingParanthesesAfterTheLastDigit = 0;\r\n    if (state.lastInputType !== \"digit\" && state.lastInput !== \")\") {\r\n      let lastDigitIndex = expr\r\n        .split(\"\")\r\n        .reverse()\r\n        .findIndex((elem) => /\\d|!|%|\\)/.test(elem));\r\n      displayAllExpression = expr.slice(0, expr.length - lastDigitIndex);\r\n      let afterTheLastDigit = expr.slice(expr.length - lastDigitIndex);\r\n\r\n      for (let i = 0; i < afterTheLastDigit.length; i++) {\r\n        if (afterTheLastDigit[i] === \"(\") openingParanthesesAfterTheLastDigit++;\r\n      }\r\n    } else {\r\n      displayAllExpression = expr;\r\n    }\r\n    addMissingParenthesis(state.parenthesesDelta - openingParanthesesAfterTheLastDigit);\r\n  }\r\n}\r\n\r\nfunction addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayAllExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG,EAAE;AAEpC,OAAO,SAASC,mBAAmB,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC/C,IAAI,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC,KAAK,KAAK,EAAE;IAC7BH,oBAAoB,GAAG,GAAG;EAC5B,CAAC,MAAM;IACL,IAAIK,mCAAmC,GAAG,CAAC;IAC3C,IAAIH,KAAK,CAACI,aAAa,KAAK,OAAO,IAAIJ,KAAK,CAACK,SAAS,KAAK,GAAG,EAAE;MAC9D,IAAIC,cAAc,GAAGL,IAAI,CACtBM,KAAK,CAAC,EAAE,CAAC,CACTC,OAAO,EAAE,CACTC,SAAS,CAAEC,IAAI,IAAK,WAAW,CAACR,IAAI,CAACQ,IAAI,CAAC,CAAC;MAC9CZ,oBAAoB,GAAGG,IAAI,CAACU,KAAK,CAAC,CAAC,EAAEV,IAAI,CAACW,MAAM,GAAGN,cAAc,CAAC;MAClE,IAAIO,iBAAiB,GAAGZ,IAAI,CAACU,KAAK,CAACV,IAAI,CAACW,MAAM,GAAGN,cAAc,CAAC;MAEhE,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,iBAAiB,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;QACjD,IAAID,iBAAiB,CAACC,CAAC,CAAC,KAAK,GAAG,EAAEX,mCAAmC,EAAE;MACzE;IACF,CAAC,MAAM;MACLL,oBAAoB,GAAGG,IAAI;IAC7B;IACAc,qBAAqB,CAACf,KAAK,CAACgB,gBAAgB,GAAGb,mCAAmC,CAAC;EACrF;AACF;AAAC,KArBeJ,mBAAmB;AAuBnC,SAASgB,qBAAqB,CAACE,KAAK,EAAE;EACpC,IAAIA,KAAK,GAAG,CAAC,EAAE;IACbnB,oBAAoB,IAAI,GAAG;IAC3BmB,KAAK,IAAI,CAAC;IACVF,qBAAqB,CAACE,KAAK,CAAC;EAC9B;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module"}