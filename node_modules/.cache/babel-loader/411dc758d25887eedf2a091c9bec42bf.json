{"ast":null,"code":"// next steps:\n//  check trigonometry for lastResult +\n// check the error appered when you click \"=\" without any input at all\n// - force all click() inputs to be inside the displayOps and outside of displayCur (like %, S, R, etc), so displayCur will be clean before next operation (not obligatory)\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\n// sonsider adding event listeners\n// - check every input mixing with others\n\n// - when invalid input appers or any other error, block all keys except for AC and del\n\nexport default function calculate(expr) {\n  // console.log(\"diplayOps in calculate(arr)\", expr);\n  expr = convertDisplayOpsIntoArray(expr);\n  return findParenthesis(expr);\n}\nfunction convertDisplayOpsIntoArray(string) {\n  console.log(\"string inside convertDisplayIntoArr\", string);\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\n  let displayOpsArray = string.match(parseRegex).map(elem => isFinite(elem) ? Number(elem) : elem);\n  displayOpsArray.unshift(\"(\");\n  displayOpsArray.push(\")\");\n  console.log(\"convertDisplayIntoArr\", displayOpsArray);\n  return displayOpsArray;\n}\nfunction findParenthesis(expr) {\n  let firstClosingIndex = expr.findIndex(parentesis => parentesis === \")\");\n  if (firstClosingIndex !== -1) {\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex(parentesis => parentesis === \"(\");\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\n    expr = expr.slice(0, firstClosingIndex - firstOpeningIndex - 1).concat(resultInsideParentheses).concat(expr.slice(firstClosingIndex + 1));\n    return findParenthesis(expr);\n  }\n  return expr[0];\n}\nfunction calculateInsideParentheses(expr) {\n  expr = findNegativeValues(expr);\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\n  expr = calculateInOrder(expr, [\" log base \", \" mod \"]);\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\n  return expr[0];\n}\nfunction findNegativeValues(arr) {\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && ind === 0 || elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\");\n  if (negativeIndex !== -1) {\n    let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n    return findNegativeValues(newArr);\n  }\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    console.log(\"currentOpertation\", currentOperation);\n    let currentResult = currentOperator === \"sin\" ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cos\" ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"tan\" ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cot\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"sec\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"csc\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"!\" ? factorial(currentOperation[0]) : currentOperator === \"%\" ? currentOperation[0] / 100 : currentOperator === \" log base \" ? Math.log(currentOperation[0]) / Math.log(currentOperation[2]) : currentOperator === \" mod \" ? currentOperation[0] % currentOperation[2] : currentOperator === \" yroot \" ? Math.pow(currentOperation[0], 1 / currentOperation[2]) : currentOperator === \" ^ \" ? Math.pow(currentOperation[0], currentOperation[2]) : currentOperator === \" * \" ? currentOperation[0] * currentOperation[2] : currentOperator === \" / \" ? currentOperation[0] / currentOperation[2] : currentOperator === \" + \" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    console.log(\"im here\", arr);\n    let result = currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\" ? arr.slice(0, operatorIndex).concat(currentResult).concat(arr.slice(operatorIndex + 2)) : currentOperator === \"!\" || currentOperator === \"%\" ? arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 1)) : arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    console.log(\"result\", result);\n    return calculateInOrder(result, operators);\n  }\n  return arr;\n}\nexport let displayOpsExpression = \"\";\nexport function lastLegitSymbol(displayOps) {\n  console.log(\"you actually here\", displayOps);\n  let lastLegitSymbol = displayOps.split(\"\").reverse().findIndex(elem => /\\d|\\(|!/.test(elem));\n  return lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayOps.length;\n}\nexport function deleteRedundantOperators(state) {\n  console.log(\"deleteRedundant\", state.displayOps);\n  console.log(\"state.displayCur\", state.displayCur);\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\n    displayOpsExpression = state.displayOps;\n    // } else if (/\\d/.test(state.displayCur)) {\n    //   displayOpsExpression = state.displayOps;\n  } else {\n    let lastDigitIndex = state.displayOps.split(\"\").reverse().findIndex(elem => /\\d/.test(elem));\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n  console.log(\"deleteRedundant after\", displayOpsExpression);\n}\n\n// export function deleteRedundantDigits(state) {\n//   if (/\\./.test(state.displayCur)) {\n//     let decimalIndex = state.displayOps\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\./.test(elem));\n//     displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\n//   } else if (/\\D/.test(state.displayCur)) {\n//     displayOpsExpression = state.displayOps;\n//   } else {\n//     let lastNonDigitIndex = state.displayOps\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\D/.test(elem));\n//     displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\n//   }\n// }\n\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayOpsExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\nexport let stateStorage = {\n  prevState: []\n};\nexport function saveState(state) {\n  if (stateStorage.prevState.length >= 30) {\n    stateStorage.prevState.pop();\n    stateStorage.prevState.unshift(state);\n  } else {\n    stateStorage.prevState.unshift(state);\n  }\n  return stateStorage.prevState;\n}\nexport function factorial(num) {\n  if (num < 0) {\n    alert(\"invalid input: factorials are only defined for positive numbers\");\n    return \"invalid input\";\n  } else if (num % 1 !== 0 && num !== \")\") {\n    alert(`factorials for nonintegers are defined based on simplified Gamma function:\n    ~~ level of accuracy: low ~~`);\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\n  } else if (num === \")\") {\n    return \"!\";\n  } else {\n    let result = Number(num);\n    if (Number.isInteger(result)) {\n      for (let i = result - 1; i > 0; i--) {\n        result *= i;\n      }\n      return result;\n    }\n  }\n}\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\n  if (state.displayOps.match(/\\)\\)$/)) {\n    console.log(\"trigonometry stage 0.5\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i - 3;\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n        break;\n      }\n    }\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    return \"\";\n  } else if (state.lastOperator === \"trigonometry\") {\n    console.log(\"trigonometry stage 1\");\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    return \"\";\n  } else if (state.lastInput === \")\") {\n    console.log(\"trigonometry stage 2\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\n    return \"\";\n  } else if (state.lastInputType === \"digit\") {\n    console.log(\"trigonometry stage 3\");\n    if (state.displayOps.match(/[\\*|\\/|\\+|-] - \\d+\\.\\d+$|[\\*|\\/|\\+|-] - \\d+$/)) {\n      console.log(\"trigonometry stage 3.1\");\n      let lastNegativeNumIndex = state.displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n      let lastPositiveNum = state.displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n      displayOpsExpression = state.displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n      return calculateResult;\n    } else if (state.displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n      console.log(\"trigonometry stage 3.2\");\n      let lastNegativeNumIndex = state.displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n      let lastPositiveNum = state.displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n      displayOpsExpression = lastNegativeNumIndex !== 0 ? state.displayOps.slice(0, lastNegativeNumIndex).concat(\" + \").concat(`${trigFunc}(${lastPositiveNum * -1})`) : state.displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n      return calculateResult;\n    } else {\n      console.log(\"trigonometry stage 3.3\");\n      let regexNum = new RegExp(`${state.displayCur}$`);\n      let lastNumIndex = state.displayOps.match(regexNum).index;\n      displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n      return calculateResult;\n    }\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\n    let regexNum = new RegExp(/-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n    let lastNumIndex = state.displayOps.match(regexNum).index;\n    displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\n    return \"\";\n  }\n  // let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n  // return calculateResult;\n}\n\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\n  let reciprocal = {\n    cot: \"tan\",\n    sec: \"cos\",\n    csc: \"sin\"\n  };\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\n  return calculateResult().toString();\n}","map":{"version":3,"names":["calculate","expr","convertDisplayOpsIntoArray","findParenthesis","string","console","log","parseRegex","RegExp","displayOpsArray","match","map","elem","isFinite","Number","unshift","push","firstClosingIndex","findIndex","parentesis","exprInsideParantethes","slice","firstOpeningIndex","reverse","resultInsideParentheses","calculateInsideParentheses","concat","findNegativeValues","calculateInOrder","arr","negativeIndex","ind","newArr","operators","operatorIndex","currentOperator","currentOperation","currentResult","Math","sin","length","PI","cos","tan","factorial","pow","result","displayOpsExpression","lastLegitSymbol","displayOps","split","test","deleteRedundantOperators","state","displayCur","lastOperator","lastDigitIndex","addMissingParenthesis","parenthesesDelta","delta","stateStorage","prevState","saveState","pop","num","alert","E","isInteger","i","trigonometryInDegrees","curDegree","trigFunc","displayOpsLength","closingNum","openingNum","matchTrigonometry","lastTrigonometryIndex","lastIndexOf","lastInput","lastInputType","lastNegativeNumIndex","index","lastPositiveNum","calculateResult","trigonometryCalculate","regexNum","lastNumIndex","reciprocal","cot","sec","csc","Function","toString"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["// next steps:\r\n//  check trigonometry for lastResult +\r\n// check the error appered when you click \"=\" without any input at all\r\n// - force all click() inputs to be inside the displayOps and outside of displayCur (like %, S, R, etc), so displayCur will be clean before next operation (not obligatory)\r\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\r\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\r\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\r\n// sonsider adding event listeners\r\n// - check every input mixing with others\r\n\r\n// - when invalid input appers or any other error, block all keys except for AC and del\r\n\r\nexport default function calculate(expr) {\r\n  // console.log(\"diplayOps in calculate(arr)\", expr);\r\n  expr = convertDisplayOpsIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayOpsIntoArray(string) {\r\n  console.log(\"string inside convertDisplayIntoArr\", string);\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayOpsArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayOpsArray.unshift(\"(\");\r\n  displayOpsArray.push(\")\");\r\n  console.log(\"convertDisplayIntoArr\", displayOpsArray);\r\n  return displayOpsArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\r\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\r\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\r\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\r\n  expr = calculateInOrder(expr, [\" log base \", \" mod \"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nfunction findNegativeValues(arr) {\r\n  let negativeIndex = arr.findIndex((elem, ind) => (elem === \" - \" && ind === 0) || (elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\"));\r\n  if (negativeIndex !== -1) {\r\n    let newArr = arr\r\n      .slice(0, negativeIndex)\r\n      .concat(arr[negativeIndex + 1] * -1)\r\n      .concat(arr.slice(negativeIndex + 2));\r\n    return findNegativeValues(newArr);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    console.log(\"currentOpertation\", currentOperation);\r\n\r\n    let currentResult =\r\n      currentOperator === \"sin\"\r\n        ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cos\"\r\n        ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"tan\"\r\n        ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cot\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"sec\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"csc\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"!\"\r\n        ? factorial(currentOperation[0])\r\n        : currentOperator === \"%\"\r\n        ? currentOperation[0] / 100\r\n        : currentOperator === \" log base \"\r\n        ? Math.log(currentOperation[0]) / Math.log(currentOperation[2])\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[0] / currentOperation[2]\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n    console.log(\"im here\", arr);\r\n\r\n    let result =\r\n      currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\"\r\n        ? arr\r\n            .slice(0, operatorIndex)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2))\r\n        : currentOperator === \"!\" || currentOperator === \"%\"\r\n        ? arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 1))\r\n        : arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2));\r\n    console.log(\"result\", result);\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport let displayOpsExpression = \"\";\r\n\r\nexport function lastLegitSymbol(displayOps) {\r\n  console.log(\"you actually here\", displayOps);\r\n  let lastLegitSymbol = displayOps\r\n    .split(\"\")\r\n    .reverse()\r\n    .findIndex((elem) => /\\d|\\(|!/.test(elem));\r\n  return (lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayOps.length);\r\n}\r\n\r\nexport function deleteRedundantOperators(state) {\r\n  console.log(\"deleteRedundant\", state.displayOps);\r\n  console.log(\"state.displayCur\", state.displayCur);\r\n  if (state.lastOperator === \"trigonometry\" || state.displayCur === \"\" || /\\)|!|%|\\d/.test(state.displayCur)) {\r\n    displayOpsExpression = state.displayOps;\r\n    // } else if (/\\d/.test(state.displayCur)) {\r\n    //   displayOpsExpression = state.displayOps;\r\n  } else {\r\n    let lastDigitIndex = state.displayOps\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d/.test(elem));\r\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n  console.log(\"deleteRedundant after\", displayOpsExpression);\r\n}\r\n\r\n// export function deleteRedundantDigits(state) {\r\n//   if (/\\./.test(state.displayCur)) {\r\n//     let decimalIndex = state.displayOps\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\./.test(elem));\r\n//     displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\r\n//   } else if (/\\D/.test(state.displayCur)) {\r\n//     displayOpsExpression = state.displayOps;\r\n//   } else {\r\n//     let lastNonDigitIndex = state.displayOps\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\D/.test(elem));\r\n//     displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\r\n//   }\r\n// }\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayOpsExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n\r\nexport let stateStorage = {\r\n  prevState: [],\r\n};\r\n\r\nexport function saveState(state) {\r\n  if (stateStorage.prevState.length >= 30) {\r\n    stateStorage.prevState.pop();\r\n    stateStorage.prevState.unshift(state);\r\n  } else {\r\n    stateStorage.prevState.unshift(state);\r\n  }\r\n  return stateStorage.prevState;\r\n}\r\n\r\nexport function factorial(num) {\r\n  if (num < 0) {\r\n    alert(\"invalid input: factorials are only defined for positive numbers\");\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0 && num !== \")\") {\r\n    alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n    ~~ level of accuracy: low ~~`);\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else if (num === \")\") {\r\n    return \"!\";\r\n  } else {\r\n    let result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\r\n  if (state.displayOps.match(/\\)\\)$/)) {\r\n    console.log(\"trigonometry stage 0.5\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\") {\r\n    console.log(\"trigonometry stage 1\");\r\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\r\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"trigonometry stage 2\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\r\n    return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"trigonometry stage 3\");\r\n    if (state.displayOps.match(/[\\*|\\/|\\+|-] - \\d+\\.\\d+$|[\\*|\\/|\\+|-] - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.1\");\r\n      let lastNegativeNumIndex = state.displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = state.displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n      displayOpsExpression = state.displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (state.displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.2\");\r\n      let lastNegativeNumIndex = state.displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = state.displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n      displayOpsExpression =\r\n        lastNegativeNumIndex !== 0\r\n          ? state.displayOps\r\n              .slice(0, lastNegativeNumIndex)\r\n              .concat(\" + \")\r\n              .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n          : state.displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else {\r\n      console.log(\"trigonometry stage 3.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = state.displayOps.match(regexNum).index;\r\n      displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n      return calculateResult;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNumIndex = state.displayOps.match(regexNum).index;\r\n    displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\r\n    return \"\";\r\n  }\r\n  // let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n  // return calculateResult;\r\n}\r\n\r\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\r\n  let reciprocal = {\r\n    cot: \"tan\",\r\n    sec: \"cos\",\r\n    csc: \"sin\",\r\n  };\r\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n  return calculateResult().toString();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}