{"ast":null,"code":"export function abs(state) {}\n\n// export function abs(state) {\n//   let displayAllExpression = \"\";\n//   let displayAll = state.displayAll;\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n//     console.log(\"abs stage 0.5\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i - 3;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\n//     console.log(\"abs stage 0.7\");\n//     let displayAllLength = state.displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (state.displayAll[i] === \")\") closingNum++;\n//       if (state.displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n//         break;\n//       }\n//     }\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n//     console.log(\"abs stage 2\");\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n//     displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayAll.slice(lastTrigonometryIndex)})`);\n//     return displayAllExpression;\n//   } else if (state.lastInput === \")\") {\n//     console.log(\"abs stage 3\");\n//     let displayAllLength = displayAll.length;\n//     let closingNum = 1;\n//     let openingNum = 0;\n//     let firstOpeningIndex = 0;\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\n//       if (displayAll[i] === \")\") closingNum++;\n//       if (displayAll[i] === \"(\") openingNum++;\n//       if (closingNum === openingNum) {\n//         firstOpeningIndex = i;\n//         break;\n//       }\n//     }\n//     displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`abs(${displayAll.slice(firstOpeningIndex)})`);\n//     console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\n//     return displayAllExpression;\n//   } else if (state.lastInputType === \"digit\") {\n//     console.log(\"abs stage 4\");\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n//       console.log(\"abs stage 4.1\");\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n//       console.log(\"abs stage 4.15\");\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n//       console.log(\"abs stage 4.2\");\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\n//       displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\n//       return displayAllExpression;\n//     } else {\n//       console.log(\"abs stage 4.3\");\n//       let regexNum = new RegExp(`${state.displayCur}$`);\n//       let lastNumIndex = displayAll.match(regexNum).index;\n//       displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\n//       return displayAllExpression;\n//     }\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n//     console.log(\"abs stage 5\");\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n//     let lastNum = displayAll.match(regexNum);\n//     displayAllExpression = displayAll.slice(0, lastNum.index).concat(`abs(${lastNum})`);\n//     return displayAllExpression;\n//   }\n// }","map":{"version":3,"names":["abs","state"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/abs.js"],"sourcesContent":["export function abs(state) {}\r\n\r\n// export function abs(state) {\r\n//   let displayAllExpression = \"\";\r\n//   let displayAll = state.displayAll;\r\n//   if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n//   if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n//     console.log(\"abs stage 0.5\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i - 3;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n//     console.log(\"abs stage 0.7\");\r\n//     let displayAllLength = state.displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (state.displayAll[i] === \")\") closingNum++;\r\n//       if (state.displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n//     console.log(\"abs stage 2\");\r\n//     let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n//     let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n//     displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastInput === \")\") {\r\n//     console.log(\"abs stage 3\");\r\n//     let displayAllLength = displayAll.length;\r\n//     let closingNum = 1;\r\n//     let openingNum = 0;\r\n//     let firstOpeningIndex = 0;\r\n//     for (let i = displayAllLength - 2; i >= 0; i--) {\r\n//       if (displayAll[i] === \")\") closingNum++;\r\n//       if (displayAll[i] === \"(\") openingNum++;\r\n//       if (closingNum === openingNum) {\r\n//         firstOpeningIndex = i;\r\n//         break;\r\n//       }\r\n//     }\r\n//     displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`abs(${displayAll.slice(firstOpeningIndex)})`);\r\n//     console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n//     return displayAllExpression;\r\n//   } else if (state.lastInputType === \"digit\") {\r\n//     console.log(\"abs stage 4\");\r\n//     if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n//       console.log(\"abs stage 4.1\");\r\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n//       console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n//       console.log(\"abs stage 4.15\");\r\n//       let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n//       displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\r\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n//       console.log(\"abs stage 4.2\");\r\n//       let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n//       displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n//       console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n//       return displayAllExpression;\r\n//     } else {\r\n//       console.log(\"abs stage 4.3\");\r\n//       let regexNum = new RegExp(`${state.displayCur}$`);\r\n//       let lastNumIndex = displayAll.match(regexNum).index;\r\n//       displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n//       return displayAllExpression;\r\n//     }\r\n//   } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n//     console.log(\"abs stage 5\");\r\n//     let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n//     let lastNum = displayAll.match(regexNum);\r\n//     displayAllExpression = displayAll.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n//     return displayAllExpression;\r\n//   }\r\n// }\r\n"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,KAAK,EAAE,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}