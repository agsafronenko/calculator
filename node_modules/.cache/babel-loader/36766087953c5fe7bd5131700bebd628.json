{"ast":null,"code":"export function abs(state) {\n  let displayOpsExpression = \"\";\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\n    //    console.log(\"abs stage 1\")\n    //   let displayOpsLength = state.displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (state.displayOps[i] === \")\") closingNum++;\n    //     if (state.displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i - 3;\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //       break;\n    //     }\n    //   }\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    //   return \"\";\n    // } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\n    //   console.log(\"trigonometry stage 0.7\");\n    //   let displayOpsLength = state.displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (state.displayOps[i] === \")\") closingNum++;\n    //     if (state.displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i;\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //       break;\n    //     }\n    //   }\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    //   return \"\";\n  } else if (state.lastOperator === \"trigonometry\") {\n    //    console.log(\"abs stage 2\")\n    //   let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\n    //   let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    //   displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    //   return \"\";\n  } else if (state.lastInput === \")\") {\n    console.log(\"abs stage 3\");\n    let displayOpsLength = displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (displayOps[i] === \")\") closingNum++;\n      if (displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    displayOpsExpression = displayOps.slice(0, firstOpeningIndex).concat(`abs(${displayOps.slice(firstOpeningIndex)})`);\n    console.log(\"you are here amigo\", displayOpsExpression, closingNum, openingNum, firstOpeningIndex);\n    return \"\";\n  } else if (state.lastInputType === \"digit\") {\n    console.log(\"abs stage 4\");\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n      console.log(\"abs stage 4.1\");\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayOpsExpression\", displayOpsExpression);\n      return displayOpsExpression;\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n      console.log(\"abs stage 4.2\");\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\n      displayOpsExpression = lastNegativeNum.index !== 0 ? displayOps.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\n      return displayOpsExpression;\n    } else {\n      console.log(\"abs stage 4.3\");\n      let regexNum = new RegExp(`${state.displayCur}$`);\n      let lastNumIndex = displayOps.match(regexNum).index;\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\n      return displayOpsExpression;\n    }\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n    console.log(\"abs stage 5\");\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n    let lastNum = displayOps.match(regexNum);\n    displayOpsExpression = displayOps.slice(0, lastNum.index).concat(`abs(${lastNum})`);\n    return displayOpsExpression;\n  }\n}","map":{"version":3,"names":["abs","state","displayOpsExpression","displayOps","lastResult","concat","match","lastInputType","lastOperator","lastInput","console","log","displayOpsLength","length","closingNum","openingNum","firstOpeningIndex","i","slice","lastNegativeNum","index","regexNum","RegExp","displayCur","lastNumIndex","lastNum"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/abs.js"],"sourcesContent":["export function abs(state) {\r\n  let displayOpsExpression = \"\";\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\r\n    //    console.log(\"abs stage 1\")\r\n    //   let displayOpsLength = state.displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (state.displayOps[i] === \")\") closingNum++;\r\n    //     if (state.displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i - 3;\r\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    //   return \"\";\r\n    // } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\r\n    //   console.log(\"trigonometry stage 0.7\");\r\n    //   let displayOpsLength = state.displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (state.displayOps[i] === \")\") closingNum++;\r\n    //     if (state.displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i;\r\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    //   return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\") {\r\n    //    console.log(\"abs stage 2\")\r\n    //   let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\r\n    //   let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    //   displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    //   return \"\";\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayOpsLength = displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (displayOps[i] === \")\") closingNum++;\r\n      if (displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = displayOps.slice(0, firstOpeningIndex).concat(`abs(${displayOps.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayOpsExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayOpsExpression\", displayOpsExpression);\r\n      return displayOpsExpression;\r\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"abs stage 4.2\");\r\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayOpsExpression = lastNegativeNum.index !== 0 ? displayOps.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\r\n      return displayOpsExpression;\r\n    } else {\r\n      console.log(\"abs stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayOps.match(regexNum).index;\r\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n      return displayOpsExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"abs stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayOps.match(regexNum);\r\n    displayOpsExpression = displayOps.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n    return displayOpsExpression;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,KAAK,EAAE;EACzB,IAAIC,oBAAoB,GAAG,EAAE;EAC7B,IAAIC,UAAU,GAAGF,KAAK,CAACE,UAAU;EACjC,IAAIF,KAAK,CAACG,UAAU,KAAK,EAAE,EAAED,UAAU,GAAG,EAAE,CAACE,MAAM,CAACJ,KAAK,CAACG,UAAU,CAAC;EACrE,IAAIH,KAAK,CAACE,UAAU,CAACG,KAAK,CAAC,OAAO,IAAIL,KAAK,CAACM,aAAa,KAAK,cAAc,CAAC,EAAE;IAC7E;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIN,KAAK,CAACO,YAAY,KAAK,cAAc,EAAE;IAChD;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIP,KAAK,CAACQ,SAAS,KAAK,GAAG,EAAE;IAClCC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,IAAIC,gBAAgB,GAAGT,UAAU,CAACU,MAAM;IACxC,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,iBAAiB,GAAG,CAAC;IACzB,KAAK,IAAIC,CAAC,GAAGL,gBAAgB,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9C,IAAId,UAAU,CAACc,CAAC,CAAC,KAAK,GAAG,EAAEH,UAAU,EAAE;MACvC,IAAIX,UAAU,CAACc,CAAC,CAAC,KAAK,GAAG,EAAEF,UAAU,EAAE;MACvC,IAAID,UAAU,KAAKC,UAAU,EAAE;QAC7BC,iBAAiB,GAAGC,CAAC;QACrB;MACF;IACF;IACAf,oBAAoB,GAAGC,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEF,iBAAiB,CAAC,CAACX,MAAM,CAAE,OAAMF,UAAU,CAACe,KAAK,CAACF,iBAAiB,CAAE,GAAE,CAAC;IACnHN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAET,oBAAoB,EAAEY,UAAU,EAAEC,UAAU,EAAEC,iBAAiB,CAAC;IAClG,OAAO,EAAE;EACX,CAAC,MAAM,IAAIf,KAAK,CAACM,aAAa,KAAK,OAAO,EAAE;IAC1CG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,IAAIR,UAAU,CAACG,KAAK,CAAC,8DAA8D,CAAC,EAAE;MACpFI,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAIQ,eAAe,GAAGhB,UAAU,CAACG,KAAK,CAAC,sBAAsB,CAAC;MAC9DJ,oBAAoB,GAAGC,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEC,eAAe,CAACC,KAAK,CAAC,CAACf,MAAM,CAAE,OAAMc,eAAgB,GAAE,CAAC;MACnGT,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,eAAe,EAAE,sBAAsB,EAAEjB,oBAAoB,CAAC;MAClG,OAAOA,oBAAoB;IAC7B,CAAC,MAAM,IAAIC,UAAU,CAACG,KAAK,CAAC,qBAAqB,CAAC,EAAE;MAClDI,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAIQ,eAAe,GAAGhB,UAAU,CAACG,KAAK,CAAC,sBAAsB,CAAC;MAC9DJ,oBAAoB,GAAGiB,eAAe,CAACC,KAAK,KAAK,CAAC,GAAGjB,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEC,eAAe,CAACC,KAAK,CAAC,CAACf,MAAM,CAAC,KAAK,CAAC,CAACA,MAAM,CAAE,OAAMc,eAAgB,GAAE,CAAC,GAAGhB,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEC,eAAe,CAACC,KAAK,CAAC,CAACf,MAAM,CAAE,OAAMc,eAAgB,GAAE,CAAC;MAC9NT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEQ,eAAe,CAACC,KAAK,EAAE,sBAAsB,EAAElB,oBAAoB,CAAC;MACzG,OAAOA,oBAAoB;IAC7B,CAAC,MAAM;MACLQ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAIU,QAAQ,GAAG,IAAIC,MAAM,CAAE,GAAErB,KAAK,CAACsB,UAAW,GAAE,CAAC;MACjD,IAAIC,YAAY,GAAGrB,UAAU,CAACG,KAAK,CAACe,QAAQ,CAAC,CAACD,KAAK;MACnDlB,oBAAoB,GAAGC,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEM,YAAY,CAAC,CAACnB,MAAM,CAAE,OAAMJ,KAAK,CAACsB,UAAW,GAAE,CAAC;MAC3F,OAAOrB,oBAAoB;IAC7B;EACF,CAAC,MAAM,IAAID,KAAK,CAACQ,SAAS,KAAK,GAAG,IAAIR,KAAK,CAACM,aAAa,KAAK,GAAG,EAAE;IACjEG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,IAAIU,QAAQ,GAAG,IAAIC,MAAM,CAAC,yJAAyJ,CAAC;IACpL,IAAIG,OAAO,GAAGtB,UAAU,CAACG,KAAK,CAACe,QAAQ,CAAC;IACxCnB,oBAAoB,GAAGC,UAAU,CAACe,KAAK,CAAC,CAAC,EAAEO,OAAO,CAACL,KAAK,CAAC,CAACf,MAAM,CAAE,OAAMoB,OAAQ,GAAE,CAAC;IACnF,OAAOvB,oBAAoB;EAC7B;AACF"},"metadata":{},"sourceType":"module"}