{"ast":null,"code":"import calculate from \"./equals\";\nimport { expression, regex, findExpression } from \"./findExpression\";\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\nexport let displayAllafterChangeSign = \"\";\nlet displayAll = \"\";\nexport function changeSign(state) {\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\n\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\n  }\n  // console.log(\"displayAll\", displayAll);\n  // console.log(\"expression\", expression);\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\n  // console.log(\"arr\", arr);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      displayAllafterChangeSign = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterChangeSign\"]).concat(expression);\n      break;\n    }\n  }\n  return displayAllafterChangeSign;\n}","map":{"version":3,"names":["calculate","expression","regex","findExpression","changeOneIntoAnother","displayAllafterChangeSign","displayAll","changeSign","state","lastResult","arr","i","length","push","match","RegExp","slice","index","concat"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeSign.js"],"sourcesContent":["import calculate from \"./equals\";\r\nimport { expression, regex, findExpression } from \"./findExpression\";\r\nimport { changeOneIntoAnother } from \"./changeOneIntoAnother\";\r\n\r\nexport let displayAllafterChangeSign = \"\";\r\nlet displayAll = \"\";\r\n\r\nexport function changeSign(state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n  // console.log(\"displayAll\", displayAll);\r\n  // console.log(\"expression\", expression);\r\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\r\n  // console.log(\"arr\", arr);\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllafterChangeSign = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"afterChangeSign\"]).concat(expression);\r\n      break;\r\n    }\r\n  }\r\n  return displayAllafterChangeSign;\r\n}\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAChC,SAASC,UAAU,EAAEC,KAAK,EAAEC,cAAc,QAAQ,kBAAkB;AACpE,SAASC,oBAAoB,QAAQ,wBAAwB;AAE7D,OAAO,IAAIC,yBAAyB,GAAG,EAAE;AACzC,IAAIC,UAAU,GAAG,EAAE;AAEnB,OAAO,SAASC,UAAU,CAACC,KAAK,EAAE;EAChCF,UAAU,GAAGE,KAAK,CAACC,UAAU,KAAK,EAAE,GAAGD,KAAK,CAACC,UAAU,GAAGD,KAAK,CAACF,UAAU;EAE1EH,cAAc,CAACK,KAAK,CAAC,CAAC,CAAC;;EAEvB,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,oBAAoB,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpDD,GAAG,CAACG,IAAI,CAACP,UAAU,CAACQ,KAAK,CAAC,IAAIC,MAAM,CAAE,GAAEX,oBAAoB,CAACO,CAAC,CAAC,CAAC,QAAQ,CAAE,GAAET,KAAM,GAAE,CAAC,CAAC,CAAC;EACzF;EACA;EACA;EACA;EACA;;EAEA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAID,GAAG,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnBN,yBAAyB,GAAGC,UAAU,CAACU,KAAK,CAAC,CAAC,EAAEN,GAAG,CAACC,CAAC,CAAC,CAACM,KAAK,CAAC,CAACC,MAAM,CAACd,oBAAoB,CAACO,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAACO,MAAM,CAACjB,UAAU,CAAC;MACnI;IACF;EACF;EACA,OAAOI,yBAAyB;AAClC"},"metadata":{},"sourceType":"module"}