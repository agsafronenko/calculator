{"ast":null,"code":"export let finalDisplayOpsChangeSign = \"\";\nexport function changeSign(state) {\n  console.log(\"you are in changeSign function\");\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  let changeOneIntoAnother = [{\n    before: \" \\\\-  - \",\n    after: \" - \"\n  }, {\n    before: \" \\\\+  - \",\n    after: \" + \"\n  }, {\n    before: ` \\\\* `,\n    after: ` *  - `\n  }, {\n    before: \" \\\\*  - \",\n    after: \" * \"\n  }, {\n    before: \" \\\\/  - \",\n    after: \" / \"\n  }, {\n    before: \" ^ - \",\n    after: \" ^ \"\n  }, {\n    before: \" yroot - \",\n    after: \" yroot \"\n  }, {\n    before: \" - \",\n    after: \" + \"\n  }, {\n    before: \" \\\\+ \",\n    after: \" - \"\n  }, {\n    before: \"\",\n    after: \" - \"\n  }];\n  let expression = findExpression(state);\n  let arr = [];\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\n    arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\n    console.log(\"i\", i, \"displayOps\", displayOps, \"arr\", arr, \"expression\", expression, \"regex\", `${changeOneIntoAnother[i][\"before\"]}${expression}$`);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== null) {\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\n      console.log(\"finalDisplayOpsChangesign\", finalDisplayOpsChangeSign);\n      break;\n    }\n  }\n  return finalDisplayOpsChangeSign;\n}\nfunction findExpression(state) {\n  let displayOps = state.displayOps;\n  if (displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n    console.log(\"changeSign stage 0.5\");\n    //   let displayOpsLength = displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (displayOps[i] === \")\") closingNum++;\n    //     if (displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i - 3;\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //       break;\n    //     }\n    //   }\n    //   let result = displayOps.slice(firstOpeningIndex);\n    //   console.log(\"RESULT\", result, typeof result);\n    //   return result;\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\n    console.log(\"trigonometry stage 0.7\");\n    //     let displayOpsLength = state.displayOps.length;\n    //     let closingNum = 1;\n    //     let openingNum = 0;\n    //     let firstOpeningIndex = 0;\n    //     for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //       if (state.displayOps[i] === \")\") closingNum++;\n    //       if (state.displayOps[i] === \"(\") openingNum++;\n    //       if (closingNum === openingNum) {\n    //         firstOpeningIndex = i;\n    //         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //         break;\n    //       }\n    //     }\n    //     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    //     return \"\";\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n    console.log(\"trigonometry stage 1\");\n    //     let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n    //     let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    //     finalDisplayOps = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    //     return \"\";\n    //   } else if (state.lastInput === \")\") {\n    //     console.log(\"trigonometry stage 2\");\n    //     let displayOpsLength = state.displayOps.length;\n    //     let closingNum = 1;\n    //     let openingNum = 0;\n    //     let firstOpeningIndex = 0;\n    //     for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //       if (state.displayOps[i] === \")\") closingNum++;\n    //       if (state.displayOps[i] === \"(\") openingNum++;\n    //       if (closingNum === openingNum) {\n    //         firstOpeningIndex = i;\n    //         break;\n    //       }\n    //     }\n    //     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\n    //     return \"\";\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\n    console.log(\"stage 5 start\");\n    return displayOps.match(/\\d+(?:\\.\\d*)?$/);\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\n    return displayOps.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\n  }\n}","map":{"version":3,"names":["finalDisplayOpsChangeSign","changeSign","state","console","log","displayOps","lastResult","concat","changeOneIntoAnother","before","after","expression","findExpression","arr","i","length","push","match","slice","index","lastOperator","lastInputType"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeSign.js"],"sourcesContent":["export let finalDisplayOpsChangeSign = \"\";\r\n\r\nexport function changeSign(state) {\r\n  console.log(\"you are in changeSign function\");\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n\r\n  let changeOneIntoAnother = [\r\n    {\r\n      before: \" \\\\-  - \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: ` \\\\* `,\r\n      after: ` *  - `,\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      after: \" * \",\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      after: \" / \",\r\n    },\r\n    {\r\n      before: \" ^ - \",\r\n      after: \" ^ \",\r\n    },\r\n    {\r\n      before: \" yroot - \",\r\n      after: \" yroot \",\r\n    },\r\n    {\r\n      before: \" - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \"\",\r\n      after: \" - \",\r\n    },\r\n  ];\r\n\r\n  let expression = findExpression(state);\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayOps.match(`${changeOneIntoAnother[i][\"before\"]}${expression}$`));\r\n    console.log(\"i\", i, \"displayOps\", displayOps, \"arr\", arr, \"expression\", expression, \"regex\", `${changeOneIntoAnother[i][\"before\"]}${expression}$`);\r\n  }\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      finalDisplayOpsChangeSign = displayOps.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\r\n      console.log(\"finalDisplayOpsChangesign\", finalDisplayOpsChangeSign);\r\n      break;\r\n    }\r\n  }\r\n  return finalDisplayOpsChangeSign;\r\n}\r\n\r\nfunction findExpression(state) {\r\n  let displayOps = state.displayOps;\r\n  if (displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"changeSign stage 0.5\");\r\n    //   let displayOpsLength = displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (displayOps[i] === \")\") closingNum++;\r\n    //     if (displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i - 3;\r\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   let result = displayOps.slice(firstOpeningIndex);\r\n    //   console.log(\"RESULT\", result, typeof result);\r\n    //   return result;\r\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n    console.log(\"trigonometry stage 0.7\");\r\n    //     let displayOpsLength = state.displayOps.length;\r\n    //     let closingNum = 1;\r\n    //     let openingNum = 0;\r\n    //     let firstOpeningIndex = 0;\r\n    //     for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //       if (state.displayOps[i] === \")\") closingNum++;\r\n    //       if (state.displayOps[i] === \"(\") openingNum++;\r\n    //       if (closingNum === openingNum) {\r\n    //         firstOpeningIndex = i;\r\n    //         console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //         break;\r\n    //       }\r\n    //     }\r\n    //     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    //     return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"trigonometry stage 1\");\r\n    //     let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    //     let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    //     finalDisplayOps = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    //     return \"\";\r\n    //   } else if (state.lastInput === \")\") {\r\n    //     console.log(\"trigonometry stage 2\");\r\n    //     let displayOpsLength = state.displayOps.length;\r\n    //     let closingNum = 1;\r\n    //     let openingNum = 0;\r\n    //     let firstOpeningIndex = 0;\r\n    //     for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //       if (state.displayOps[i] === \")\") closingNum++;\r\n    //       if (state.displayOps[i] === \"(\") openingNum++;\r\n    //       if (closingNum === openingNum) {\r\n    //         firstOpeningIndex = i;\r\n    //         break;\r\n    //       }\r\n    //     }\r\n    //     finalDisplayOps = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\r\n    //     return \"\";\r\n  } else if (state.lastInputType === \"digit\" || state.lastInputType === \"decimal\") {\r\n    console.log(\"stage 5 start\");\r\n    return displayOps.match(/\\d+(?:\\.\\d*)?$/);\r\n  } else if (state.lastInputType === \"!\" || state.lastInputType === \"%\") {\r\n    return displayOps.match(/\\d+(?:\\.\\d*)?(!%|%!|!|%)$/)[0];\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}