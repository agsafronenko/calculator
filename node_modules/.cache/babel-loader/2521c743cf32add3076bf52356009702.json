{"ast":null,"code":"export function trigonometryInDegrees(curDegree, trigFunc, state) {\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  if (state.displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\n    console.log(\"trigonometry stage 0.5\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i - 3;\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n        break;\n      }\n    }\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    return \"\";\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\n    console.log(\"trigonometry stage 0.7\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n        break;\n      }\n    }\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    return \"\";\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n    console.log(\"trigonometry stage 1\");\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    return \"\";\n  } else if (state.lastInput === \")\") {\n    console.log(\"trigonometry stage 2\");\n    let displayOpsLength = state.displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (state.displayOps[i] === \")\") closingNum++;\n      if (state.displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\n    return \"\";\n  } else if (state.lastInputType === \"digit\") {\n    console.log(\"trigonometry stage 3\");\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n      console.log(\"trigonometry stage 3.1\");\n      let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n      let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n      displayOpsExpression = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n      return calculateResult;\n    } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n      console.log(\"abs stage 4.15\");\n      let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n      return calculateResult;\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n      console.log(\"trigonometry stage 3.2\");\n      let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n      let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n      displayOpsExpression = lastNegativeNumIndex !== 0 ? displayOps.slice(0, lastNegativeNumIndex).concat(\" + \").concat(`${trigFunc}(${lastPositiveNum * -1})`) : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n      return calculateResult;\n    } else {\n      console.log(\"trigonometry stage 3.3\");\n      let regexNum = new RegExp(`${state.displayCur}$`);\n      let lastNumIndex = displayOps.match(regexNum).index;\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n      return calculateResult;\n    }\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n    let lastNumIndex = state.displayOps.match(regexNum).index;\n    displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\n    return \"\";\n  }\n}\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\n  let reciprocal = {\n    cot: \"tan\",\n    sec: \"cos\",\n    csc: \"sin\"\n  };\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\n  return calculateResult().toString();\n}","map":{"version":3,"names":["trigonometryInDegrees","curDegree","trigFunc","state","console","log","lastOperator","displayOps","lastResult","concat","match","displayOpsLength","length","closingNum","openingNum","firstOpeningIndex","i","displayOpsExpression","slice","matchTrigonometry","lastTrigonometryIndex","lastIndexOf","lastInput","lastInputType","lastNegativeNumIndex","index","lastPositiveNum","calculateResult","trigonometryCalculate","lastNegativeNum","regexNum","RegExp","displayCur","lastNumIndex","reciprocal","cot","sec","csc","Function","toString"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/trigonometry.js"],"sourcesContent":["export function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n  if (state.displayOps.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"trigonometry stage 0.5\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n    console.log(\"trigonometry stage 0.7\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"trigonometry stage 1\");\r\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"trigonometry stage 2\");\r\n    let displayOpsLength = state.displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (state.displayOps[i] === \")\") closingNum++;\r\n      if (state.displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\r\n    return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"trigonometry stage 3\");\r\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.1\");\r\n      let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n      displayOpsExpression = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\r\n\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.2\");\r\n      let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n      displayOpsExpression =\r\n        lastNegativeNumIndex !== 0\r\n          ? displayOps\r\n              .slice(0, lastNegativeNumIndex)\r\n              .concat(\" + \")\r\n              .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n          : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"displayOpsExpression\", displayOpsExpression);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else {\r\n      console.log(\"trigonometry stage 3.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayOps.match(regexNum).index;\r\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n      return calculateResult;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNumIndex = state.displayOps.match(regexNum).index;\r\n    displayOpsExpression = state.displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayOps.match(regexNum)})`);\r\n    return \"\";\r\n  }\r\n}\r\n\r\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\r\n  let reciprocal = {\r\n    cot: \"tan\",\r\n    sec: \"cos\",\r\n    csc: \"sin\",\r\n  };\r\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n  return calculateResult().toString();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}