{"ast":null,"code":"export function abs(state) {\n  let displayOpsExpression = \"\";\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\n    //    console.log(\"abs stage 1\")\n    //   let displayOpsLength = state.displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (state.displayOps[i] === \")\") closingNum++;\n    //     if (state.displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i - 3;\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //       break;\n    //     }\n    //   }\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    //   return \"\";\n    // } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\n    //   console.log(\"trigonometry stage 0.7\");\n    //   let displayOpsLength = state.displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (state.displayOps[i] === \")\") closingNum++;\n    //     if (state.displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i;\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //       break;\n    //     }\n    //   }\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    //   return \"\";\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\n    console.log(\"abs stage 2\");\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    return displayOpsExpression;\n  } else if (state.lastInput === \")\") {\n    console.log(\"abs stage 3\");\n    let displayOpsLength = displayOps.length;\n    let closingNum = 1;\n    let openingNum = 0;\n    let firstOpeningIndex = 0;\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\n      if (displayOps[i] === \")\") closingNum++;\n      if (displayOps[i] === \"(\") openingNum++;\n      if (closingNum === openingNum) {\n        firstOpeningIndex = i;\n        break;\n      }\n    }\n    displayOpsExpression = displayOps.slice(0, firstOpeningIndex).concat(`abs(${displayOps.slice(firstOpeningIndex)})`);\n    console.log(\"you are here amigo\", displayOpsExpression, closingNum, openingNum, firstOpeningIndex);\n    return displayOpsExpression;\n  } else if (state.lastInputType === \"digit\") {\n    console.log(\"abs stage 4\");\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n      console.log(\"abs stage 4.1\");\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayOpsExpression\", displayOpsExpression);\n      return displayOpsExpression;\n    } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\n      console.log(\"abs stage 4.15\");\n      let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\n      return displayOpsExpression;\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n      console.log(\"abs stage 4.2\");\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\n      displayOpsExpression = lastNegativeNum.index !== 0 ? displayOps.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\n      return displayOpsExpression;\n    } else {\n      console.log(\"abs stage 4.3\");\n      let regexNum = new RegExp(`${state.displayCur}$`);\n      let lastNumIndex = displayOps.match(regexNum).index;\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\n      return displayOpsExpression;\n    }\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n    console.log(\"abs stage 5\");\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n    let lastNum = displayOps.match(regexNum);\n    displayOpsExpression = displayOps.slice(0, lastNum.index).concat(`abs(${lastNum})`);\n    return displayOpsExpression;\n  }\n}","map":{"version":3,"names":["abs","state","displayOpsExpression","displayOps","lastResult","concat","match","lastInputType","lastOperator","console","log","matchTrigonometry","lastTrigonometryIndex","lastIndexOf","length","slice","lastInput","displayOpsLength","closingNum","openingNum","firstOpeningIndex","i","lastNegativeNum","index","regexNum","RegExp","displayCur","lastNumIndex","lastNum"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/abs.js"],"sourcesContent":["export function abs(state) {\r\n  let displayOpsExpression = \"\";\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\r\n    //    console.log(\"abs stage 1\")\r\n    //   let displayOpsLength = state.displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (state.displayOps[i] === \")\") closingNum++;\r\n    //     if (state.displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i - 3;\r\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    //   return \"\";\r\n    // } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\r\n    //   console.log(\"trigonometry stage 0.7\");\r\n    //   let displayOpsLength = state.displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (state.displayOps[i] === \")\") closingNum++;\r\n    //     if (state.displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i;\r\n    //       console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   displayOpsExpression = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    //   return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayOpsExpression = state.displayOps.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    return displayOpsExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayOpsLength = displayOps.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n      if (displayOps[i] === \")\") closingNum++;\r\n      if (displayOps[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayOpsExpression = displayOps.slice(0, firstOpeningIndex).concat(`abs(${displayOps.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayOpsExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayOpsExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayOpsExpression\", displayOpsExpression);\r\n      return displayOpsExpression;\r\n    } else if (displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayOps.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayOpsExpression = displayOps.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\r\n      return displayOpsExpression;\r\n    } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"abs stage 4.2\");\r\n      let lastNegativeNum = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayOpsExpression = lastNegativeNum.index !== 0 ? displayOps.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayOps.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayOpsExpression\", displayOpsExpression);\r\n      return displayOpsExpression;\r\n    } else {\r\n      console.log(\"abs stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayOps.match(regexNum).index;\r\n      displayOpsExpression = displayOps.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n      return displayOpsExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"abs stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayOps.match(regexNum);\r\n    displayOpsExpression = displayOps.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n    return displayOpsExpression;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}