{"ast":null,"code":"export let changeOneIntoAnother = [\n// the sign will be changed from positive to negative or vice versa for:\n// 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\n{\n  before: \"\\\\(\",\n  afterChangeSign: \"( - \",\n  afterAbs: \"(abs(\"\n}, {\n  before: \"\\\\( - \",\n  afterChangeSign: \"(\",\n  afterAbs: \"(abs( - \"\n}, {\n  before: \"^\",\n  afterChangeSign: \" - \",\n  afterAbs: \"abs(\"\n}, {\n  before: \"^ - \",\n  afterChangeSign: \"\",\n  afterAbs: \"abs( - \"\n},\n// 2) the expression preceded by two consecutive operators:\n{\n  before: \" -  - \",\n  afterChangeSign: \" - \",\n  afterAbs: \" - abs( - \"\n}, {\n  before: \" \\\\+  - \",\n  afterChangeSign: \" + \",\n  afterAbs: \" + abs( - \"\n}, {\n  before: \" \\\\*  - \",\n  afterChangeSign: \" * \",\n  afterAbs: \" * abs( - \"\n}, {\n  before: \" \\\\/  - \",\n  afterChangeSign: \" / \",\n  afterAbs: \" / abs( - \"\n}, {\n  before: \" \\\\^  - \",\n  afterChangeSign: \" ^ \",\n  afterAbs: \" ^ abs( - \"\n}, {\n  before: \" yroot  - \",\n  afterChangeSign: \" yroot \",\n  afterAbs: \" yroot abs( - \"\n}, {\n  before: \" mod  - \",\n  afterChangeSign: \" mod \",\n  afterAbs: \" mod abs( - \"\n},\n// 3) the expression preceded by only one operator:\n{\n  before: \" - \",\n  afterChangeSign: \" + \",\n  afterAbs: \" - abs(\"\n}, {\n  before: \" \\\\+ \",\n  afterChangeSign: \" - \",\n  afterAbs: \" + abs(\"\n}, {\n  before: \" \\\\* \",\n  afterChangeSign: \" *  - \",\n  afterAbs: \" * abs(\"\n}, {\n  before: \" \\\\/ \",\n  afterChangeSign: \" /  - \",\n  afterAbs: \" / abs(\"\n}, {\n  before: \" \\\\^ \",\n  afterChangeSign: \" ^  - \",\n  afterAbs: \" ^ abs(\"\n}, {\n  before: \" yroot \",\n  afterChangeSign: \" yroot  - \",\n  afterAbs: \" yroot abs(\"\n}, {\n  before: \" log base \",\n  afterChangeSign: \" log base \",\n  // no changes\n  afterAbs: \" log base abs(\"\n}, {\n  before: \" mod \",\n  afterChangeSign: \" mod \",\n  afterAbs: \" mod abs(\"\n}];","map":{"version":3,"names":["changeOneIntoAnother","before","afterChangeSign","afterAbs"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeOneIntoAnother.js"],"sourcesContent":["export let changeOneIntoAnother = [\r\n  // the sign will be changed from positive to negative or vice versa for:\r\n  // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\r\n  {\r\n    before: \"\\\\(\",\r\n    afterChangeSign: \"( - \",\r\n    afterAbs: \"(abs(\",\r\n  },\r\n  {\r\n    before: \"\\\\( - \",\r\n    afterChangeSign: \"(\",\r\n    afterAbs: \"(abs( - \",\r\n  },\r\n  {\r\n    before: \"^\",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \"abs(\",\r\n  },\r\n  {\r\n    before: \"^ - \",\r\n    afterChangeSign: \"\",\r\n    afterAbs: \"abs( - \",\r\n  },\r\n\r\n  // 2) the expression preceded by two consecutive operators:\r\n  {\r\n    before: \" -  - \",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \" - abs( - \",\r\n  },\r\n  {\r\n    before: \" \\\\+  - \",\r\n    afterChangeSign: \" + \",\r\n    afterAbs: \" + abs( - \",\r\n  },\r\n  {\r\n    before: \" \\\\*  - \",\r\n    afterChangeSign: \" * \",\r\n    afterAbs: \" * abs( - \",\r\n  },\r\n  {\r\n    before: \" \\\\/  - \",\r\n    afterChangeSign: \" / \",\r\n    afterAbs: \" / abs( - \",\r\n  },\r\n  {\r\n    before: \" \\\\^  - \",\r\n    afterChangeSign: \" ^ \",\r\n    afterAbs: \" ^ abs( - \",\r\n  },\r\n  {\r\n    before: \" yroot  - \",\r\n    afterChangeSign: \" yroot \",\r\n    afterAbs: \" yroot abs( - \",\r\n  },\r\n  {\r\n    before: \" mod  - \",\r\n    afterChangeSign: \" mod \",\r\n    afterAbs: \" mod abs( - \",\r\n  },\r\n  // 3) the expression preceded by only one operator:\r\n  {\r\n    before: \" - \",\r\n    afterChangeSign: \" + \",\r\n    afterAbs: \" - abs(\",\r\n  },\r\n  {\r\n    before: \" \\\\+ \",\r\n    afterChangeSign: \" - \",\r\n    afterAbs: \" + abs(\",\r\n  },\r\n  {\r\n    before: \" \\\\* \",\r\n    afterChangeSign: \" *  - \",\r\n    afterAbs: \" * abs(\",\r\n  },\r\n  {\r\n    before: \" \\\\/ \",\r\n    afterChangeSign: \" /  - \",\r\n    afterAbs: \" / abs(\",\r\n  },\r\n  {\r\n    before: \" \\\\^ \",\r\n    afterChangeSign: \" ^  - \",\r\n    afterAbs: \" ^ abs(\",\r\n  },\r\n  {\r\n    before: \" yroot \",\r\n    afterChangeSign: \" yroot  - \",\r\n    afterAbs: \" yroot abs(\",\r\n  },\r\n  {\r\n    before: \" log base \",\r\n    afterChangeSign: \" log base \", // no changes\r\n    afterAbs: \" log base abs(\",\r\n  },\r\n  {\r\n    before: \" mod \",\r\n    afterChangeSign: \" mod \",\r\n    afterAbs: \" mod abs(\",\r\n  },\r\n];\r\n"],"mappings":"AAAA,OAAO,IAAIA,oBAAoB,GAAG;AAChC;AACA;AACA;EACEC,MAAM,EAAE,KAAK;EACbC,eAAe,EAAE,MAAM;EACvBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,GAAG;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,GAAG;EACXC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,MAAM;EACdC,eAAe,EAAE,EAAE;EACnBC,QAAQ,EAAE;AACZ,CAAC;AAED;AACA;EACEF,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,UAAU;EAClBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,UAAU;EAClBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,UAAU;EAClBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,UAAU;EAClBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,YAAY;EACpBC,eAAe,EAAE,SAAS;EAC1BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,UAAU;EAClBC,eAAe,EAAE,OAAO;EACxBC,QAAQ,EAAE;AACZ,CAAC;AACD;AACA;EACEF,MAAM,EAAE,KAAK;EACbC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,QAAQ;EACzBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,QAAQ;EACzBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,QAAQ;EACzBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,SAAS;EACjBC,eAAe,EAAE,YAAY;EAC7BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,YAAY;EACpBC,eAAe,EAAE,YAAY;EAAE;EAC/BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,MAAM,EAAE,OAAO;EACfC,eAAe,EAAE,OAAO;EACxBC,QAAQ,EAAE;AACZ,CAAC,CACF"},"metadata":{},"sourceType":"module"}