{"ast":null,"code":"import { expression, expressionNegative, findExpression } from \"./findExpression\";\nimport calculate from \"./equals\";\nexport function validInput(state) {\n  // findExpression(state);\n  // let result = calculate(state, expression);\n  // console.log(\"you are in factorial: RESULT\", result);\n  // if (result < 0) {\n  //   alert(\"invalid input: factorials are only defined for positive numbers\");\n  //   return \"invalid input\";\n  // } else if (result % 1 !== 0) {\n  //   alert(`factorials for nonintegers are defined based on simplified Gamma function:\n  //     ~~ level of accuracy: low ~~`);\n  // }\n}\nexport function factorial(num, alertActive) {\n  let result = \"\";\n  if (num < 0) {\n    console.log(\"yes, you are here!!!!!\");\n    return \"invalid input\";\n  } else if (num % 1 !== 0 && num !== \")\") {\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\n  } else if (num === \")\") {\n    return \"!\";\n  } else {\n    result = Number(num);\n    if (Number.isInteger(result)) {\n      for (let i = result - 1; i > 0; i--) {\n        result *= i;\n      }\n      return result;\n    }\n  }\n}","map":{"version":3,"names":["expression","expressionNegative","findExpression","calculate","validInput","state","factorial","num","alertActive","result","console","log","Math","pow","PI","E","Number","isInteger","i"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { expression, expressionNegative, findExpression } from \"./findExpression\";\r\nimport calculate from \"./equals\";\r\n\r\nexport function validInput(state) {\r\n  // findExpression(state);\r\n  // let result = calculate(state, expression);\r\n  // console.log(\"you are in factorial: RESULT\", result);\r\n  // if (result < 0) {\r\n  //   alert(\"invalid input: factorials are only defined for positive numbers\");\r\n  //   return \"invalid input\";\r\n  // } else if (result % 1 !== 0) {\r\n  //   alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n  //     ~~ level of accuracy: low ~~`);\r\n  // }\r\n}\r\n\r\nexport function factorial(num, alertActive) {\r\n  let result = \"\";\r\n  if (num < 0) {\r\n    console.log(\"yes, you are here!!!!!\");\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0 && num !== \")\") {\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else if (num === \")\") {\r\n    return \"!\";\r\n  } else {\r\n    result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,kBAAkB;AACjF,OAAOC,SAAS,MAAM,UAAU;AAEhC,OAAO,SAASC,UAAU,CAACC,KAAK,EAAE;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAEA,OAAO,SAASC,SAAS,CAACC,GAAG,EAAEC,WAAW,EAAE;EAC1C,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIF,GAAG,GAAG,CAAC,EAAE;IACXG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,OAAO,eAAe;EACxB,CAAC,MAAM,IAAIJ,GAAG,GAAG,CAAC,KAAK,CAAC,IAAIA,GAAG,KAAK,GAAG,EAAE;IACvC,OAAOK,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,GAAG,GAAGK,IAAI,CAACE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACN,GAAG,GAAGK,IAAI,CAACG,CAAC,EAAER,GAAG,CAAC;EACzE,CAAC,MAAM,IAAIA,GAAG,KAAK,GAAG,EAAE;IACtB,OAAO,GAAG;EACZ,CAAC,MAAM;IACLE,MAAM,GAAGO,MAAM,CAACT,GAAG,CAAC;IACpB,IAAIS,MAAM,CAACC,SAAS,CAACR,MAAM,CAAC,EAAE;MAC5B,KAAK,IAAIS,CAAC,GAAGT,MAAM,GAAG,CAAC,EAAES,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnCT,MAAM,IAAIS,CAAC;MACb;MACA,OAAOT,MAAM;IACf;EACF;AACF"},"metadata":{},"sourceType":"module"}