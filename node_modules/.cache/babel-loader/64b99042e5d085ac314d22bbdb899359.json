{"ast":null,"code":"// next steps:\n\n// continue filling pivot table for all handlers (consider inserting it as a comment to the project)\n\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\n// clicking trigonometry after decimal\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\n\n// consider adding event listeners\n// - check every input mixing with others\n// check the following input 8 + ( - =\n// check the following input 8 + ( =\n// check the following input - ( 8  => NaN\n// check the the wrong operator cut at the end : 7 + 4! - 4! +    =\n// denominator doesn't work with log (it should put log in lower part)\n\n// - when invalid input appers or any other error, block all keys except for AC and del\n\n// unite changeOneIntoAnother in various functions\nimport { factorial } from \"./factorial\";\nimport { FixIncompleteInputs, displayAllExpression, addMissingParenthesis } from \"./FixIncompleteInputs\";\nimport $ from \"jquery\";\nexport default function calculate(state, expression) {\n  console.log(\"you are in equals => calculate\");\n  FixIncompleteInputs(state, expression);\n  let expr = displayAllExpression;\n  expr = expr === \"\" ? convertDisplayAllIntoArray(\"0\") : convertDisplayAllIntoArray(expr);\n  return findParenthesis(expr);\n}\nfunction convertDisplayAllIntoArray(string) {\n  // console.log(\"string inside convertDisplayIntoArr\", string);\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\n  let displayAllArray = string.match(parseRegex).map(elem => isFinite(elem) ? Number(elem) : elem);\n  displayAllArray.unshift(\"(\");\n  displayAllArray.push(\")\");\n  // console.log(\"convertDisplayIntoArr\", displayAllArray);\n  return displayAllArray;\n}\nfunction findParenthesis(expr) {\n  let firstClosingIndex = expr.findIndex(parentesis => parentesis === \")\");\n  if (firstClosingIndex !== -1) {\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex(parentesis => parentesis === \"(\");\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\n    expr = expr.slice(0, firstClosingIndex - firstOpeningIndex - 1).concat(resultInsideParentheses).concat(expr.slice(firstClosingIndex + 1));\n    return findParenthesis(expr);\n  }\n  console.log(\"you are in findParenthesis\", expr[0]);\n  return expr[0];\n}\nfunction calculateInsideParentheses(expr) {\n  expr = findNegativeValues(expr);\n  expr = calculateInOrder(expr, [\"abs\", \" log base \"]);\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\n  expr = calculateInOrder(expr, [\" mod \", \" mod \"]);\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\n  return expr[0];\n}\nlet count = 0;\nexport function findNegativeValues(arr) {\n  console.log(\"findNegativeValues arr\", arr);\n  let negativeIndex = \"\";\n  if (arr[0] === \" - \") {\n    let newArr = \"-1 * \".concat(arr.slice(1));\n    return findNegativeValues(newArr);\n  } else {\n    negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && typeof arr[ind - 1] === \"string\" && arr[ind - 1] !== \"!\" && arr[ind - 1] !== \"%\" && typeof arr[ind + 1] === \"number\");\n    console.log(\"negativeIndex\", negativeIndex);\n    if (negativeIndex !== -1) {\n      let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n      return findNegativeValues(newArr);\n    }\n  }\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  if (arr.some(elem => elem === \"invalid input\")) {\n    arr = [\"invalid input\"];\n  }\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\n    let currentResult = currentOperator === \"abs\" ? Math.abs(currentOperation[currentOperation.length - 1]) : currentOperator === \"sin\" ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cos\" ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"tan\" ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"cot\" ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"sec\" ? 1 / Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"csc\" ? 1 / Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180)) : currentOperator === \"!\" ? factorial(currentOperation[0]) : currentOperator === \"%\" ? currentOperation[0] / 100 : currentOperator === \" log base \" ? Math.log(currentOperation[0]) / Math.log(currentOperation[2]) : currentOperator === \" mod \" ? currentOperation[0] % currentOperation[2] : currentOperator === \" yroot \" ? Math.pow(currentOperation[0], 1 / currentOperation[2]) : currentOperator === \" ^ \" ? Math.pow(currentOperation[0], currentOperation[2]) : currentOperator === \" * \" ? currentOperation[0] * currentOperation[2] : currentOperator === \" / \" ? currentOperation[0] / currentOperation[2] : currentOperator === \" + \" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\n    let result = currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\" ? arr.slice(0, operatorIndex).concat(currentResult).concat(arr.slice(operatorIndex + 2)) : currentOperator === \"!\" || currentOperator === \"%\" ? arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 1)) : arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    console.log(\"result\", result);\n    return calculateInOrder(result, operators);\n  }\n  return arr;\n}\nexport function lastLegitSymbol(displayAll) {\n  console.log(\"you actually here\", displayAll);\n  let lastLegitSymbol = displayAll.split(\"\").reverse().findIndex(elem => /\\d|\\(|!/.test(elem));\n  return lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayAll.length;\n}","map":{"version":3,"names":["factorial","FixIncompleteInputs","displayAllExpression","addMissingParenthesis","$","calculate","state","expression","console","log","expr","convertDisplayAllIntoArray","findParenthesis","string","parseRegex","RegExp","displayAllArray","match","map","elem","isFinite","Number","unshift","push","firstClosingIndex","findIndex","parentesis","exprInsideParantethes","slice","firstOpeningIndex","reverse","resultInsideParentheses","calculateInsideParentheses","concat","findNegativeValues","calculateInOrder","count","arr","negativeIndex","newArr","ind","operators","some","operatorIndex","currentOperator","currentOperation","currentResult","Math","abs","length","sin","PI","cos","tan","pow","result","lastLegitSymbol","displayAll","split","test"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/equals.js"],"sourcesContent":["// next steps:\r\n\r\n// continue filling pivot table for all handlers (consider inserting it as a comment to the project)\r\n\r\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\r\n// clicking trigonometry after decimal\r\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\r\n\r\n// consider adding event listeners\r\n// - check every input mixing with others\r\n// check the following input 8 + ( - =\r\n// check the following input 8 + ( =\r\n// check the following input - ( 8  => NaN\r\n// check the the wrong operator cut at the end : 7 + 4! - 4! +    =\r\n// denominator doesn't work with log (it should put log in lower part)\r\n\r\n// - when invalid input appers or any other error, block all keys except for AC and del\r\n\r\n// unite changeOneIntoAnother in various functions\r\nimport { factorial } from \"./factorial\";\r\nimport { FixIncompleteInputs, displayAllExpression, addMissingParenthesis } from \"./FixIncompleteInputs\";\r\nimport $ from \"jquery\";\r\n\r\nexport default function calculate(state, expression) {\r\n  console.log(\"you are in equals => calculate\");\r\n  FixIncompleteInputs(state, expression);\r\n  let expr = displayAllExpression;\r\n  expr = expr === \"\" ? convertDisplayAllIntoArray(\"0\") : convertDisplayAllIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayAllIntoArray(string) {\r\n  // console.log(\"string inside convertDisplayIntoArr\", string);\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayAllArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayAllArray.unshift(\"(\");\r\n  displayAllArray.push(\")\");\r\n  // console.log(\"convertDisplayIntoArr\", displayAllArray);\r\n  return displayAllArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  console.log(\"you are in findParenthesis\", expr[0]);\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\"abs\", \" log base \"]);\r\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\r\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\r\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\r\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" mod \", \" mod \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nlet count = 0;\r\nexport function findNegativeValues(arr) {\r\n  console.log(\"findNegativeValues arr\", arr);\r\n  let negativeIndex = \"\";\r\n  if (arr[0] === \" - \") {\r\n    let newArr = \"-1 * \".concat(arr.slice(1));\r\n    return findNegativeValues(newArr);\r\n  } else {\r\n    negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && typeof arr[ind - 1] === \"string\" && arr[ind - 1] !== \"!\" && arr[ind - 1] !== \"%\" && typeof arr[ind + 1] === \"number\");\r\n    console.log(\"negativeIndex\", negativeIndex);\r\n    if (negativeIndex !== -1) {\r\n      let newArr = arr\r\n        .slice(0, negativeIndex)\r\n        .concat(arr[negativeIndex + 1] * -1)\r\n        .concat(arr.slice(negativeIndex + 2));\r\n      return findNegativeValues(newArr);\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  if (arr.some((elem) => elem === \"invalid input\")) {\r\n    arr = [\"invalid input\"];\r\n  }\r\n\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\r\n\r\n    let currentResult =\r\n      currentOperator === \"abs\"\r\n        ? Math.abs(currentOperation[currentOperation.length - 1])\r\n        : currentOperator === \"sin\"\r\n        ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cos\"\r\n        ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"tan\"\r\n        ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cot\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"sec\"\r\n        ? 1 / Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"csc\"\r\n        ? 1 / Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"!\"\r\n        ? factorial(currentOperation[0])\r\n        : currentOperator === \"%\"\r\n        ? currentOperation[0] / 100\r\n        : currentOperator === \" log base \"\r\n        ? Math.log(currentOperation[0]) / Math.log(currentOperation[2])\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[0] / currentOperation[2]\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\r\n\r\n    let result =\r\n      currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\"\r\n        ? arr\r\n            .slice(0, operatorIndex)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2))\r\n        : currentOperator === \"!\" || currentOperator === \"%\"\r\n        ? arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 1))\r\n        : arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2));\r\n    console.log(\"result\", result);\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport function lastLegitSymbol(displayAll) {\r\n  console.log(\"you actually here\", displayAll);\r\n  let lastLegitSymbol = displayAll\r\n    .split(\"\")\r\n    .reverse()\r\n    .findIndex((elem) => /\\d|\\(|!/.test(elem));\r\n  return (lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayAll.length);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}