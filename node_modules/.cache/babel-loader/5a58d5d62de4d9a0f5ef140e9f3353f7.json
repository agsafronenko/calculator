{"ast":null,"code":"import{alertStatus}from\"./alertStatus\";import $ from\"jquery\";export function factorial(num){if(num<0){if(alertStatus.negativeFactor===false){alert(\"invalid input: factorials are only defined for positive numbers\");alertStatus.negativeFactor=true;}$(\"button\").css(\"pointerEvents\",\"none\");$(\"button\").css(\"opacity\",\"0.8\");$(\"#clear\").css(\"pointerEvents\",\"auto\");$(\"#clear\").css(\"opacity\",\"1\");$(\"#delete\").css(\"pointerEvents\",\"auto\");$(\"#delete\").css(\"opacity\",\"1\");return\"invalid input\";}else if(num%1!==0){if(alertStatus.nonIntegerFactor===false){alert(\"factorials for nonintegers are defined based on simplified Gamma function:\\n      ~~ level of accuracy: low ~~\");alertStatus.nonIntegerFactor=true;}return Math.pow(2*num*Math.PI,1/2)*Math.pow(num/Math.E,num);}else if(num===0){return 1;}else{var result=Number(num);if(Number.isInteger(result)){for(var i=result-1;i>0;i--){result*=i;}return result;}}}","map":{"version":3,"names":["alertStatus","$","factorial","num","negativeFactor","alert","css","nonIntegerFactor","Math","pow","PI","E","result","Number","isInteger","i"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/factorial.js"],"sourcesContent":["import { alertStatus } from \"./alertStatus\";\r\nimport $ from \"jquery\";\r\n\r\nexport function factorial(num) {\r\n  if (num < 0) {\r\n    if (alertStatus.negativeFactor === false) {\r\n      alert(\"invalid input: factorials are only defined for positive numbers\");\r\n      alertStatus.negativeFactor = true;\r\n    }\r\n    $(\"button\").css(\"pointerEvents\", \"none\");\r\n    $(\"button\").css(\"opacity\", \"0.8\");\r\n    $(\"#clear\").css(\"pointerEvents\", \"auto\");\r\n    $(\"#clear\").css(\"opacity\", \"1\");\r\n    $(\"#delete\").css(\"pointerEvents\", \"auto\");\r\n    $(\"#delete\").css(\"opacity\", \"1\");\r\n\r\n    return \"invalid input\";\r\n  } else if (num % 1 !== 0) {\r\n    if (alertStatus.nonIntegerFactor === false) {\r\n      alert(`factorials for nonintegers are defined based on simplified Gamma function:\r\n      ~~ level of accuracy: low ~~`);\r\n      alertStatus.nonIntegerFactor = true;\r\n    }\r\n    return Math.pow(2 * num * Math.PI, 1 / 2) * Math.pow(num / Math.E, num);\r\n  } else if (num === 0) {\r\n    return 1;\r\n  } else {\r\n    let result = Number(num);\r\n    if (Number.isInteger(result)) {\r\n      for (let i = result - 1; i > 0; i--) {\r\n        result *= i;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,eAAe,CAC3C,MAAOC,EAAC,KAAM,QAAQ,CAEtB,MAAO,SAASC,UAAS,CAACC,GAAG,CAAE,CAC7B,GAAIA,GAAG,CAAG,CAAC,CAAE,CACX,GAAIH,WAAW,CAACI,cAAc,GAAK,KAAK,CAAE,CACxCC,KAAK,CAAC,iEAAiE,CAAC,CACxEL,WAAW,CAACI,cAAc,CAAG,IAAI,CACnC,CACAH,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,eAAe,CAAE,MAAM,CAAC,CACxCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,SAAS,CAAE,KAAK,CAAC,CACjCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,eAAe,CAAE,MAAM,CAAC,CACxCL,CAAC,CAAC,QAAQ,CAAC,CAACK,GAAG,CAAC,SAAS,CAAE,GAAG,CAAC,CAC/BL,CAAC,CAAC,SAAS,CAAC,CAACK,GAAG,CAAC,eAAe,CAAE,MAAM,CAAC,CACzCL,CAAC,CAAC,SAAS,CAAC,CAACK,GAAG,CAAC,SAAS,CAAE,GAAG,CAAC,CAEhC,MAAO,eAAe,CACxB,CAAC,IAAM,IAAIH,GAAG,CAAG,CAAC,GAAK,CAAC,CAAE,CACxB,GAAIH,WAAW,CAACO,gBAAgB,GAAK,KAAK,CAAE,CAC1CF,KAAK,kHACyB,CAC9BL,WAAW,CAACO,gBAAgB,CAAG,IAAI,CACrC,CACA,MAAOC,KAAI,CAACC,GAAG,CAAC,CAAC,CAAGN,GAAG,CAAGK,IAAI,CAACE,EAAE,CAAE,CAAC,CAAG,CAAC,CAAC,CAAGF,IAAI,CAACC,GAAG,CAACN,GAAG,CAAGK,IAAI,CAACG,CAAC,CAAER,GAAG,CAAC,CACzE,CAAC,IAAM,IAAIA,GAAG,GAAK,CAAC,CAAE,CACpB,MAAO,EAAC,CACV,CAAC,IAAM,CACL,GAAIS,OAAM,CAAGC,MAAM,CAACV,GAAG,CAAC,CACxB,GAAIU,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,CAAE,CAC5B,IAAK,GAAIG,EAAC,CAAGH,MAAM,CAAG,CAAC,CAAEG,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CACnCH,MAAM,EAAIG,CAAC,CACb,CACA,MAAOH,OAAM,CACf,CACF,CACF"},"metadata":{},"sourceType":"module"}