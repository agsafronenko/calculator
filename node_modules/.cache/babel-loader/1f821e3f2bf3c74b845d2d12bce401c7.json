{"ast":null,"code":"// next steps:\n// - force all click() inputs to be inside the displayOps and outside of displayCur (like %, S, R, etc), so displayCur will be clean before next operation (not obligatory)\n// - consider recoding actions that change only displayCur, so they could also change the last number or last parenthesis in displayOps\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\n// sonsider adding event listeners\n// - check every input mixing with others\n\nexport default function calculate(expr) {\n  // console.log(\"diplayOps in calculate(arr)\", expr);\n  expr = convertDisplayOpsIntoArray(expr);\n  return findParenthesis(expr);\n}\nfunction convertDisplayOpsIntoArray(string) {\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\n  let displayOpsArray = string.match(parseRegex).map(elem => isFinite(elem) ? Number(elem) : elem);\n  displayOpsArray.unshift(\"(\");\n  displayOpsArray.push(\")\");\n  console.log(\"match\", displayOpsArray);\n  return displayOpsArray;\n}\nfunction findParenthesis(expr) {\n  let firstClosingIndex = expr.findIndex(parentesis => parentesis === \")\");\n  if (firstClosingIndex !== -1) {\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex(parentesis => parentesis === \"(\");\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\n    expr = expr.slice(0, firstClosingIndex - firstOpeningIndex - 1).concat(resultInsideParentheses).concat(expr.slice(firstClosingIndex + 1));\n    return findParenthesis(expr);\n  }\n  return expr[0];\n}\nfunction calculateInsideParentheses(expr) {\n  console.log(\"hey you are here\", expr);\n  expr = findNegativeValues(expr);\n  expr = calculateInOrder(expr, [\" log base \", \" mod \"]);\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\n  return expr[0];\n}\nfunction findNegativeValues(arr) {\n  console.log(\"now you are herererererer\", typeof typeof arr[0 - 1]);\n  let negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && ind === 0 || elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\");\n  if (negativeIndex !== -1) {\n    let newArr = arr.slice(0, negativeIndex).concat(arr[negativeIndex + 1] * -1).concat(arr.slice(negativeIndex + 2));\n    return findNegativeValues(newArr);\n  }\n  return arr;\n}\nfunction calculateInOrder(arr, operators) {\n  let operatorIndex = arr.findIndex(elem => elem === operators[0] || elem === operators[1]);\n  let currentOperator = arr[operatorIndex];\n  if (operatorIndex !== -1) {\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\n    let currentResult = currentOperator === \" log base \" ? Math.log(currentOperation[0]) / Math.log(currentOperation[2]) : currentOperator === \" mod \" ? currentOperation[0] % currentOperation[2] : currentOperator === \" yroot \" ? Math.pow(currentOperation[0], 1 / currentOperation[2]) : currentOperator === \" ^ \" ? Math.pow(currentOperation[0], currentOperation[2]) : currentOperator === \" * \" ? currentOperation[0] * currentOperation[2] : currentOperator === \" / \" ? currentOperation[0] / currentOperation[2] : currentOperator === \" + \" ? currentOperation[0] + currentOperation[2] : currentOperation[0] - currentOperation[2];\n    let result = arr.slice(0, operatorIndex - 1).concat(currentResult).concat(arr.slice(operatorIndex + 2));\n    return calculateInOrder(result, operators);\n  }\n  return arr;\n}\nexport let displayOpsExpression = \"\";\nexport function deleteRedundantOperators(state) {\n  if (/\\)/.test(state.displayCur)) {\n    displayOpsExpression = state.displayOps;\n  } else if (/\\d/.test(state.displayCur)) {\n    displayOpsExpression = state.displayOps;\n  } else {\n    let lastDigitIndex = state.displayOps.split(\"\").reverse().findIndex(elem => /\\d/.test(elem));\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\n  }\n  addMissingParenthesis(state.parenthesesDelta);\n}\n\n// export function deleteRedundantDigits(state) {\n//   if (/\\./.test(state.displayCur)) {\n//     let decimalIndex = state.displayOps\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\./.test(elem));\n//     displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\n//   } else if (/\\D/.test(state.displayCur)) {\n//     displayOpsExpression = state.displayOps;\n//   } else {\n//     let lastNonDigitIndex = state.displayOps\n//       .split(\"\")\n//       .reverse()\n//       .findIndex((elem) => /\\D/.test(elem));\n//     displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\n//   }\n// }\n\nexport function addMissingParenthesis(delta) {\n  if (delta > 0) {\n    displayOpsExpression += \")\";\n    delta -= 1;\n    addMissingParenthesis(delta);\n  }\n}\nexport let stateStorage = {\n  prevState: []\n};\nexport function saveState(state) {\n  if (stateStorage.prevState.length >= 30) {\n    stateStorage.prevState.pop();\n    stateStorage.prevState.unshift(state);\n  } else {\n    stateStorage.prevState.unshift(state);\n  }\n  return stateStorage.prevState;\n}\nexport function factorial(num) {\n  let result = Number(num);\n  if (Number.isInteger(result)) {\n    for (let i = result - 1; i > 0; i--) {\n      result *= i;\n    }\n  }\n  return Number.isInteger(result) ? result : num;\n}\nexport function trigonometryInDegrees(curDegree, trigFunc) {\n  console.log(\"inside trigonom, args:\", curDegree, trigFunc);\n  let reciprocal = {\n    cot: \"tan\",\n    sec: \"cos\",\n    csc: \"sin\"\n  };\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\n  return calculateResult().toString();\n}","map":{"version":3,"names":["calculate","expr","convertDisplayOpsIntoArray","findParenthesis","string","parseRegex","RegExp","displayOpsArray","match","map","elem","isFinite","Number","unshift","push","console","log","firstClosingIndex","findIndex","parentesis","exprInsideParantethes","slice","firstOpeningIndex","reverse","resultInsideParentheses","calculateInsideParentheses","concat","findNegativeValues","calculateInOrder","arr","negativeIndex","ind","newArr","operators","operatorIndex","currentOperator","currentOperation","currentResult","Math","pow","result","displayOpsExpression","deleteRedundantOperators","state","test","displayCur","displayOps","lastDigitIndex","split","length","addMissingParenthesis","parenthesesDelta","delta","stateStorage","prevState","saveState","pop","factorial","num","isInteger","i","trigonometryInDegrees","curDegree","trigFunc","reciprocal","cot","sec","csc","calculateResult","Function","toString"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions.js"],"sourcesContent":["// next steps:\r\n// - force all click() inputs to be inside the displayOps and outside of displayCur (like %, S, R, etc), so displayCur will be clean before next operation (not obligatory)\r\n// - consider recoding actions that change only displayCur, so they could also change the last number or last parenthesis in displayOps\r\n// - consider using paste into displayCur (restrictions to what should be pasted) -> otherwise change \"copy\" to \"copy result\"\r\n// - consider adding multiple displays for results with possibility to insert them into displayCur later on\r\n// consider adding math.round (2-0.56) will provide with non accurate result --> round to the number of digits --> consider adding rounding button\r\n// sonsider adding event listeners\r\n// - check every input mixing with others\r\n\r\nexport default function calculate(expr) {\r\n  // console.log(\"diplayOps in calculate(arr)\", expr);\r\n  expr = convertDisplayOpsIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayOpsIntoArray(string) {\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayOpsArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayOpsArray.unshift(\"(\");\r\n  displayOpsArray.push(\")\");\r\n  console.log(\"match\", displayOpsArray);\r\n  return displayOpsArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  console.log(\"hey you are here\", expr);\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\" log base \", \" mod \"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nfunction findNegativeValues(arr) {\r\n  console.log(\"now you are herererererer\", typeof typeof arr[0 - 1]);\r\n  let negativeIndex = arr.findIndex((elem, ind) => (elem === \" - \" && ind === 0) || (elem === \" - \" && typeof arr[ind - 1] === \"string\" && typeof arr[ind + 1] === \"number\"));\r\n  if (negativeIndex !== -1) {\r\n    let newArr = arr\r\n      .slice(0, negativeIndex)\r\n      .concat(arr[negativeIndex + 1] * -1)\r\n      .concat(arr.slice(negativeIndex + 2));\r\n    return findNegativeValues(newArr);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n\r\n    let currentResult =\r\n      currentOperator === \" log base \"\r\n        ? Math.log(currentOperation[0]) / Math.log(currentOperation[2])\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[0] / currentOperation[2]\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n\r\n    let result = arr\r\n      .slice(0, operatorIndex - 1)\r\n      .concat(currentResult)\r\n      .concat(arr.slice(operatorIndex + 2));\r\n\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport let displayOpsExpression = \"\";\r\n\r\nexport function deleteRedundantOperators(state) {\r\n  if (/\\)/.test(state.displayCur)) {\r\n    displayOpsExpression = state.displayOps;\r\n  } else if (/\\d/.test(state.displayCur)) {\r\n    displayOpsExpression = state.displayOps;\r\n  } else {\r\n    let lastDigitIndex = state.displayOps\r\n      .split(\"\")\r\n      .reverse()\r\n      .findIndex((elem) => /\\d/.test(elem));\r\n    displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - lastDigitIndex);\r\n  }\r\n  addMissingParenthesis(state.parenthesesDelta);\r\n}\r\n\r\n// export function deleteRedundantDigits(state) {\r\n//   if (/\\./.test(state.displayCur)) {\r\n//     let decimalIndex = state.displayOps\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\./.test(elem));\r\n//     displayOpsExpression = state.displayOps.slice(0, state.displayOps.length - decimalIndex - 2);\r\n//   } else if (/\\D/.test(state.displayCur)) {\r\n//     displayOpsExpression = state.displayOps;\r\n//   } else {\r\n//     let lastNonDigitIndex = state.displayOps\r\n//       .split(\"\")\r\n//       .reverse()\r\n//       .findIndex((elem) => /\\D/.test(elem));\r\n//     displayOpsExpression = lastNonDigitIndex === -1 ? \"\" : state.displayOps.slice(0, state.displayOps.length - lastNonDigitIndex);\r\n//   }\r\n// }\r\n\r\nexport function addMissingParenthesis(delta) {\r\n  if (delta > 0) {\r\n    displayOpsExpression += \")\";\r\n    delta -= 1;\r\n    addMissingParenthesis(delta);\r\n  }\r\n}\r\n\r\nexport let stateStorage = {\r\n  prevState: [],\r\n};\r\n\r\nexport function saveState(state) {\r\n  if (stateStorage.prevState.length >= 30) {\r\n    stateStorage.prevState.pop();\r\n    stateStorage.prevState.unshift(state);\r\n  } else {\r\n    stateStorage.prevState.unshift(state);\r\n  }\r\n  return stateStorage.prevState;\r\n}\r\n\r\nexport function factorial(num) {\r\n  let result = Number(num);\r\n  if (Number.isInteger(result)) {\r\n    for (let i = result - 1; i > 0; i--) {\r\n      result *= i;\r\n    }\r\n  }\r\n  return Number.isInteger(result) ? result : num;\r\n}\r\n\r\nexport function trigonometryInDegrees(curDegree, trigFunc) {\r\n  console.log(\"inside trigonom, args:\", curDegree, trigFunc);\r\n  let reciprocal = {\r\n    cot: \"tan\",\r\n    sec: \"cos\",\r\n    csc: \"sin\",\r\n  };\r\n\r\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n  return calculateResult().toString();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}