{"ast":null,"code":"export let finalDisplayOpsChangeSign = \"\";\nexport function changeSign(state) {\n  console.log(\"you are in changeSign function\");\n  let displayOps = state.displayOps;\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\n    // console.log(\"trigonometry stage 0.5\");\n    // let displayOpsLength = state.displayOps.length;\n    // let closingNum = 1;\n    // let openingNum = 0;\n    // let firstOpeningIndex = 0;\n    // for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //   if (state.displayOps[i] === \")\") closingNum++;\n    //   if (state.displayOps[i] === \"(\") openingNum++;\n    //   if (closingNum === openingNum) {\n    //     firstOpeningIndex = i - 3;\n    //     console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //     break;\n    //   }\n    // }\n    // finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    // return \"\";\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\n    // console.log(\"trigonometry stage 0.7\");\n    // let displayOpsLength = state.displayOps.length;\n    // let closingNum = 1;\n    // let openingNum = 0;\n    // let firstOpeningIndex = 0;\n    // for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //   if (state.displayOps[i] === \")\") closingNum++;\n    //   if (state.displayOps[i] === \"(\") openingNum++;\n    //   if (closingNum === openingNum) {\n    //     firstOpeningIndex = i;\n    //     console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\n    //     break;\n    //   }\n    // }\n    // finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\n    // return \"\";\n  } else if (state.lastOperator === \"trigonometry\") {\n    //   console.log(\"trigonometry stage 1\");\n    //   let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\n    //   let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\n    //   finalDisplayOpsChangeSign = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\n    //   return \"\";\n    // } else if (state.lastInput === \")\") {\n    //   console.log(\"trigonometry stage 2\");\n    //   let displayOpsLength = state.displayOps.length;\n    //   let closingNum = 1;\n    //   let openingNum = 0;\n    //   let firstOpeningIndex = 0;\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\n    //     if (state.displayOps[i] === \")\") closingNum++;\n    //     if (state.displayOps[i] === \"(\") openingNum++;\n    //     if (closingNum === openingNum) {\n    //       firstOpeningIndex = i;\n    //       break;\n    //     }\n    //   }\n    //   finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\n    //   return \"\";\n  } else if (state.lastInputType === \"digit\") {\n    // console.log(\"trigonometry stage 3\");\n    // if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\n    //   console.log(\"trigonometry stage 3.1\");\n    //   let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n    //   let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n    //   finalDisplayOpsChangeSign = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n    //   console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOpsChangeSign\", finalDisplayOpsChangeSign);\n    //   let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n    //   return calculateResult;\n    // } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\n    //   console.log(\"trigonometry stage 3.2\");\n    //   let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\n    //   let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\n    //   finalDisplayOpsChangeSign =\n    //     lastNegativeNumIndex !== 0\n    //       ? displayOps\n    //           .slice(0, lastNegativeNumIndex)\n    //           .concat(\" + \")\n    //           .concat(`${trigFunc}(${lastPositiveNum * -1})`)\n    //       : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\n    //   console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOpsChangeSign\", finalDisplayOpsChangeSign);\n    //   let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\n    //   return calculateResult;\n    // } else {\n    //   console.log(\"trigonometry stage 3.3\");\n    //   let regexNum = new RegExp(`${state.displayCur}$`);\n    //   let lastNumIndex = displayOps.match(regexNum).index;\n    //   finalDisplayOpsChangeSign = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\n    //   let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\n    //   return calculateResult;\n    // }\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\n    let lastNumIndex = state.displayOps.match(regexNum).index;\n    finalDisplayOpsChangeSign = state.displayOps.slice(0, lastNumIndex).concat(`(${state.displayOps.match(regexNum)})`);\n    return \"\";\n  }\n}","map":{"version":3,"names":["finalDisplayOpsChangeSign","changeSign","state","console","log","displayOps","lastResult","concat","match","lastInputType","lastOperator","lastInput","regexNum","RegExp","lastNumIndex","index","slice"],"sources":["C:/Users/agsaf/Documents/GitHub/calculator/src/functions/changeSign.js"],"sourcesContent":["export let finalDisplayOpsChangeSign = \"\";\r\n\r\nexport function changeSign(state) {\r\n  console.log(\"you are in changeSign function\");\r\n  let displayOps = state.displayOps;\r\n  if (state.lastResult !== \"\") displayOps = \"\".concat(state.lastResult);\r\n  if (state.displayOps.match(/\\)\\)$/ && state.lastInputType === \"trigonometry\")) {\r\n    // console.log(\"trigonometry stage 0.5\");\r\n    // let displayOpsLength = state.displayOps.length;\r\n    // let closingNum = 1;\r\n    // let openingNum = 0;\r\n    // let firstOpeningIndex = 0;\r\n    // for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //   if (state.displayOps[i] === \")\") closingNum++;\r\n    //   if (state.displayOps[i] === \"(\") openingNum++;\r\n    //   if (closingNum === openingNum) {\r\n    //     firstOpeningIndex = i - 3;\r\n    //     console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //     break;\r\n    //   }\r\n    // }\r\n    // finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    // return \"\";\r\n  } else if (state.displayOps.match(/\\)\\)$/ && state.lastInputType !== \"trigonometry\")) {\r\n    // console.log(\"trigonometry stage 0.7\");\r\n    // let displayOpsLength = state.displayOps.length;\r\n    // let closingNum = 1;\r\n    // let openingNum = 0;\r\n    // let firstOpeningIndex = 0;\r\n    // for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //   if (state.displayOps[i] === \")\") closingNum++;\r\n    //   if (state.displayOps[i] === \"(\") openingNum++;\r\n    //   if (closingNum === openingNum) {\r\n    //     firstOpeningIndex = i;\r\n    //     console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n    //     break;\r\n    //   }\r\n    // }\r\n    // finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayOps.slice(firstOpeningIndex)})`);\r\n    // return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\") {\r\n    //   console.log(\"trigonometry stage 1\");\r\n    //   let matchTrigonometry = state.displayOps.match(/sin|cos|tan|cot|sec|csc/gi);\r\n    //   let lastTrigonometryIndex = state.displayOps.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    //   finalDisplayOpsChangeSign = state.displayOps.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayOps.slice(lastTrigonometryIndex)})`);\r\n    //   return \"\";\r\n    // } else if (state.lastInput === \")\") {\r\n    //   console.log(\"trigonometry stage 2\");\r\n    //   let displayOpsLength = state.displayOps.length;\r\n    //   let closingNum = 1;\r\n    //   let openingNum = 0;\r\n    //   let firstOpeningIndex = 0;\r\n    //   for (let i = displayOpsLength - 2; i >= 0; i--) {\r\n    //     if (state.displayOps[i] === \")\") closingNum++;\r\n    //     if (state.displayOps[i] === \"(\") openingNum++;\r\n    //     if (closingNum === openingNum) {\r\n    //       firstOpeningIndex = i;\r\n    //       break;\r\n    //     }\r\n    //   }\r\n    //   finalDisplayOpsChangeSign = state.displayOps.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayOps.slice(firstOpeningIndex)}`);\r\n    //   return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    // console.log(\"trigonometry stage 3\");\r\n    // if (displayOps.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n    //   console.log(\"trigonometry stage 3.1\");\r\n    //   let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n    //   let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n    //   finalDisplayOpsChangeSign = displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n    //   console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOpsChangeSign\", finalDisplayOpsChangeSign);\r\n    //   let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n    //   return calculateResult;\r\n    // } else if (displayOps.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n    //   console.log(\"trigonometry stage 3.2\");\r\n    //   let lastNegativeNumIndex = displayOps.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n    //   let lastPositiveNum = displayOps.match(/\\d+\\.\\d+$|\\d+$/);\r\n    //   finalDisplayOpsChangeSign =\r\n    //     lastNegativeNumIndex !== 0\r\n    //       ? displayOps\r\n    //           .slice(0, lastNegativeNumIndex)\r\n    //           .concat(\" + \")\r\n    //           .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n    //       : displayOps.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n    //   console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayOpsChangeSign\", finalDisplayOpsChangeSign);\r\n    //   let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n    //   return calculateResult;\r\n    // } else {\r\n    //   console.log(\"trigonometry stage 3.3\");\r\n    //   let regexNum = new RegExp(`${state.displayCur}$`);\r\n    //   let lastNumIndex = displayOps.match(regexNum).index;\r\n    //   finalDisplayOpsChangeSign = displayOps.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n    //   let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n    //   return calculateResult;\r\n    // }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNumIndex = state.displayOps.match(regexNum).index;\r\n    finalDisplayOpsChangeSign = state.displayOps.slice(0, lastNumIndex).concat(`(${state.displayOps.match(regexNum)})`);\r\n    return \"\";\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,IAAIA,yBAAyB,GAAG,EAAE;AAEzC,OAAO,SAASC,UAAU,CAACC,KAAK,EAAE;EAChCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC7C,IAAIC,UAAU,GAAGH,KAAK,CAACG,UAAU;EACjC,IAAIH,KAAK,CAACI,UAAU,KAAK,EAAE,EAAED,UAAU,GAAG,EAAE,CAACE,MAAM,CAACL,KAAK,CAACI,UAAU,CAAC;EACrE,IAAIJ,KAAK,CAACG,UAAU,CAACG,KAAK,CAAC,OAAO,IAAIN,KAAK,CAACO,aAAa,KAAK,cAAc,CAAC,EAAE;IAC7E;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIP,KAAK,CAACG,UAAU,CAACG,KAAK,CAAC,OAAO,IAAIN,KAAK,CAACO,aAAa,KAAK,cAAc,CAAC,EAAE;IACpF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIP,KAAK,CAACQ,YAAY,KAAK,cAAc,EAAE;IAChD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIR,KAAK,CAACO,aAAa,KAAK,OAAO,EAAE;IAC1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM,IAAIP,KAAK,CAACS,SAAS,KAAK,GAAG,IAAIT,KAAK,CAACO,aAAa,KAAK,GAAG,EAAE;IACjE;IACA,IAAIG,QAAQ,GAAG,IAAIC,MAAM,CAAC,yJAAyJ,CAAC;IACpL,IAAIC,YAAY,GAAGZ,KAAK,CAACG,UAAU,CAACG,KAAK,CAACI,QAAQ,CAAC,CAACG,KAAK;IACzDf,yBAAyB,GAAGE,KAAK,CAACG,UAAU,CAACW,KAAK,CAAC,CAAC,EAAEF,YAAY,CAAC,CAACP,MAAM,CAAE,IAAGL,KAAK,CAACG,UAAU,CAACG,KAAK,CAACI,QAAQ,CAAE,GAAE,CAAC;IACnH,OAAO,EAAE;EACX;AACF"},"metadata":{},"sourceType":"module"}