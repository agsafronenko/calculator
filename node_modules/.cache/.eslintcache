[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js":"11","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js":"12","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeOneIntoAnother.js":"13"},{"size":246,"mtime":1666332524111,"results":"14","hashOfConfig":"15"},{"size":38437,"mtime":1670929043176,"results":"16","hashOfConfig":"15"},{"size":783,"mtime":1669651714567,"results":"17","hashOfConfig":"15"},{"size":839,"mtime":1669657528829,"results":"18","hashOfConfig":"15"},{"size":6857,"mtime":1670865287539,"results":"19","hashOfConfig":"15"},{"size":312,"mtime":1668012437190,"results":"20","hashOfConfig":"15"},{"size":1169,"mtime":1669742187455,"results":"21","hashOfConfig":"15"},{"size":919,"mtime":1669657558403,"results":"22","hashOfConfig":"15"},{"size":804,"mtime":1669651704301,"results":"23","hashOfConfig":"15"},{"size":1036,"mtime":1669657495235,"results":"24","hashOfConfig":"15"},{"size":4385,"mtime":1669746796447,"results":"25","hashOfConfig":"15"},{"size":982,"mtime":1669646053840,"results":"26","hashOfConfig":"15"},{"size":3614,"mtime":1669657351165,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"rv6zox",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["70","71","72","73","74"],[],"import React from \"react\";\r\nimport \"./styles/styles.css\";\r\nimport $ from \"jquery\";\r\nimport { abs } from \"./functions/abs\";\r\nimport { saveState, stateStorage } from \"./functions/previousState\";\r\nimport { trigonometryInDegrees } from \"./functions/trigonometry\";\r\nimport { changeSign } from \"./functions/changeSign\";\r\nimport { switchToDenominator } from \"./functions/switchToDenominator\";\r\nimport calculate, { lastLegitSymbol } from \"./functions/equals\";\r\nimport { displayAllExpression } from \"./functions/FixIncompleteInputs\";\r\nimport { alertStatus } from \"./functions/alertStatus\";\r\n\r\nexport default class Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displayAll: \"\",\r\n      displayCur: \"0\",\r\n      lastInput: \"\",\r\n      lastInputType: \"\",\r\n      decimalAlreadyUsed: false,\r\n      twoConsecutiveOperators: false,\r\n      lastResult: \"\",\r\n      parenthesesDelta: 0,\r\n      lastOperator: \"\",\r\n      memorySlot1: \"Memory Slot 1\",\r\n      memorySlot2: \"Memory Slot 2\",\r\n      memorySlot3: \"Memory Slot 3\",\r\n    };\r\n\r\n    //\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.handleOperator = this.handleOperator.bind(this);\r\n    this.handleDigit = this.handleDigit.bind(this);\r\n    this.handleEquals = this.handleEquals.bind(this);\r\n    this.handleDecimal = this.handleDecimal.bind(this);\r\n    this.handleSquareRoot = this.handleSquareRoot.bind(this);\r\n    this.handleSquare = this.handleSquare.bind(this);\r\n    this.handlePreviousState = this.handlePreviousState.bind(this);\r\n    this.handleSpecialDigit = this.handleSpecialDigit.bind(this);\r\n    this.handleLog10 = this.handleLog10.bind(this);\r\n    this.handleLog = this.handleLog.bind(this);\r\n    this.handleLogE = this.handleLogE.bind(this);\r\n    this.handleFactorial = this.handleFactorial.bind(this);\r\n    this.handleTrigonometry = this.handleTrigonometry.bind(this);\r\n    this.handlePercentage = this.handlePercentage.bind(this);\r\n    this.handleCopyToClipboard = this.handleCopyToClipboard.bind(this);\r\n    this.handleChangeSign = this.handleChangeSign.bind(this);\r\n    this.handleAbs = this.handleAbs.bind(this);\r\n    this.handleSwitchToDenominator = this.handleSwitchToDenominator.bind(this);\r\n    this.handleModulo = this.handleModulo.bind(this);\r\n    this.handleLeftParenthesis = this.handleLeftParenthesis.bind(this);\r\n    this.handleRightParenthesis = this.handleRightParenthesis.bind(this);\r\n    this.handleCopyToMS = this.handleCopyToMS.bind(this);\r\n    this.handleResetMS = this.handleResetMS.bind(this);\r\n    this.handleChangeColor = this.handleChangeColor.bind(this);\r\n    this.handleColorTheme = this.handleColorTheme.bind(this);\r\n    this.handlePreviewColorTheme = this.handlePreviewColorTheme.bind(this);\r\n  }\r\n\r\n  handleClear(clearStorage) {\r\n    $(\"button\").css(\"pointerEvents\", \"auto\");\r\n    $(\"button\").css(\"opacity\", \"1\");\r\n    if (clearStorage === true) stateStorage.prevState = [];\r\n    this.setState({\r\n      displayAll: \"\",\r\n      displayCur: \"0\",\r\n      lastInput: \"\",\r\n      lastInputType: \"\",\r\n      decimalAlreadyUsed: false,\r\n      twoConsecutiveOperators: false,\r\n      lastResult: \"\",\r\n      parenthesesDelta: 0,\r\n      lastOperator: \"\",\r\n    });\r\n    alertStatus.negativeFactor = false;\r\n    alertStatus.nonIntegerFactor = false;\r\n    alertStatus.negativeLog = false;\r\n    alertStatus.zeroAsDenominator = false;\r\n  }\r\n\r\n  handlePreviousState() {\r\n    $(\"button\").css(\"pointerEvents\", \"auto\");\r\n    $(\"button\").css(\"opacity\", \"1\");\r\n    if (stateStorage.prevState.length <= 1) {\r\n      this.handleClear(true);\r\n    } else {\r\n      stateStorage.prevState.shift();\r\n      this.setState(\r\n        {\r\n          displayAll: stateStorage.prevState[0].displayAll,\r\n          displayCur: stateStorage.prevState[0].displayCur,\r\n          lastInput: stateStorage.prevState[0].lastInput,\r\n          lastInputType: stateStorage.prevState[0].lastInputType,\r\n          decimalAlreadyUsed: stateStorage.prevState[0].decimalAlreadyUsed,\r\n          twoConsecutiveOperators: stateStorage.prevState[0].twoConsecutiveOperators,\r\n          lastResult: stateStorage.prevState[0].lastResult,\r\n          parenthesesDelta: stateStorage.prevState[0].parenthesesDelta,\r\n          lastOperator: stateStorage.prevState[0].lastOperator,\r\n        },\r\n        () => {\r\n          alertStatus.negativeFactor = false;\r\n          if (/\\d+\\.\\d+!/.test(this.state.displayAll) === false) {\r\n            alertStatus.nonIntegerFactor = false;\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleOperator(e) {\r\n    // only solo \" - \" is allowed as the first input among all operators\r\n    if (this.state.displayAll !== \"\" || e.target.value === \" - \") {\r\n      if (this.state.displayAll !== \" - \") {\r\n        // used to compare last two states and, in case of their equality, the stateStorage will not be updated\r\n        let penultimateInput = this.state.lastInput;\r\n\r\n        // handle consecutive input of multiple operators\r\n        if (this.state.twoConsecutiveOperators === true) {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: state.displayAll.slice(0, state.displayAll.length - lastLegitSymbol(state.displayAll)).concat(e.target.value),\r\n              lastInput: e.target.value,\r\n              lastInputType: \"operator\",\r\n              twoConsecutiveOperators: false,\r\n              lastOperator: e.target.value,\r\n            }),\r\n            () => {\r\n              if (e.target.value === \" - \" || e.target.value !== penultimateInput) saveState(this.state);\r\n            }\r\n          );\r\n        } else if (this.state.twoConsecutiveOperators === false && this.state.lastInputType === \"operator\" && e.target.value !== \" - \") {\r\n          if (this.state.displayAll.slice(this.state.displayAll.length - 4) !== \"( - \") {\r\n            this.setState(\r\n              (state) => ({\r\n                displayAll: state.displayAll.slice(0, state.displayAll.length - lastLegitSymbol(state.displayAll)).concat(e.target.value),\r\n                lastInput: e.target.value,\r\n                lastInputType: \"operator\",\r\n                twoConsecutiveOperators: false,\r\n                lastOperator: e.target.value,\r\n              }),\r\n              () => {\r\n                if (e.target.value !== penultimateInput) saveState(this.state);\r\n              }\r\n            );\r\n          }\r\n        } else if (this.state.twoConsecutiveOperators === false && this.state.lastInput === \" log base \" && e.target.value === \" - \") {\r\n        } else if (this.state.twoConsecutiveOperators === false && this.state.lastInputType === \"operator\" && e.target.value === \" - \" && this.state.displayAll.slice(this.state.displayAll.length - 4) !== \"( - \") {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: state.displayAll.concat(e.target.value),\r\n              lastInput: e.target.value,\r\n              lastInputType: \"operator\",\r\n              twoConsecutiveOperators: true,\r\n              lastOperator: e.target.value,\r\n            }),\r\n            () => {\r\n              saveState(this.state);\r\n            }\r\n          );\r\n        }\r\n        // handle input of the first operator\r\n        if (this.state.lastInput === \"(\") {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: e.target.value === \" - \" ? state.displayAll.concat(e.target.value) : state.displayAll,\r\n              lastInput: e.target.value === \" - \" ? e.target.value : state.lastInput,\r\n              lastInputType: e.target.value === \" - \" ? \"operator\" : state.lastInputType,\r\n              lastOperator: e.target.value === \" - \" ? e.target.value : state.lastOperator,\r\n            }),\r\n            () => {\r\n              if (e.target.value === \" - \") saveState(this.state);\r\n            }\r\n          );\r\n        } else if (this.state.lastInput === \")\") {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: state.displayAll.concat(e.target.value),\r\n              lastInput: e.target.value,\r\n              lastInputType: \"operator\",\r\n              lastOperator: e.target.value,\r\n            }),\r\n            () => {\r\n              saveState(this.state);\r\n            }\r\n          );\r\n        }\r\n\r\n        if (this.state.lastInputType !== \"parenthesis\" && this.state.lastInputType !== \"operator\") {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: state.lastResult === \"\" ? state.displayAll.concat(e.target.value) : \"\".concat(state.lastResult).concat(e.target.value),\r\n              displayCur: calculate(state, this.state.displayAll),\r\n              lastInput: e.target.value,\r\n              lastInputType: \"operator\",\r\n              decimalAlreadyUsed: false,\r\n              lastResult: \"\",\r\n              lastOperator: e.target.value,\r\n            }),\r\n            () => {\r\n              saveState(this.state);\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDigit(e) {\r\n    if (this.state.lastResult !== \"\") this.handleClear(false);\r\n    if (this.state.lastInput !== \")\" && this.state.lastInput !== \"!\" && this.state.lastInput !== \"%\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll:\r\n            state.lastInputType === \"operator\" || state.lastInput === \"(\"\r\n              ? state.displayAll.concat(e.target.value)\r\n              : (Number(state.displayCur) === 0 && state.displayCur.length === 1) || (!isFinite(state.lastInput) && state.lastInput !== \".\")\r\n              ? state.displayAll.slice(0, state.displayAll.length - 1).concat(e.target.value)\r\n              : state.displayAll.concat(e.target.value),\r\n          displayCur: (Number(state.displayCur) === 0 && state.displayCur.toString().length === 1) || (!isFinite(state.lastInput) && state.lastInput !== \".\") ? e.target.value : state.displayCur.concat(e.target.value),\r\n          lastInput: e.target.value,\r\n          lastInputType: \"digit\",\r\n          twoConsecutiveOperators: false,\r\n        }),\r\n        () => {\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSpecialDigit(e) {\r\n    if (isFinite(e.target.value)) {\r\n      if (this.state.lastResult !== \"\") this.handleClear(false);\r\n      if (this.state.lastInput !== \")\" && this.state.lastInput !== \"!\" && this.state.lastInput !== \"%\" && this.state.decimalAlreadyUsed !== true && this.state.lastInputType !== \"digit\") {\r\n        if (Number(e.target.value) < 0) {\r\n          document.getElementById(\"subtract\").click();\r\n          let val = {\r\n            target: {\r\n              value: Math.abs(Number(e.target.value)),\r\n            },\r\n          };\r\n          setTimeout(() => {\r\n            this.handleSpecialDigit(val);\r\n          }, 0);\r\n        } else if (e.target.value === \"0.\") {\r\n          document.getElementById(\"decimal\").click();\r\n        } else if (Number(e.target.value) === 0) {\r\n          document.getElementById(\"zero\").click();\r\n        } else {\r\n          this.setState(\r\n            (state) => ({\r\n              displayAll: Number(state.displayAll) === 0 ? e.target.value : state.displayAll.concat(e.target.value),\r\n              displayCur: state.lastInput === \" - \" ? -e.target.value : e.target.value,\r\n              lastInput: e.target.value[e.target.value.length - 1],\r\n              lastInputType: \"digit\",\r\n              decimalAlreadyUsed: /\\./.test(e.target.value),\r\n              twoConsecutiveOperators: false,\r\n            }),\r\n            () => {\r\n              saveState(this.state);\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDecimal() {\r\n    if ((this.state.lastInputType === \"digit\" || this.state.lastInputType === \"operator\" || this.state.lastInput === \"\" || this.state.lastInput === \"(\") && this.state.decimalAlreadyUsed === false) {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(isFinite(state.lastInput) && this.state.displayAll !== \"\" ? \".\" : \"0.\") : /\\./.test(state.lastResult) ? \"\".concat(\"0.\") : \"\".concat(state.lastResult).concat(\".\"),\r\n          displayCur: state.lastResult === \"\" ? (isFinite(state.lastInput) ? state.displayCur.concat(\".\") : \"0.\") : /\\./.test(state.lastResult) ? \"\".concat(\"0.\") : \"\".concat(state.lastResult).concat(\".\"),\r\n          lastInput: \".\",\r\n          lastInputType: \"decimal\",\r\n          decimalAlreadyUsed: true,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: \"\",\r\n        }),\r\n        () => {\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSquare() {\r\n    document.getElementById(\"exponentiation\").click();\r\n    setTimeout(() => {\r\n      if (this.state.lastInput === \" ^ \") {\r\n        document.getElementById(\"two\").click();\r\n        setTimeout(\r\n          () =>\r\n            this.setState((state) => ({\r\n              displayCur: calculate(state, state.displayAll),\r\n            })),\r\n          0\r\n        );\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  handleSquareRoot() {\r\n    document.getElementById(\"anyRoot\").click();\r\n    setTimeout(() => {\r\n      if (this.state.lastInput === \" yroot \") {\r\n        document.getElementById(\"two\").click();\r\n        setTimeout(\r\n          () =>\r\n            this.setState((state) => ({\r\n              displayCur: calculate(state, state.displayAll),\r\n            })),\r\n          0\r\n        );\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  handleLog(e) {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(e.target.value) : \"\".concat(state.lastResult).concat(e.target.value),\r\n          lastInput: e.target.value,\r\n          lastInputType: \"operator\",\r\n          decimalAlreadyUsed: false,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: \"\",\r\n          lastOperator: e.target.value,\r\n        }),\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleLog10() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(\" log base 10\") : \"\".concat(state.lastResult).concat(\" log base 10\"),\r\n          lastInput: \"10\",\r\n          lastInputType: \"digit\",\r\n          decimalAlreadyUsed: false,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: \"\",\r\n          lastOperator: \" log base \",\r\n        }),\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleLogE() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(` log base ${Math.E}`) : \"\".concat(state.lastResult).concat(` log base ${Math.E}`),\r\n          lastInput: `${Math.E}`,\r\n          lastInputType: \"digit\",\r\n          decimalAlreadyUsed: true,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: \"\",\r\n          lastOperator: \" log base \",\r\n        }),\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleFactorial() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\" || (this.state.lastInput === \"%\" && !this.state.displayAll.match(/!%$/))) {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(\"!\") : \"\".concat(state.lastResult).concat(\"!\"),\r\n          lastInput: \"!\",\r\n          lastInputType: \"!\",\r\n          decimalAlreadyUsed: false,\r\n          lastResult: \"\",\r\n          lastOperator: \"!\",\r\n        }),\r\n        () => {\r\n          let result = calculate(this.state, this.state.displayAll);\r\n          this.setState({\r\n            displayCur: result,\r\n          });\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleTrigonometry(e) {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \"!\" || this.state.lastInput === \"%\" || this.state.lastInput === \")\" || this.state.lastInput === \".\") {\r\n      let result = trigonometryInDegrees(e.target.value, this.state);\r\n      this.setState(\r\n        {\r\n          displayAll: result,\r\n          lastInput: \")\",\r\n          lastInputType: \"parenthesis\",\r\n          decimalAlreadyUsed: false,\r\n          lastResult: \"\",\r\n          lastOperator: \"trigonometry\",\r\n        },\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handlePercentage() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\" || (this.state.lastInput === \"!\" && !this.state.displayAll.match(/%!$/))) {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(\"%\") : \"\".concat(state.lastResult).concat(\"%\"),\r\n          lastInput: \"%\",\r\n          lastInputType: \"%\",\r\n          decimalAlreadyUsed: false,\r\n          lastResult: \"\",\r\n          lastOperator: \"%\",\r\n        }),\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChangeSign() {\r\n    if (this.state.lastOperator !== \" log base \" && this.state.lastOperator !== \" mod \") {\r\n      let result = changeSign(this.state);\r\n      this.setState(\r\n        {\r\n          displayAll: result,\r\n          lastResult: \"\",\r\n        },\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAbs() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \"!\" || this.state.lastInput === \"%\" || this.state.lastInput === \")\" || this.state.lastInput === \".\") {\r\n      let result = abs(this.state);\r\n      this.setState(\r\n        {\r\n          displayAll: result,\r\n          lastInput: \")\",\r\n          lastInputType: \"parenthesis\",\r\n          decimalAlreadyUsed: false,\r\n          lastOperator: \"abs\",\r\n          lastResult: \"\",\r\n        },\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSwitchToDenominator() {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \"!\" || this.state.lastInput === \"%\" || this.state.lastInput === \")\" || this.state.lastInput === \".\") {\r\n      let result = switchToDenominator(this.state);\r\n      this.setState(\r\n        {\r\n          displayAll: result,\r\n          lastInput: \")\",\r\n          lastInputType: \"parenthesis\",\r\n          decimalAlreadyUsed: false,\r\n          lastOperator: \"denominator\",\r\n          lastResult: \"\",\r\n        },\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleModulo(e) {\r\n    if (this.state.lastInputType === \"digit\" || this.state.lastInput === \")\" || this.state.lastInput === \"!\" || this.state.lastInput === \"%\" || this.state.lastInput === \".\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? (state.lastInput === \".\" ? state.displayAll.concat(\"0\").concat(e.target.value) : state.displayAll.concat(e.target.value)) : \"\".concat(state.lastResult).concat(e.target.value),\r\n          lastInput: e.target.value,\r\n          lastInputType: \"operator\",\r\n          decimalAlreadyUsed: false,\r\n          lastResult: \"\",\r\n          lastOperator: e.target.value,\r\n        }),\r\n        () => {\r\n          this.setState((state) => ({\r\n            displayCur: calculate(state, state.displayAll),\r\n          }));\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleLeftParenthesis(e) {\r\n    if (this.state.lastInputType === \"operator\" || this.state.lastInput === \"(\" || this.state.displayAll === \"\" || this.state.displayAll === \" - \" || this.state.lastResult !== \"\") {\r\n      this.setState(\r\n        (state) => ({\r\n          displayAll: state.lastResult === \"\" ? state.displayAll.concat(e.target.value) : \"\".concat(e.target.value),\r\n          displayCur: state.lastResult === \"\" ? state.displayCur : \"\",\r\n          lastInput: \"(\",\r\n          lastInputType: \"parenthesis\",\r\n          decimalAlreadyUsed: false,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: \"\",\r\n          parenthesesDelta: state.parenthesesDelta + 1,\r\n          lastOperator: e.target.value,\r\n        }),\r\n        () => {\r\n          saveState(this.state);\r\n        }\r\n      );\r\n    }\r\n  }\r\n  handleRightParenthesis(e) {\r\n    if (this.state.parenthesesDelta > 0) {\r\n      if (this.state.lastInputType === \"digit\" || this.state.lastInput === \"!\" || this.state.lastInput === \"%\" || this.state.lastInput === \")\" || this.state.lastInput === \".\") {\r\n        this.setState(\r\n          (state) => ({\r\n            displayAll: state.lastResult === \"\" ? state.displayAll.concat(e.target.value) : \"\".concat(e.target.value),\r\n            displayCur: calculate(state, state.displayAll),\r\n            lastInput: \")\",\r\n            lastInputType: \"parenthesis\",\r\n            decimalAlreadyUsed: false,\r\n            parenthesesDelta: state.parenthesesDelta - 1,\r\n            lastOperator: e.target.value,\r\n          }),\r\n          () => {\r\n            saveState(this.state);\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  handleEquals() {\r\n    if (this.state.lastResult === \"\") {\r\n      let result = calculate(this.state, this.state.displayAll);\r\n      this.setState(\r\n        {\r\n          displayAll: displayAllExpression.concat(\" = \").concat(result < 0 ? ` - ${Math.abs(result)}` : `${result}`),\r\n          displayCur: result,\r\n          lastInput: \"\",\r\n          lastInputType: \"digit\",\r\n          decimalAlreadyUsed: false,\r\n          twoConsecutiveOperators: false,\r\n          lastResult: result < 0 ? ` - ${Math.abs(result)}` : `${result}`,\r\n          parenthesesDelta: 0,\r\n          lastOperator: \"equal\",\r\n        },\r\n        () => {\r\n          saveState(this.state);\r\n          alertStatus.negativeFactor = false;\r\n          alertStatus.nonIntegerFactor = false;\r\n          alertStatus.negativeLog = false;\r\n          alertStatus.zeroAsDenominator = false;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCopyToClipboard() {\r\n    let copyResult = document.getElementById(\"display\").innerText;\r\n    navigator.clipboard.writeText(copyResult);\r\n  }\r\n\r\n  handleCopyToMS(e) {\r\n    this.setState((state) => ({\r\n      [e.target.value]: state.displayCur,\r\n    }));\r\n  }\r\n\r\n  handleResetMS(e) {\r\n    this.setState({\r\n      [e.target.value]: \"Memory Slot \".concat(e.target.value[10]),\r\n    });\r\n  }\r\n\r\n  handleColorTheme() {\r\n    $(\"#display\").animate({ opacity: 0 }, 1000);\r\n    $(\"#displayAll\").animate({ opacity: 0 }, 1000);\r\n    $(\"#copy\").fadeOut(1000);\r\n    $(\"#colorTheme\").fadeOut(1000);\r\n\r\n    $(\".colorThemes\").delay(500).animate(\r\n      {\r\n        width: \"toggle\",\r\n        height: \"toggle\",\r\n      },\r\n      500\r\n    );\r\n    // $(\".colorThemes\").fadeToggle(2000);\r\n    // $(\".colorThemes\").toggle(1000);\r\n    // $(\".colorThemes\").slideDown(500);\r\n    // $(\".colorThemes\").fadeIn(1500);\r\n    // $(\".colorThemes\").animate(\r\n    //   {\r\n    //     width: \"toggle\",\r\n    //     height: \"toggle\",\r\n    //   },\r\n    //   500\r\n    // );\r\n  }\r\n\r\n  handleChangeColor(e) {\r\n    const root = document.documentElement;\r\n    root.style.setProperty(\"--hue-rotate\", `hue-rotate(${e.target.value}deg)`);\r\n    root.style.setProperty(\"--second-color\", `${e.target.value < 340 ? \"white\" : \"rgb(59, 68, 75)\"}`);\r\n    $(\".colorThemes\").fadeOut(500);\r\n    $(\"#colorTheme\").fadeIn(2000);\r\n    $(\"#copy\").fadeIn(2000);\r\n    $(\"#display\").animate({ opacity: 1 }, 2000);\r\n    $(\"#displayAll\").animate({ opacity: 1 }, 2000);\r\n  }\r\n\r\n  handlePreviewColorTheme(e) {\r\n    const root = document.documentElement;\r\n    root.style.setProperty(\"--hue-rotate\", `hue-rotate(${e.target.value}deg)`);\r\n    root.style.setProperty(\"--second-color\", `${e.target.value < 340 ? \"white\" : \"rgb(59, 68, 75)\"}`);\r\n  }\r\n\r\n  componentDidMount() {\r\n    $(\".colorThemes\").hide();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let displayAll = document.getElementById(\"displayAll\");\r\n    displayAll.scrollTop = displayAll.scrollHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"landscape\">\r\n          <div id=\"rotate-msg\">Rotate your device!*</div>\r\n\r\n          <img src={require(\"../src/styles/kitty.png\")} />\r\n          <div id=\"rotate-joking\">*to use landscape mode - rotate both your device and your head!</div>\r\n        </div>\r\n        <div id=\"portrait\">\r\n          <div id=\"backgroundForTopButtons\">\r\n            <div id=\"calculatorForTopButtons\">\r\n              <TopButtons changeColorTheme={this.handleChangeColor} chooseColorTheme={this.handleColorTheme} copy={this.handleCopyToClipboard} previewColorTheme={this.handlePreviewColorTheme} />\r\n            </div>\r\n          </div>\r\n          <div id=\"background\">\r\n            <div id=\"calculator\" className=\"container-fluid\">\r\n              <Display ops={this.state.displayAll} cur={this.state.displayCur} />\r\n              <Buttons\r\n                clear={this.handleClear}\r\n                operator={this.handleOperator}\r\n                digit={this.handleDigit}\r\n                equals={this.handleEquals}\r\n                decimal={this.handleDecimal}\r\n                square={this.handleSquare}\r\n                squareRoot={this.handleSquareRoot}\r\n                previousState={this.handlePreviousState}\r\n                specialDigit={this.handleSpecialDigit}\r\n                log10={this.handleLog10}\r\n                log={this.handleLog}\r\n                logE={this.handleLogE}\r\n                factorial={this.handleFactorial}\r\n                trigonometry={this.handleTrigonometry}\r\n                percentage={this.handlePercentage}\r\n                changeSign={this.handleChangeSign}\r\n                abs={this.handleAbs}\r\n                switchToDenominator={this.handleSwitchToDenominator}\r\n                modulo={this.handleModulo}\r\n                leftParenthesis={this.handleLeftParenthesis}\r\n                rightParenthesis={this.handleRightParenthesis}\r\n                parenthesesDelta={this.state.parenthesesDelta}\r\n              />\r\n              <MemorySlots CopyToMS={this.handleCopyToMS} specialDigit={this.handleSpecialDigit} memorySlot1={this.state.memorySlot1} memorySlot2={this.state.memorySlot2} memorySlot3={this.state.memorySlot3} resetMS={this.handleResetMS} />\r\n            </div>\r\n\r\n            <Footer />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass TopButtons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    let colorThemes = [];\r\n    for (let i = 0; i < 720; i += 40) {\r\n      colorThemes.push(\r\n        <div key={`div-${i}`}>\r\n          <button id={`style${i}`} value={i} className=\"colorThemes\" onClick={this.props.changeColorTheme} onMouseOver={this.props.previewColorTheme}>\r\n            <i className=\"fa-solid fa-calculator\"></i>\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <button id=\"colorTheme\" onClick={this.props.chooseColorTheme}>\r\n          <i className=\"fa-solid fa-calculator\"></i>\r\n        </button>\r\n        <div id=\"themes-row\">{colorThemes}</div>\r\n        <button id=\"copy\" onClick={this.props.copy}>\r\n          <i className=\"fa-solid fa-copy\"></i>\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass Display extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"displayBox\" className=\"row\">\r\n          <div id=\"display\" className=\"col-12\">\r\n            {this.props.cur}\r\n          </div>\r\n          <div id=\"displayAll\" className=\"col-12\">\r\n            {this.props.ops}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"button-pad\" className=\"row\">\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"clear\" className=\"main-btn\" onClick={() => this.props.clear(true)}>\r\n            AC\r\n          </button>\r\n          <button id=\"pi\" value={Math.PI} className=\"tertiary-btn\" onClick={this.props.specialDigit}>\r\n            π\r\n          </button>\r\n          <button id=\"e\" value={Math.E} className=\"tertiary-btn\" onClick={this.props.specialDigit}>\r\n            e\r\n          </button>\r\n          <button id=\"random\" value={Math.random()} className=\"tertiary-btn long-text-btn\" onClick={this.props.specialDigit}>\r\n            rand\r\n          </button>\r\n          <button id=\"denominator\" className=\"tertiary-btn\" onClick={this.props.switchToDenominator}>\r\n            <sup>1</sup>/<sub>x</sub>\r\n          </button>\r\n          <button id=\"factorial\" className=\"tertiary-btn\" onClick={this.props.factorial}>\r\n            n!\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"sin\" value=\"sin\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            sin\r\n          </button>\r\n          <button id=\"log10\" className=\"secondary-btn long-text-btn\" onClick={this.props.log10}>\r\n            log<sub>10</sub>\r\n          </button>\r\n          <button id=\"log\" value=\" log base \" className=\"secondary-btn long-text-btn\" onClick={this.props.log}>\r\n            log<sub>x</sub>\r\n          </button>\r\n          <button id=\"logE\" className=\"secondary-btn long-text-btn\" onClick={this.props.logE}>\r\n            log<sub>e</sub>\r\n          </button>\r\n          <button id=\"abs\" className=\"secondary-btn long-text-btn\" onClick={this.props.abs}>\r\n            | x |\r\n          </button>\r\n          <button id=\"modulo\" value=\" mod \" className=\"tertiary-btn long-text-btn\" onClick={this.props.modulo}>\r\n            mod\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"cos\" value=\"cos\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            cos\r\n          </button>\r\n          <button id=\"leftParenthesis\" value=\"(\" className=\"secondary-btn\" parentheses-delta={this.props.parenthesesDelta === 0 ? \"\" : this.props.parenthesesDelta} onClick={this.props.leftParenthesis}>\r\n            (\r\n          </button>\r\n          <button id=\"rightParenthesis\" value=\")\" className=\"secondary-btn\" onClick={this.props.rightParenthesis}>\r\n            )\r\n          </button>\r\n          <button id=\"percentage\" className=\"secondary-btn\" onClick={this.props.percentage}>\r\n            %\r\n          </button>\r\n          <button id=\"square\" value=\"S\" className=\"secondary-btn\" onClick={this.props.square}>\r\n            x<sup>2</sup>\r\n          </button>\r\n          <button id=\"squareRoot\" value=\"R\" className=\"tertiary-btn\" onClick={this.props.squareRoot}>\r\n            <sup>2</sup>√\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"tan\" value=\"tan\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            tan\r\n          </button>\r\n          <button id=\"seven\" value=\"7\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            7\r\n          </button>\r\n          <button id=\"eight\" value=\"8\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            8\r\n          </button>\r\n          <button id=\"nine\" value=\"9\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            9\r\n          </button>\r\n          <button id=\"exponentiation\" value=\" ^ \" className=\"secondary-btn\" onClick={this.props.operator}>\r\n            x<sup>y</sup>\r\n          </button>\r\n          <button id=\"anyRoot\" value=\" yroot \" className=\"tertiary-btn\" onClick={this.props.operator}>\r\n            <sup>y</sup>√\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"cot\" value=\"cot\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            cot\r\n          </button>\r\n          <button id=\"four\" value=\"4\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            4\r\n          </button>\r\n          <button id=\"five\" value=\"5\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            5\r\n          </button>\r\n          <button id=\"six\" value=\"6\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            6\r\n          </button>\r\n          <button id=\"multiply\" value=\" * \" className=\"secondary-btn main-operators\" onClick={this.props.operator}>\r\n            <i className=\"fa-solid fa-xmark\"></i>\r\n          </button>\r\n          <button id=\"divide\" value=\" / \" className=\"tertiary-btn main-operators\" onClick={this.props.operator}>\r\n            <i className=\"fa-solid fa-divide\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"sec\" value=\"sec\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            sec\r\n          </button>\r\n          <button id=\"one\" value=\"1\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            1\r\n          </button>\r\n          <button id=\"two\" value=\"2\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            2\r\n          </button>\r\n          <button id=\"three\" value=\"3\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            3\r\n          </button>\r\n          <button id=\"add\" value=\" + \" className=\"secondary-btn main-operators\" onClick={this.props.operator}>\r\n            <i className=\"fa-solid fa-plus\"></i>\r\n          </button>\r\n          <button id=\"subtract\" value=\" - \" className=\"tertiary-btn main-operators\" onClick={this.props.operator}>\r\n            <i className=\"fa-solid fa-minus\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <button id=\"csc\" value=\"csc\" className=\"tertiary-btn long-text-btn\" onClick={this.props.trigonometry}>\r\n            csc\r\n          </button>\r\n          <button id=\"sign\" className=\"tertiary-btn\" onClick={this.props.changeSign}>\r\n            <sup>+</sup>/<sub>−</sub>\r\n          </button>\r\n          <button id=\"zero\" value=\"0\" className=\"digits-btn\" onClick={this.props.digit}>\r\n            0\r\n          </button>\r\n          <button id=\"decimal\" className=\"tertiary-btn main-operators\" onClick={this.props.decimal}>\r\n            .\r\n          </button>\r\n          <button id=\"equals\" className=\"main-btn main-operators equal-font-size\" onClick={this.props.equals}>\r\n            =\r\n          </button>\r\n          <button id=\"delete\" className=\"main-btn\" onClick={this.props.previousState}>\r\n            <i className=\"fa-solid fa-delete-left\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass MemorySlots extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"memorySlot\" className=\"row\">\r\n        <div className=\"singleMemorySlot col-12 d-flex justify-content-center\">\r\n          <button id=\"CopyToMS1\" value=\"memorySlot1\" className=\"ms-btn\" onClick={this.props.CopyToMS}>\r\n            <i className=\"fa-solid fa-file-export\"></i>\r\n          </button>\r\n          <div id=\"memorySlot1\" className={this.props.memorySlot1 === \"Memory Slot 1\" ? \"ms-text\" : \"saved-result\"}>\r\n            {this.props.memorySlot1}\r\n          </div>\r\n          <button id=\"copyFromMS1\" value={this.props.memorySlot1} className=\"ms-btn\" onClick={this.props.specialDigit}>\r\n            <i className=\"fa-solid fa-file-arrow-up\"></i>\r\n          </button>\r\n          <button id=\"resetMS1\" value=\"memorySlot1\" className=\"ms-btn\" onClick={this.props.resetMS}>\r\n            <i className=\"fa-solid fa-trash-can\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"singleMemorySlot col-12 d-flex justify-content-center\">\r\n          <button id=\"CopyToMS2\" value=\"memorySlot2\" className=\"ms-btn\" onClick={this.props.CopyToMS}>\r\n            <i className=\"fa-solid fa-file-export\"></i>\r\n          </button>\r\n          <div id=\"memorySlot2\" className={this.props.memorySlot2 === \"Memory Slot 2\" ? \"ms-text\" : \"saved-result\"}>\r\n            {this.props.memorySlot2}\r\n          </div>\r\n          <button id=\"copyFromMS2\" value={this.props.memorySlot2} className=\"ms-btn\" onClick={this.props.specialDigit}>\r\n            <i className=\"fa-solid fa-file-arrow-up\"></i>\r\n          </button>\r\n          <button id=\"resetMS2\" value=\"memorySlot2\" className=\"ms-btn\" onClick={this.props.resetMS}>\r\n            <i className=\"fa-solid fa-trash-can\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"singleMemorySlot col-12 d-flex justify-content-center\">\r\n          <button id=\"CopyToMS3\" value=\"memorySlot3\" className=\"ms-btn\" onClick={this.props.CopyToMS}>\r\n            <i className=\"fa-solid fa-file-export\"></i>\r\n          </button>\r\n          <div id=\"memorySlot3\" className={this.props.memorySlot3 === \"Memory Slot 3\" ? \"ms-text\" : \"saved-result\"}>\r\n            {this.props.memorySlot3}\r\n          </div>\r\n          <button id=\"copyFromMS3\" value={this.props.memorySlot3} className=\"ms-btn\" onClick={this.props.specialDigit}>\r\n            <i className=\"fa-solid fa-file-arrow-up\"></i>\r\n          </button>\r\n          <button id=\"resetMS3\" value=\"memorySlot3\" className=\"ms-btn\" onClick={this.props.resetMS}>\r\n            <i className=\"fa-solid fa-trash-can\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div id=\"footer\">\r\n        ~ eval () function wasn't used in the scope of this project\r\n        <br />~ coded in: HTML, CSS, JavaScript, React, jQuery, Bootstrap and SASS\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",["75","76"],[],"// next steps:\r\n// -- continue designing from footer for desktop\r\n// - update for larger screens\r\n// - update google table handlers on github\r\n\r\nimport { factorial } from \"./factorial\";\r\nimport { FixIncompleteInputs, displayAllExpression } from \"./FixIncompleteInputs\";\r\nimport $ from \"jquery\";\r\nimport { validInputLog, invalidInputLog, validInputDenominator, invalidInputDenominator } from \"./alertStatus\";\r\n\r\nexport default function calculate(state, expression) {\r\n  FixIncompleteInputs(state, expression);\r\n  let expr = displayAllExpression;\r\n  expr = expr === \"\" ? convertDisplayAllIntoArray(\"0\") : convertDisplayAllIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayAllIntoArray(string) {\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|-\\d+\\.|\\d+\\.|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayAllArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayAllArray.unshift(\"(\");\r\n  displayAllArray.push(\")\");\r\n  return displayAllArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\"abs\", \"abs\"]);\r\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\r\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\r\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\r\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\r\n  expr = calculateInOrder(expr, [\" mod \", \" log base \"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nlet count = 0;\r\nexport function findNegativeValues(arr) {\r\n  let negativeIndex = \"\";\r\n  if (arr[0] === \" - \") {\r\n    let newArr = [-1, \" * \"].concat(arr.slice(1));\r\n    return findNegativeValues(newArr);\r\n  } else {\r\n    negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && typeof arr[ind - 1] === \"string\" && arr[ind - 1] !== \"!\" && arr[ind - 1] !== \"%\" && typeof arr[ind + 1] === \"number\");\r\n    if (negativeIndex !== -1) {\r\n      let newArr = arr\r\n        .slice(0, negativeIndex)\r\n        .concat(arr[negativeIndex + 1] * -1)\r\n        .concat(arr.slice(negativeIndex + 2));\r\n      return findNegativeValues(newArr);\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  if (arr.some((elem) => elem === \"invalid input\")) {\r\n    arr = [\"invalid input\"];\r\n  }\r\n\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\r\n\r\n    let currentResult =\r\n      currentOperator === \"abs\"\r\n        ? Math.abs(currentOperation[currentOperation.length - 1])\r\n        : currentOperator === \"sin\"\r\n        ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cos\"\r\n        ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"tan\"\r\n        ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cot\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"sec\"\r\n        ? 1 / Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"csc\"\r\n        ? 1 / Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"!\"\r\n        ? factorial(currentOperation[0])\r\n        : currentOperator === \"%\"\r\n        ? currentOperation[0] / 100\r\n        : currentOperator === \" log base \"\r\n        ? isFinite(Math.log(currentOperation[0]) / Math.log(currentOperation[2])) && currentOperation[2] !== 0\r\n          ? validInputLog(currentOperation)\r\n          : invalidInputLog()\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[2] === 0\r\n          ? currentOperation[0]\r\n          : currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[2] === 0\r\n          ? invalidInputDenominator()\r\n          : validInputDenominator(currentOperation)\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\r\n\r\n    let result =\r\n      currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\"\r\n        ? arr\r\n            .slice(0, operatorIndex)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2))\r\n        : currentOperator === \"!\" || currentOperator === \"%\"\r\n        ? arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 1))\r\n        : arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2));\r\n    console.log(\"result\", result);\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport function lastLegitSymbol(displayAll) {\r\n  let lastLegitSymbol = displayAll\r\n    .split(\"\")\r\n    .reverse()\r\n    .findIndex((elem) => /\\d|\\(|\\)|!|%/.test(elem));\r\n  return (lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayAll.length);\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeOneIntoAnother.js",[],[],{"ruleId":"77","severity":1,"message":"78","line":676,"column":11,"nodeType":"79","endLine":676,"endColumn":59},{"ruleId":"80","severity":1,"message":"81","line":724,"column":3,"nodeType":"82","messageId":"83","endLine":726,"endColumn":4},{"ruleId":"80","severity":1,"message":"81","line":753,"column":3,"nodeType":"82","messageId":"83","endLine":755,"endColumn":4},{"ruleId":"80","severity":1,"message":"81","line":773,"column":3,"nodeType":"82","messageId":"83","endLine":775,"endColumn":4},{"ruleId":"80","severity":1,"message":"81","line":925,"column":3,"nodeType":"82","messageId":"83","endLine":927,"endColumn":4},{"ruleId":"84","severity":1,"message":"85","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":9},{"ruleId":"84","severity":1,"message":"88","line":57,"column":5,"nodeType":"86","messageId":"87","endLine":57,"endColumn":10},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used."]