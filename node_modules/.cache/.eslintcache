[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js":"11"},{"size":246,"mtime":1666332524111,"results":"12","hashOfConfig":"13"},{"size":31761,"mtime":1669050559742,"results":"14","hashOfConfig":"13"},{"size":5323,"mtime":1668179863850,"results":"15","hashOfConfig":"13"},{"size":5373,"mtime":1668179817114,"results":"16","hashOfConfig":"13"},{"size":7348,"mtime":1669051385510,"results":"17","hashOfConfig":"13"},{"size":312,"mtime":1668012437190,"results":"18","hashOfConfig":"13"},{"size":1232,"mtime":1669046883534,"results":"19","hashOfConfig":"13"},{"size":9230,"mtime":1669052657625,"results":"20","hashOfConfig":"13"},{"size":2723,"mtime":1668793116541,"results":"21","hashOfConfig":"13"},{"size":1562,"mtime":1668670128822,"results":"22","hashOfConfig":"13"},{"size":3129,"mtime":1669050466801,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"rv6zox",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["60","61","62","63","64","65"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",["66","67","68","69","70","71"],[],"export function abs(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 0.5\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`abs(${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"abs stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"abs stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"abs stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",["72","73","74","75","76","77"],[],"export function switchToDenominator(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 1\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`1 / (${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`1 / (${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`1 / ${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"denominator stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`1 / (${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"denominator stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`1 / (${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"denominator stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`1 / (${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",["78","79"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",["80","81","82"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",["83","84","85","86"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":6,"column":10,"nodeType":"89","messageId":"90","endLine":6,"endColumn":20},{"ruleId":"87","severity":1,"message":"91","line":8,"column":22,"nodeType":"89","messageId":"90","endLine":8,"endColumn":47},{"ruleId":"87","severity":1,"message":"92","line":10,"column":21,"nodeType":"89","messageId":"90","endLine":10,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":448,"column":11,"nodeType":"95","messageId":"96","endLine":448,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":673,"column":3,"nodeType":"99","messageId":"100","endLine":675,"endColumn":4},{"ruleId":"97","severity":1,"message":"98","line":689,"column":3,"nodeType":"99","messageId":"100","endLine":691,"endColumn":4},{"ruleId":"101","severity":1,"message":"102","line":64,"column":29,"nodeType":"103","messageId":"104","endLine":64,"endColumn":30,"suggestions":"105"},{"ruleId":"101","severity":1,"message":"106","line":64,"column":34,"nodeType":"103","messageId":"104","endLine":64,"endColumn":35,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"108","line":64,"column":39,"nodeType":"103","messageId":"104","endLine":64,"endColumn":40,"suggestions":"109"},{"ruleId":"101","severity":1,"message":"102","line":64,"column":62,"nodeType":"103","messageId":"104","endLine":64,"endColumn":63,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"106","line":64,"column":67,"nodeType":"103","messageId":"104","endLine":64,"endColumn":68,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"108","line":64,"column":72,"nodeType":"103","messageId":"104","endLine":64,"endColumn":73,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"102","line":64,"column":29,"nodeType":"103","messageId":"104","endLine":64,"endColumn":30,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"106","line":64,"column":34,"nodeType":"103","messageId":"104","endLine":64,"endColumn":35,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"108","line":64,"column":39,"nodeType":"103","messageId":"104","endLine":64,"endColumn":40,"suggestions":"115"},{"ruleId":"101","severity":1,"message":"102","line":64,"column":62,"nodeType":"103","messageId":"104","endLine":64,"endColumn":63,"suggestions":"116"},{"ruleId":"101","severity":1,"message":"106","line":64,"column":67,"nodeType":"103","messageId":"104","endLine":64,"endColumn":68,"suggestions":"117"},{"ruleId":"101","severity":1,"message":"108","line":64,"column":72,"nodeType":"103","messageId":"104","endLine":64,"endColumn":73,"suggestions":"118"},{"ruleId":"87","severity":1,"message":"119","line":19,"column":53,"nodeType":"89","messageId":"90","endLine":19,"endColumn":74},{"ruleId":"87","severity":1,"message":"120","line":20,"column":8,"nodeType":"89","messageId":"90","endLine":20,"endColumn":9},{"ruleId":"87","severity":1,"message":"121","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":20},{"ruleId":"87","severity":1,"message":"122","line":1,"column":22,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"123","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":17},{"ruleId":"87","severity":1,"message":"123","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":17},{"ruleId":"87","severity":1,"message":"124","line":1,"column":21,"nodeType":"89","messageId":"90","endLine":1,"endColumn":39},{"ruleId":"87","severity":1,"message":"125","line":2,"column":45,"nodeType":"89","messageId":"90","endLine":2,"endColumn":63},{"ruleId":"126","severity":1,"message":"127","line":83,"column":3,"nodeType":"128","messageId":"129","endLine":83,"endColumn":28},"no-unused-vars","'validInput' is defined but never used.","Identifier","unusedVar","'finalDisplayAllChangeSign' is defined but never used.","'FixIncompleteInputs' is defined but never used.","no-dupe-keys","Duplicate key 'displayAll'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-escape","Unnecessary escape character: \\*.","Literal","unnecessaryEscape",["130","131"],"Unnecessary escape character: \\/.",["132","133"],"Unnecessary escape character: \\+.",["134","135"],["136","137"],["138","139"],["140","141"],["142","143"],["144","145"],["146","147"],["148","149"],["150","151"],["152","153"],"'addMissingParenthesis' is defined but never used.","'$' is defined but never used.","'expression' is defined but never used.","'findExpression' is defined but never used.","'calculate' is defined but never used.","'findNegativeValues' is defined but never used.","'expressionNegative' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",{"messageId":"154","fix":"155","desc":"156"},{"messageId":"157","fix":"158","desc":"159"},{"messageId":"154","fix":"160","desc":"156"},{"messageId":"157","fix":"161","desc":"159"},{"messageId":"154","fix":"162","desc":"156"},{"messageId":"157","fix":"163","desc":"159"},{"messageId":"154","fix":"164","desc":"156"},{"messageId":"157","fix":"165","desc":"159"},{"messageId":"154","fix":"166","desc":"156"},{"messageId":"157","fix":"167","desc":"159"},{"messageId":"154","fix":"168","desc":"156"},{"messageId":"157","fix":"169","desc":"159"},{"messageId":"154","fix":"170","desc":"156"},{"messageId":"157","fix":"171","desc":"159"},{"messageId":"154","fix":"172","desc":"156"},{"messageId":"157","fix":"173","desc":"159"},{"messageId":"154","fix":"174","desc":"156"},{"messageId":"157","fix":"175","desc":"159"},{"messageId":"154","fix":"176","desc":"156"},{"messageId":"157","fix":"177","desc":"159"},{"messageId":"154","fix":"178","desc":"156"},{"messageId":"157","fix":"179","desc":"159"},{"messageId":"154","fix":"180","desc":"156"},{"messageId":"157","fix":"181","desc":"159"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"186","text":"183"},{"range":"187","text":"185"},{"range":"188","text":"183"},{"range":"189","text":"185"},{"range":"190","text":"183"},{"range":"191","text":"185"},{"range":"192","text":"183"},{"range":"193","text":"185"},{"range":"194","text":"183"},{"range":"195","text":"185"},{"range":"196","text":"183"},{"range":"197","text":"185"},{"range":"198","text":"183"},{"range":"199","text":"185"},{"range":"200","text":"183"},{"range":"201","text":"185"},{"range":"202","text":"183"},{"range":"203","text":"185"},{"range":"204","text":"183"},{"range":"205","text":"185"},{"range":"206","text":"183"},{"range":"207","text":"185"},[3130,3131],"",[3130,3130],"\\",[3135,3136],[3135,3135],[3140,3141],[3140,3140],[3163,3164],[3163,3163],[3168,3169],[3168,3168],[3173,3174],[3173,3173],[3148,3149],[3148,3148],[3153,3154],[3153,3153],[3158,3159],[3158,3158],[3181,3182],[3181,3181],[3186,3187],[3186,3186],[3191,3192],[3191,3191]]