[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js":"11","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js":"12","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\logarithm.js":"13"},{"size":246,"mtime":1666332524111,"results":"14","hashOfConfig":"15"},{"size":32370,"mtime":1669234550266,"results":"16","hashOfConfig":"15"},{"size":2604,"mtime":1669217962596,"results":"17","hashOfConfig":"15"},{"size":2740,"mtime":1669218360951,"results":"18","hashOfConfig":"15"},{"size":7982,"mtime":1669227159161,"results":"19","hashOfConfig":"15"},{"size":312,"mtime":1668012437190,"results":"20","hashOfConfig":"15"},{"size":1202,"mtime":1669123284009,"results":"21","hashOfConfig":"15"},{"size":3121,"mtime":1669218420475,"results":"22","hashOfConfig":"15"},{"size":2472,"mtime":1669110792240,"results":"23","hashOfConfig":"15"},{"size":1203,"mtime":1669234193045,"results":"24","hashOfConfig":"15"},{"size":3804,"mtime":1669205527573,"results":"25","hashOfConfig":"15"},{"size":103,"mtime":1669123247328,"results":"26","hashOfConfig":"15"},{"size":472,"mtime":1669123501368,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"rv6zox",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["69","70","71","72","73","74"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",["75","76"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",["77","78"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",["79","80"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",["81","82","83"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",["84","85"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",["86","87"],[],"import calculate from \"./equals\";\r\nimport { expression, expressionNegative, regex, findExpression } from \"./findExpression\";\r\n\r\nexport let displayAllAfterChangeSign = \"\";\r\nlet displayAll = \"\";\r\n\r\nexport function changeSign(state) {\r\n  displayAll = state.lastResult !== \"\" ? state.lastResult : state.displayAll;\r\n\r\n  let changeOneIntoAnother = [\r\n    // the sign will be changed from positive to negative or vice versa for:\r\n    // 1) the expression not preceded by operators (minus here indicates negative value of the following number rather than an operator sign)\r\n    {\r\n      before: \"\\\\(\",\r\n      after: \"( - \",\r\n    },\r\n    {\r\n      before: \"\\\\( - \",\r\n      after: \"(\",\r\n    },\r\n    {\r\n      before: \"^\",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \"^ - \",\r\n      after: \"\",\r\n    },\r\n\r\n    // 2) the expression preceded by two consecutive operators:\r\n    {\r\n      before: \" -  - \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \" \\\\+  - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\*  - \",\r\n      after: \" * \",\r\n    },\r\n    {\r\n      before: \" \\\\/  - \",\r\n      after: \" / \",\r\n    },\r\n    {\r\n      before: \" \\\\^  - \",\r\n      after: \" ^ \",\r\n    },\r\n    {\r\n      before: \" yroot  - \",\r\n      after: \" yroot \",\r\n    },\r\n    // 3) the expression preceded by only one operator:\r\n    {\r\n      before: \" - \",\r\n      after: \" + \",\r\n    },\r\n    {\r\n      before: \" \\\\+ \",\r\n      after: \" - \",\r\n    },\r\n    {\r\n      before: \" \\\\* \",\r\n      after: \" *  - \",\r\n    },\r\n    {\r\n      before: \" \\\\/ \",\r\n      after: \" /  - \",\r\n    },\r\n    {\r\n      before: \" \\\\^ \",\r\n      after: \" ^  - \",\r\n    },\r\n    {\r\n      before: \" yroot \",\r\n      after: \" yroot  - \",\r\n    },\r\n  ];\r\n\r\n  findExpression(state); // determines the expression for which changeSign(state) function will be applied to\r\n\r\n  let arr = [];\r\n  for (let i = 0; i < changeOneIntoAnother.length; i++) {\r\n    arr.push(displayAll.match(new RegExp(`${changeOneIntoAnother[i][\"before\"]}${regex}$`)));\r\n  }\r\n  // console.log(\"displayAll\", displayAll);\r\n  // console.log(\"expression\", expression);\r\n  // console.log(\"final\", RegExp(displayAll.match(`${changeOneIntoAnother[2][\"before\"]}${expression}$`)));\r\n  // console.log(\"arr\", arr);\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== null) {\r\n      displayAllAfterChangeSign = displayAll.slice(0, arr[i].index).concat(changeOneIntoAnother[i][\"after\"]).concat(expression);\r\n      break;\r\n    }\r\n  }\r\n  return displayAllAfterChangeSign;\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\logarithm.js",[],[],{"ruleId":"88","severity":1,"message":"89","line":6,"column":10,"nodeType":"90","messageId":"91","endLine":6,"endColumn":20},{"ruleId":"88","severity":1,"message":"92","line":7,"column":33,"nodeType":"90","messageId":"91","endLine":7,"endColumn":48},{"ruleId":"88","severity":1,"message":"93","line":8,"column":22,"nodeType":"90","messageId":"91","endLine":8,"endColumn":47},{"ruleId":"88","severity":1,"message":"94","line":10,"column":21,"nodeType":"90","messageId":"91","endLine":10,"endColumn":40},{"ruleId":"95","severity":1,"message":"96","line":692,"column":3,"nodeType":"97","messageId":"98","endLine":694,"endColumn":4},{"ruleId":"95","severity":1,"message":"96","line":708,"column":3,"nodeType":"97","messageId":"98","endLine":710,"endColumn":4},{"ruleId":"88","severity":1,"message":"99","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":17},{"ruleId":"88","severity":1,"message":"100","line":2,"column":22,"nodeType":"90","messageId":"91","endLine":2,"endColumn":40},{"ruleId":"88","severity":1,"message":"99","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":17},{"ruleId":"88","severity":1,"message":"100","line":2,"column":22,"nodeType":"90","messageId":"91","endLine":2,"endColumn":40},{"ruleId":"88","severity":1,"message":"101","line":21,"column":8,"nodeType":"90","messageId":"91","endLine":21,"endColumn":9},{"ruleId":"88","severity":1,"message":"102","line":77,"column":5,"nodeType":"90","messageId":"91","endLine":77,"endColumn":10},{"ruleId":"88","severity":1,"message":"103","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":20},{"ruleId":"88","severity":1,"message":"104","line":1,"column":22,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"99","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"99","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":17},{"ruleId":"88","severity":1,"message":"105","line":1,"column":21,"nodeType":"90","messageId":"91","endLine":1,"endColumn":39},{"ruleId":"88","severity":1,"message":"99","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":17},{"ruleId":"88","severity":1,"message":"100","line":2,"column":22,"nodeType":"90","messageId":"91","endLine":2,"endColumn":40},"no-unused-vars","'validInput' is defined but never used.","Identifier","unusedVar","'finalDisplayAll' is defined but never used.","'finalDisplayAllChangeSign' is defined but never used.","'FixIncompleteInputs' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'calculate' is defined but never used.","'expressionNegative' is defined but never used.","'$' is defined but never used.","'count' is assigned a value but never used.","'expression' is defined but never used.","'findExpression' is defined but never used.","'findNegativeValues' is defined but never used."]