[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js":"11","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js":"12","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeOneIntoAnother.js":"13"},{"size":246,"mtime":1666332524111,"results":"14","hashOfConfig":"15"},{"size":36791,"mtime":1670413704602,"results":"16","hashOfConfig":"15"},{"size":783,"mtime":1669651714567,"results":"17","hashOfConfig":"15"},{"size":839,"mtime":1669657528829,"results":"18","hashOfConfig":"15"},{"size":6904,"mtime":1670268492058,"results":"19","hashOfConfig":"15"},{"size":312,"mtime":1668012437190,"results":"20","hashOfConfig":"15"},{"size":1169,"mtime":1669742187455,"results":"21","hashOfConfig":"15"},{"size":919,"mtime":1669657558403,"results":"22","hashOfConfig":"15"},{"size":804,"mtime":1669651704301,"results":"23","hashOfConfig":"15"},{"size":1036,"mtime":1669657495235,"results":"24","hashOfConfig":"15"},{"size":4385,"mtime":1669746796447,"results":"25","hashOfConfig":"15"},{"size":982,"mtime":1669646053840,"results":"26","hashOfConfig":"15"},{"size":3614,"mtime":1669657351165,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"rv6zox",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["70","71","72","73"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",["74","75"],[],"// next steps:\r\n// - changeStyle button\r\n// - what happens when the input is larger than the displayOps\r\n// - check how it looks on other phone\r\n// - update google table handlers on github\r\n\r\nimport { factorial } from \"./factorial\";\r\nimport { FixIncompleteInputs, displayAllExpression } from \"./FixIncompleteInputs\";\r\nimport $ from \"jquery\";\r\nimport { validInputLog, invalidInputLog, validInputDenominator, invalidInputDenominator } from \"./alertStatus\";\r\n\r\nexport default function calculate(state, expression) {\r\n  FixIncompleteInputs(state, expression);\r\n  let expr = displayAllExpression;\r\n  expr = expr === \"\" ? convertDisplayAllIntoArray(\"0\") : convertDisplayAllIntoArray(expr);\r\n  return findParenthesis(expr);\r\n}\r\n\r\nfunction convertDisplayAllIntoArray(string) {\r\n  let parseRegex = new RegExp(/-\\d+\\.\\d+|\\d+\\.\\d+|-\\d+\\.|\\d+\\.|sin|cos|tan|cot|sec|csc|abs| yroot | log base | mod |invalid input| \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D/, \"g\");\r\n  let displayAllArray = string.match(parseRegex).map((elem) => (isFinite(elem) ? Number(elem) : elem));\r\n  displayAllArray.unshift(\"(\");\r\n  displayAllArray.push(\")\");\r\n  return displayAllArray;\r\n}\r\n\r\nfunction findParenthesis(expr) {\r\n  let firstClosingIndex = expr.findIndex((parentesis) => parentesis === \")\");\r\n  if (firstClosingIndex !== -1) {\r\n    let exprInsideParantethes = expr.slice(0, firstClosingIndex);\r\n    let firstOpeningIndex = exprInsideParantethes.reverse().findIndex((parentesis) => parentesis === \"(\");\r\n    exprInsideParantethes = exprInsideParantethes.slice(0, firstOpeningIndex).reverse();\r\n    let resultInsideParentheses = calculateInsideParentheses(exprInsideParantethes);\r\n    expr = expr\r\n      .slice(0, firstClosingIndex - firstOpeningIndex - 1)\r\n      .concat(resultInsideParentheses)\r\n      .concat(expr.slice(firstClosingIndex + 1));\r\n    return findParenthesis(expr);\r\n  }\r\n  return expr[0];\r\n}\r\n\r\nfunction calculateInsideParentheses(expr) {\r\n  expr = findNegativeValues(expr);\r\n  expr = calculateInOrder(expr, [\"abs\", \"abs\"]);\r\n  expr = calculateInOrder(expr, [\"sin\", \"cos\"]);\r\n  expr = calculateInOrder(expr, [\"tan\", \"cot\"]);\r\n  expr = calculateInOrder(expr, [\"sec\", \"csc\"]);\r\n  expr = calculateInOrder(expr, [\"!\", \"%\"]);\r\n  expr = calculateInOrder(expr, [\" mod \", \" log base \"]);\r\n  expr = calculateInOrder(expr, [\" ^ \", \" yroot \"]);\r\n  expr = calculateInOrder(expr, [\" * \", \" / \"]);\r\n  expr = calculateInOrder(expr, [\" + \", \" - \"]);\r\n\r\n  return expr[0];\r\n}\r\n\r\nlet count = 0;\r\nexport function findNegativeValues(arr) {\r\n  let negativeIndex = \"\";\r\n  if (arr[0] === \" - \") {\r\n    let newArr = [-1, \" * \"].concat(arr.slice(1));\r\n    return findNegativeValues(newArr);\r\n  } else {\r\n    negativeIndex = arr.findIndex((elem, ind) => elem === \" - \" && typeof arr[ind - 1] === \"string\" && arr[ind - 1] !== \"!\" && arr[ind - 1] !== \"%\" && typeof arr[ind + 1] === \"number\");\r\n    if (negativeIndex !== -1) {\r\n      let newArr = arr\r\n        .slice(0, negativeIndex)\r\n        .concat(arr[negativeIndex + 1] * -1)\r\n        .concat(arr.slice(negativeIndex + 2));\r\n      return findNegativeValues(newArr);\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction calculateInOrder(arr, operators) {\r\n  if (arr.some((elem) => elem === \"invalid input\")) {\r\n    arr = [\"invalid input\"];\r\n  }\r\n\r\n  let operatorIndex = arr.findIndex((elem) => elem === operators[0] || elem === operators[1]);\r\n  let currentOperator = arr[operatorIndex];\r\n\r\n  if (operatorIndex !== -1) {\r\n    let currentOperation = operatorIndex === 0 ? arr.slice(0, operatorIndex + 2) : arr.slice(operatorIndex - 1, operatorIndex + 2);\r\n    console.log(\"currentOpertation\", currentOperation, \"operatorIndex\", operatorIndex, \"arr\", arr);\r\n\r\n    let currentResult =\r\n      currentOperator === \"abs\"\r\n        ? Math.abs(currentOperation[currentOperation.length - 1])\r\n        : currentOperator === \"sin\"\r\n        ? Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cos\"\r\n        ? Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"tan\"\r\n        ? Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"cot\"\r\n        ? 1 / Math.tan(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"sec\"\r\n        ? 1 / Math.cos(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"csc\"\r\n        ? 1 / Math.sin(currentOperation[currentOperation.length - 1] * (Math.PI / 180))\r\n        : currentOperator === \"!\"\r\n        ? factorial(currentOperation[0])\r\n        : currentOperator === \"%\"\r\n        ? currentOperation[0] / 100\r\n        : currentOperator === \" log base \"\r\n        ? isFinite(Math.log(currentOperation[0]) / Math.log(currentOperation[2])) && currentOperation[2] !== 0\r\n          ? validInputLog(currentOperation)\r\n          : invalidInputLog()\r\n        : currentOperator === \" mod \"\r\n        ? currentOperation[2] === 0\r\n          ? currentOperation[0]\r\n          : currentOperation[0] % currentOperation[2]\r\n        : currentOperator === \" yroot \"\r\n        ? Math.pow(currentOperation[0], 1 / currentOperation[2])\r\n        : currentOperator === \" ^ \"\r\n        ? Math.pow(currentOperation[0], currentOperation[2])\r\n        : currentOperator === \" * \"\r\n        ? currentOperation[0] * currentOperation[2]\r\n        : currentOperator === \" / \"\r\n        ? currentOperation[2] === 0\r\n          ? invalidInputDenominator()\r\n          : validInputDenominator(currentOperation)\r\n        : currentOperator === \" + \"\r\n        ? currentOperation[0] + currentOperation[2]\r\n        : currentOperation[0] - currentOperation[2];\r\n    console.log(\"im here\", arr, \"currentOperator\", currentOperator, \"currentOperation\", currentOperation, \"currentResult\", currentResult);\r\n\r\n    let result =\r\n      currentOperator === \"abs\" || currentOperator === \"sin\" || currentOperator === \"cos\" || currentOperator === \"tan\" || currentOperator === \"cot\" || currentOperator === \"sec\" || currentOperator === \"csc\"\r\n        ? arr\r\n            .slice(0, operatorIndex)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2))\r\n        : currentOperator === \"!\" || currentOperator === \"%\"\r\n        ? arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 1))\r\n        : arr\r\n            .slice(0, operatorIndex - 1)\r\n            .concat(currentResult)\r\n            .concat(arr.slice(operatorIndex + 2));\r\n    console.log(\"result\", result);\r\n    return calculateInOrder(result, operators);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport function lastLegitSymbol(displayAll) {\r\n  let lastLegitSymbol = displayAll\r\n    .split(\"\")\r\n    .reverse()\r\n    .findIndex((elem) => /\\d|\\(|\\)|!|%/.test(elem));\r\n  return (lastLegitSymbol = lastLegitSymbol !== -1 ? lastLegitSymbol : displayAll.length);\r\n}\r\n",[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\alertStatus.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeOneIntoAnother.js",[],[],{"ruleId":"76","severity":1,"message":"77","line":664,"column":3,"nodeType":"78","messageId":"79","endLine":666,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":690,"column":3,"nodeType":"78","messageId":"79","endLine":692,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":725,"column":3,"nodeType":"78","messageId":"79","endLine":727,"endColumn":4},{"ruleId":"76","severity":1,"message":"77","line":877,"column":3,"nodeType":"78","messageId":"79","endLine":879,"endColumn":4},{"ruleId":"80","severity":1,"message":"81","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":9},{"ruleId":"80","severity":1,"message":"84","line":58,"column":5,"nodeType":"82","messageId":"83","endLine":58,"endColumn":10},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'count' is assigned a value but never used."]