[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10"},{"size":246,"mtime":1666332524111,"results":"11","hashOfConfig":"12"},{"size":31329,"mtime":1668669826597,"results":"13","hashOfConfig":"12"},{"size":5323,"mtime":1668179863850,"results":"14","hashOfConfig":"12"},{"size":5373,"mtime":1668179817114,"results":"15","hashOfConfig":"12"},{"size":7176,"mtime":1668669732935,"results":"16","hashOfConfig":"12"},{"size":312,"mtime":1668012437190,"results":"17","hashOfConfig":"12"},{"size":690,"mtime":1668012563790,"results":"18","hashOfConfig":"12"},{"size":6414,"mtime":1668180128622,"results":"19","hashOfConfig":"12"},{"size":5846,"mtime":1668669699327,"results":"20","hashOfConfig":"12"},{"size":1562,"mtime":1668670128822,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"rv6zox",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["56","57","58","59","60","61"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",["62","63","64","65","66","67"],[],"export function abs(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 0.5\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`abs(${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"abs stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"abs stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"abs stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",["68","69","70","71","72","73"],[],"export function switchToDenominator(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 1\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`1 / (${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`1 / (${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`1 / ${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"denominator stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`1 / (${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"denominator stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`1 / (${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"denominator stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`1 / (${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",["74","75","76","77","78","79","80"],[],"export let finalDisplayAll = \"\";\r\n\r\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"trigonometry stage 0.5\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n    console.log(\"trigonometry stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"trigonometry stage 1\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    finalDisplayAll = state.displayAll.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"trigonometry stage 2\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayAll.slice(firstOpeningIndex)}`);\r\n    return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"trigonometry stage 3\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.1\");\r\n      let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n      finalDisplayAll = displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      finalDisplayAll = displayAll.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\r\n\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.2\");\r\n      let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n      finalDisplayAll =\r\n        lastNegativeNumIndex !== 0\r\n          ? displayAll\r\n              .slice(0, lastNegativeNumIndex)\r\n              .concat(\" + \")\r\n              .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n          : displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else {\r\n      console.log(\"trigonometry stage 3.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      finalDisplayAll = displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n      return calculateResult;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNumIndex = state.displayAll.match(regexNum).index;\r\n    finalDisplayAll = state.displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayAll.match(regexNum)})`);\r\n    return \"\";\r\n  }\r\n}\r\n\r\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\r\n  let reciprocal = {\r\n    cot: \"tan\",\r\n    sec: \"cos\",\r\n    csc: \"sin\",\r\n  };\r\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n  return calculateResult().toString();\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",["81"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],{"ruleId":"82","severity":1,"message":"83","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":9},{"ruleId":"82","severity":1,"message":"86","line":8,"column":22,"nodeType":"84","messageId":"85","endLine":8,"endColumn":47},{"ruleId":"82","severity":1,"message":"87","line":10,"column":21,"nodeType":"84","messageId":"85","endLine":10,"endColumn":40},{"ruleId":"88","severity":1,"message":"89","line":446,"column":11,"nodeType":"90","messageId":"91","endLine":446,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":665,"column":3,"nodeType":"94","messageId":"95","endLine":667,"endColumn":4},{"ruleId":"92","severity":1,"message":"93","line":681,"column":3,"nodeType":"94","messageId":"95","endLine":683,"endColumn":4},{"ruleId":"96","severity":1,"message":"97","line":64,"column":29,"nodeType":"98","messageId":"99","endLine":64,"endColumn":30,"suggestions":"100"},{"ruleId":"96","severity":1,"message":"101","line":64,"column":34,"nodeType":"98","messageId":"99","endLine":64,"endColumn":35,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"103","line":64,"column":39,"nodeType":"98","messageId":"99","endLine":64,"endColumn":40,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"97","line":64,"column":62,"nodeType":"98","messageId":"99","endLine":64,"endColumn":63,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"101","line":64,"column":67,"nodeType":"98","messageId":"99","endLine":64,"endColumn":68,"suggestions":"106"},{"ruleId":"96","severity":1,"message":"103","line":64,"column":72,"nodeType":"98","messageId":"99","endLine":64,"endColumn":73,"suggestions":"107"},{"ruleId":"96","severity":1,"message":"97","line":64,"column":29,"nodeType":"98","messageId":"99","endLine":64,"endColumn":30,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"101","line":64,"column":34,"nodeType":"98","messageId":"99","endLine":64,"endColumn":35,"suggestions":"109"},{"ruleId":"96","severity":1,"message":"103","line":64,"column":39,"nodeType":"98","messageId":"99","endLine":64,"endColumn":40,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"97","line":64,"column":62,"nodeType":"98","messageId":"99","endLine":64,"endColumn":63,"suggestions":"111"},{"ruleId":"96","severity":1,"message":"101","line":64,"column":67,"nodeType":"98","messageId":"99","endLine":64,"endColumn":68,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"103","line":64,"column":72,"nodeType":"98","messageId":"99","endLine":64,"endColumn":73,"suggestions":"113"},{"ruleId":"96","severity":1,"message":"97","line":65,"column":29,"nodeType":"98","messageId":"99","endLine":65,"endColumn":30,"suggestions":"114"},{"ruleId":"96","severity":1,"message":"101","line":65,"column":34,"nodeType":"98","messageId":"99","endLine":65,"endColumn":35,"suggestions":"115"},{"ruleId":"96","severity":1,"message":"103","line":65,"column":39,"nodeType":"98","messageId":"99","endLine":65,"endColumn":40,"suggestions":"116"},{"ruleId":"96","severity":1,"message":"97","line":65,"column":62,"nodeType":"98","messageId":"99","endLine":65,"endColumn":63,"suggestions":"117"},{"ruleId":"96","severity":1,"message":"101","line":65,"column":67,"nodeType":"98","messageId":"99","endLine":65,"endColumn":68,"suggestions":"118"},{"ruleId":"96","severity":1,"message":"103","line":65,"column":72,"nodeType":"98","messageId":"99","endLine":65,"endColumn":73,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":117,"column":25,"nodeType":"122","messageId":"123","endLine":117,"endColumn":226},{"ruleId":"82","severity":1,"message":"124","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":30},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'finalDisplayAllChangeSign' is defined but never used.","'FixIncompleteInputs' is defined but never used.","no-dupe-keys","Duplicate key 'displayAll'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-escape","Unnecessary escape character: \\*.","Literal","unnecessaryEscape",["125","126"],"Unnecessary escape character: \\/.",["127","128"],"Unnecessary escape character: \\+.",["129","130"],["131","132"],["133","134"],["135","136"],["137","138"],["139","140"],["141","142"],["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],"no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","'displayAllExpression' is defined but never used.",{"messageId":"161","fix":"162","desc":"163"},{"messageId":"164","fix":"165","desc":"166"},{"messageId":"161","fix":"167","desc":"163"},{"messageId":"164","fix":"168","desc":"166"},{"messageId":"161","fix":"169","desc":"163"},{"messageId":"164","fix":"170","desc":"166"},{"messageId":"161","fix":"171","desc":"163"},{"messageId":"164","fix":"172","desc":"166"},{"messageId":"161","fix":"173","desc":"163"},{"messageId":"164","fix":"174","desc":"166"},{"messageId":"161","fix":"175","desc":"163"},{"messageId":"164","fix":"176","desc":"166"},{"messageId":"161","fix":"177","desc":"163"},{"messageId":"164","fix":"178","desc":"166"},{"messageId":"161","fix":"179","desc":"163"},{"messageId":"164","fix":"180","desc":"166"},{"messageId":"161","fix":"181","desc":"163"},{"messageId":"164","fix":"182","desc":"166"},{"messageId":"161","fix":"183","desc":"163"},{"messageId":"164","fix":"184","desc":"166"},{"messageId":"161","fix":"185","desc":"163"},{"messageId":"164","fix":"186","desc":"166"},{"messageId":"161","fix":"187","desc":"163"},{"messageId":"164","fix":"188","desc":"166"},{"messageId":"161","fix":"189","desc":"163"},{"messageId":"164","fix":"190","desc":"166"},{"messageId":"161","fix":"191","desc":"163"},{"messageId":"164","fix":"192","desc":"166"},{"messageId":"161","fix":"193","desc":"163"},{"messageId":"164","fix":"194","desc":"166"},{"messageId":"161","fix":"195","desc":"163"},{"messageId":"164","fix":"196","desc":"166"},{"messageId":"161","fix":"197","desc":"163"},{"messageId":"164","fix":"198","desc":"166"},{"messageId":"161","fix":"199","desc":"163"},{"messageId":"164","fix":"200","desc":"166"},"removeEscape",{"range":"201","text":"202"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"203","text":"204"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"205","text":"202"},{"range":"206","text":"204"},{"range":"207","text":"202"},{"range":"208","text":"204"},{"range":"209","text":"202"},{"range":"210","text":"204"},{"range":"211","text":"202"},{"range":"212","text":"204"},{"range":"213","text":"202"},{"range":"214","text":"204"},{"range":"215","text":"202"},{"range":"216","text":"204"},{"range":"217","text":"202"},{"range":"218","text":"204"},{"range":"219","text":"202"},{"range":"220","text":"204"},{"range":"221","text":"202"},{"range":"222","text":"204"},{"range":"223","text":"202"},{"range":"224","text":"204"},{"range":"225","text":"202"},{"range":"226","text":"204"},{"range":"227","text":"202"},{"range":"228","text":"204"},{"range":"229","text":"202"},{"range":"230","text":"204"},{"range":"231","text":"202"},{"range":"232","text":"204"},{"range":"233","text":"202"},{"range":"234","text":"204"},{"range":"235","text":"202"},{"range":"236","text":"204"},{"range":"237","text":"202"},{"range":"238","text":"204"},[3130,3131],"",[3130,3130],"\\",[3135,3136],[3135,3135],[3140,3141],[3140,3140],[3163,3164],[3163,3163],[3168,3169],[3168,3168],[3173,3174],[3173,3173],[3148,3149],[3148,3148],[3153,3154],[3153,3153],[3158,3159],[3158,3158],[3181,3182],[3181,3181],[3186,3187],[3186,3186],[3191,3192],[3191,3191],[3147,3148],[3147,3147],[3152,3153],[3152,3152],[3157,3158],[3157,3157],[3180,3181],[3180,3180],[3185,3186],[3185,3185],[3190,3191],[3190,3190]]