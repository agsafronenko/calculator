[{"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js":"1","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js":"2","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js":"3","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js":"4","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js":"5","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js":"6","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js":"7","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js":"8","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js":"9","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js":"10","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js":"11"},{"size":246,"mtime":1666332524111,"results":"12","hashOfConfig":"13"},{"size":31813,"mtime":1669037537451,"results":"14","hashOfConfig":"13"},{"size":5323,"mtime":1668179863850,"results":"15","hashOfConfig":"13"},{"size":5373,"mtime":1668179817114,"results":"16","hashOfConfig":"13"},{"size":7520,"mtime":1669033824702,"results":"17","hashOfConfig":"13"},{"size":312,"mtime":1668012437190,"results":"18","hashOfConfig":"13"},{"size":946,"mtime":1669038262518,"results":"19","hashOfConfig":"13"},{"size":6414,"mtime":1668180128622,"results":"20","hashOfConfig":"13"},{"size":2723,"mtime":1668793116541,"results":"21","hashOfConfig":"13"},{"size":1562,"mtime":1668670128822,"results":"22","hashOfConfig":"13"},{"size":3111,"mtime":1668793008754,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"rv6zox",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\index.js",[],[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\App.js",["61","62","63","64","65","66","67","68","69"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\abs.js",["70","71","72","73","74","75"],[],"export function abs(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 0.5\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`abs(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`abs(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`abs(${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`abs${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"abs stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`abs(${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`abs(${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"abs stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`abs(${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"abs stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`abs(${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\switchToDenominator.js",["76","77","78","79","80","81"],[],"export function switchToDenominator(state) {\r\n  let displayAllExpression = \"\";\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"abs stage 1\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator !== \"trigonometry\" || state.lastOperator !== \"abs\")) {\r\n    console.log(\"abs stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = state.displayAll.slice(0, firstOpeningIndex).concat(`1 / (${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"abs stage 2\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    displayAllExpression = state.displayAll.slice(0, lastTrigonometryIndex).concat(`1 / (${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return displayAllExpression;\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"abs stage 3\");\r\n    let displayAllLength = displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (displayAll[i] === \")\") closingNum++;\r\n      if (displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    displayAllExpression = displayAll.slice(0, firstOpeningIndex).concat(`1 / (${displayAll.slice(firstOpeningIndex)})`);\r\n    console.log(\"you are here amigo\", displayAllExpression, closingNum, openingNum, firstOpeningIndex);\r\n    return displayAllExpression;\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"abs stage 4\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"abs stage 4.1\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNum, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      displayAllExpression = displayAll.slice(0, lastNegativeNum.index + 1).concat(`1 / ${lastNegativeNum})`);\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"denominator stage 4.2\");\r\n      let lastNegativeNum = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/);\r\n      displayAllExpression = lastNegativeNum.index !== 0 ? displayAll.slice(0, lastNegativeNum.index).concat(\" + \").concat(`1 / (${lastNegativeNum})`) : displayAll.slice(0, lastNegativeNum.index).concat(`1 / (${lastNegativeNum})`);\r\n\r\n      console.log(\"lastNegativeNum.index\", lastNegativeNum.index, \"displayAllExpression\", displayAllExpression);\r\n      return displayAllExpression;\r\n    } else {\r\n      console.log(\"denominator stage 4.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      displayAllExpression = displayAll.slice(0, lastNumIndex).concat(`1 / (${state.displayCur})`);\r\n      return displayAllExpression;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    console.log(\"denominator stage 5\");\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNum = displayAll.match(regexNum);\r\n    displayAllExpression = displayAll.slice(0, lastNum.index).concat(`1 / (${lastNum})`);\r\n    return displayAllExpression;\r\n  }\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\equals.js",["82"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\previousState.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\factorial.js",["83","84","85"],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\trigonometry.js",["86","87","88","89","90","91","92"],[],"export let finalDisplayAll = \"\";\r\n\r\nexport function trigonometryInDegrees(curDegree, trigFunc, state) {\r\n  console.log(state.lastOperator === \"trigonometry\", \"inside trigonom, args:\", curDegree, trigFunc);\r\n  let displayAll = state.displayAll;\r\n  if (state.lastResult !== \"\") displayAll = \"\".concat(state.lastResult);\r\n  if (state.displayAll.match(/\\)\\)$/) && (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\")) {\r\n    console.log(\"trigonometry stage 0.5\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i - 3;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.displayAll.match(/\\)\\)$/ && state.lastOperator !== \"trigonometry\")) {\r\n    console.log(\"trigonometry stage 0.7\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        console.log(\"clos, open, firstOp\", closingNum, openingNum, firstOpeningIndex);\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}(${state.displayAll.slice(firstOpeningIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastOperator === \"trigonometry\" || state.lastOperator === \"abs\") {\r\n    console.log(\"trigonometry stage 1\");\r\n    let matchTrigonometry = state.displayAll.match(/sin|cos|tan|cot|sec|csc|abs/gi);\r\n    let lastTrigonometryIndex = state.displayAll.lastIndexOf(matchTrigonometry[matchTrigonometry.length - 1]);\r\n    finalDisplayAll = state.displayAll.slice(0, lastTrigonometryIndex).concat(`${trigFunc}(${state.displayAll.slice(lastTrigonometryIndex)})`);\r\n    return \"\";\r\n  } else if (state.lastInput === \")\") {\r\n    console.log(\"trigonometry stage 2\");\r\n    let displayAllLength = state.displayAll.length;\r\n    let closingNum = 1;\r\n    let openingNum = 0;\r\n    let firstOpeningIndex = 0;\r\n    for (let i = displayAllLength - 2; i >= 0; i--) {\r\n      if (state.displayAll[i] === \")\") closingNum++;\r\n      if (state.displayAll[i] === \"(\") openingNum++;\r\n      if (closingNum === openingNum) {\r\n        firstOpeningIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    finalDisplayAll = state.displayAll.slice(0, firstOpeningIndex).concat(`${trigFunc}${state.displayAll.slice(firstOpeningIndex)}`);\r\n    return \"\";\r\n  } else if (state.lastInputType === \"digit\") {\r\n    console.log(\"trigonometry stage 3\");\r\n    if (displayAll.match(/[ \\* | \\/ | \\+ | - ] - \\d+\\.\\d+$|[ \\* | \\/ | \\+ | - ] - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.1\");\r\n      let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n      finalDisplayAll = displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/)) {\r\n      console.log(\"abs stage 4.15\");\r\n      let lastNegativeNum = displayAll.match(/\\( - \\d+\\.\\d+$|\\( - \\d+$/);\r\n      finalDisplayAll = displayAll.slice(0, lastNegativeNum.index + 1).concat(`${trigFunc}${lastNegativeNum})`);\r\n\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else if (displayAll.match(/- \\d+\\.\\d+$| - \\d+$/)) {\r\n      console.log(\"trigonometry stage 3.2\");\r\n      let lastNegativeNumIndex = displayAll.match(/ - \\d+\\.\\d+$| - \\d+$/).index;\r\n      let lastPositiveNum = displayAll.match(/\\d+\\.\\d+$|\\d+$/);\r\n      finalDisplayAll =\r\n        lastNegativeNumIndex !== 0\r\n          ? displayAll\r\n              .slice(0, lastNegativeNumIndex)\r\n              .concat(\" + \")\r\n              .concat(`${trigFunc}(${lastPositiveNum * -1})`)\r\n          : displayAll.slice(0, lastNegativeNumIndex).concat(`${trigFunc}(${lastPositiveNum * -1})`);\r\n      console.log(\"lastNegativeNumIndex\", lastNegativeNumIndex, \"lastPositiveNumIndex\", lastPositiveNum, \"finalDisplayAll\", finalDisplayAll);\r\n      let calculateResult = trigonometryCalculate(curDegree * -1, trigFunc, state);\r\n      return calculateResult;\r\n    } else {\r\n      console.log(\"trigonometry stage 3.3\");\r\n      let regexNum = new RegExp(`${state.displayCur}$`);\r\n      let lastNumIndex = displayAll.match(regexNum).index;\r\n      finalDisplayAll = displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayCur})`);\r\n      let calculateResult = trigonometryCalculate(curDegree, trigFunc, state);\r\n      return calculateResult;\r\n    }\r\n  } else if (state.lastInput === \"!\" || state.lastInputType === \"%\") {\r\n    // -\\d+\\.\\d+|\\d+\\.\\d+|sin|cos|tan|cot| yroot | log base | mod | \\+ | - | \\* | \\^ | \\/ |-\\d+|\\d+|\\D\r\n    let regexNum = new RegExp(/-\\d+\\.\\d+!%$|\\d+\\.\\d+!%$|-\\d+!%$|\\d+!%$|-\\d+\\.\\d+%!$|\\d+\\.\\d+%!$|-\\d+%!$|\\d+%!$|-\\d+\\.\\d+!$|\\d+\\.\\d+!$|-\\d+!$|\\d+!$|-\\d+\\.\\d+%$|\\d+\\.\\d+%$|-\\d+%$|\\d+%$/);\r\n    let lastNumIndex = state.displayAll.match(regexNum).index;\r\n    finalDisplayAll = state.displayAll.slice(0, lastNumIndex).concat(`${trigFunc}(${state.displayAll.match(regexNum)})`);\r\n    return \"\";\r\n  }\r\n}\r\n\r\nfunction trigonometryCalculate(curDegree, trigFunc, state) {\r\n  let reciprocal = {\r\n    cot: \"tan\",\r\n    sec: \"cos\",\r\n    csc: \"sin\",\r\n  };\r\n  let calculateResult = Function(`return ${trigFunc} === cot || ${trigFunc} === sec || ${trigFunc} === csc ? 1/ Math.${reciprocal[trigFunc]}(${curDegree} * (Math.PI / 180)) : Math.${trigFunc}(${curDegree} * (Math.PI / 180))`);\r\n  return calculateResult().toString();\r\n}\r\n","C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\changeSign.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\FixIncompleteInputs.js",[],[],"C:\\Users\\agsaf\\Documents\\GitHub\\calculator\\src\\functions\\findExpression.js",[],[],{"ruleId":"93","severity":1,"message":"94","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":9},{"ruleId":"93","severity":1,"message":"97","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":20},{"ruleId":"93","severity":1,"message":"98","line":8,"column":22,"nodeType":"95","messageId":"96","endLine":8,"endColumn":47},{"ruleId":"93","severity":1,"message":"99","line":10,"column":21,"nodeType":"95","messageId":"96","endLine":10,"endColumn":40},{"ruleId":"93","severity":1,"message":"100","line":12,"column":10,"nodeType":"95","messageId":"96","endLine":12,"endColumn":19},{"ruleId":"93","severity":1,"message":"101","line":12,"column":21,"nodeType":"95","messageId":"96","endLine":12,"endColumn":35},{"ruleId":"102","severity":1,"message":"103","line":447,"column":11,"nodeType":"104","messageId":"105","endLine":447,"endColumn":21},{"ruleId":"106","severity":1,"message":"107","line":672,"column":3,"nodeType":"108","messageId":"109","endLine":674,"endColumn":4},{"ruleId":"106","severity":1,"message":"107","line":688,"column":3,"nodeType":"108","messageId":"109","endLine":690,"endColumn":4},{"ruleId":"110","severity":1,"message":"111","line":64,"column":29,"nodeType":"112","messageId":"113","endLine":64,"endColumn":30,"suggestions":"114"},{"ruleId":"110","severity":1,"message":"115","line":64,"column":34,"nodeType":"112","messageId":"113","endLine":64,"endColumn":35,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"117","line":64,"column":39,"nodeType":"112","messageId":"113","endLine":64,"endColumn":40,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":64,"column":62,"nodeType":"112","messageId":"113","endLine":64,"endColumn":63,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"115","line":64,"column":67,"nodeType":"112","messageId":"113","endLine":64,"endColumn":68,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"117","line":64,"column":72,"nodeType":"112","messageId":"113","endLine":64,"endColumn":73,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"111","line":64,"column":29,"nodeType":"112","messageId":"113","endLine":64,"endColumn":30,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"115","line":64,"column":34,"nodeType":"112","messageId":"113","endLine":64,"endColumn":35,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"117","line":64,"column":39,"nodeType":"112","messageId":"113","endLine":64,"endColumn":40,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"111","line":64,"column":62,"nodeType":"112","messageId":"113","endLine":64,"endColumn":63,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"115","line":64,"column":67,"nodeType":"112","messageId":"113","endLine":64,"endColumn":68,"suggestions":"126"},{"ruleId":"110","severity":1,"message":"117","line":64,"column":72,"nodeType":"112","messageId":"113","endLine":64,"endColumn":73,"suggestions":"127"},{"ruleId":"93","severity":1,"message":"128","line":22,"column":53,"nodeType":"95","messageId":"96","endLine":22,"endColumn":74},{"ruleId":"93","severity":1,"message":"129","line":1,"column":10,"nodeType":"95","messageId":"96","endLine":1,"endColumn":20},{"ruleId":"93","severity":1,"message":"130","line":1,"column":22,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"131","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":65,"column":29,"nodeType":"112","messageId":"113","endLine":65,"endColumn":30,"suggestions":"132"},{"ruleId":"110","severity":1,"message":"115","line":65,"column":34,"nodeType":"112","messageId":"113","endLine":65,"endColumn":35,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"117","line":65,"column":39,"nodeType":"112","messageId":"113","endLine":65,"endColumn":40,"suggestions":"134"},{"ruleId":"110","severity":1,"message":"111","line":65,"column":62,"nodeType":"112","messageId":"113","endLine":65,"endColumn":63,"suggestions":"135"},{"ruleId":"110","severity":1,"message":"115","line":65,"column":67,"nodeType":"112","messageId":"113","endLine":65,"endColumn":68,"suggestions":"136"},{"ruleId":"110","severity":1,"message":"117","line":65,"column":72,"nodeType":"112","messageId":"113","endLine":65,"endColumn":73,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":117,"column":25,"nodeType":"140","messageId":"141","endLine":117,"endColumn":226},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'validInput' is defined but never used.","'finalDisplayAllChangeSign' is defined but never used.","'FixIncompleteInputs' is defined but never used.","'factorial' is defined but never used.","'factorialState' is defined but never used.","no-dupe-keys","Duplicate key 'displayAll'.","ObjectExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-escape","Unnecessary escape character: \\*.","Literal","unnecessaryEscape",["142","143"],"Unnecessary escape character: \\/.",["144","145"],"Unnecessary escape character: \\+.",["146","147"],["148","149"],["150","151"],["152","153"],["154","155"],["156","157"],["158","159"],["160","161"],["162","163"],["164","165"],"'addMissingParenthesis' is defined but never used.","'expression' is defined but never used.","'findExpression' is defined but never used.","'calculate' is defined but never used.",["166","167"],["168","169"],["170","171"],["172","173"],["174","175"],["176","177"],"no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor",{"messageId":"178","fix":"179","desc":"180"},{"messageId":"181","fix":"182","desc":"183"},{"messageId":"178","fix":"184","desc":"180"},{"messageId":"181","fix":"185","desc":"183"},{"messageId":"178","fix":"186","desc":"180"},{"messageId":"181","fix":"187","desc":"183"},{"messageId":"178","fix":"188","desc":"180"},{"messageId":"181","fix":"189","desc":"183"},{"messageId":"178","fix":"190","desc":"180"},{"messageId":"181","fix":"191","desc":"183"},{"messageId":"178","fix":"192","desc":"180"},{"messageId":"181","fix":"193","desc":"183"},{"messageId":"178","fix":"194","desc":"180"},{"messageId":"181","fix":"195","desc":"183"},{"messageId":"178","fix":"196","desc":"180"},{"messageId":"181","fix":"197","desc":"183"},{"messageId":"178","fix":"198","desc":"180"},{"messageId":"181","fix":"199","desc":"183"},{"messageId":"178","fix":"200","desc":"180"},{"messageId":"181","fix":"201","desc":"183"},{"messageId":"178","fix":"202","desc":"180"},{"messageId":"181","fix":"203","desc":"183"},{"messageId":"178","fix":"204","desc":"180"},{"messageId":"181","fix":"205","desc":"183"},{"messageId":"178","fix":"206","desc":"180"},{"messageId":"181","fix":"207","desc":"183"},{"messageId":"178","fix":"208","desc":"180"},{"messageId":"181","fix":"209","desc":"183"},{"messageId":"178","fix":"210","desc":"180"},{"messageId":"181","fix":"211","desc":"183"},{"messageId":"178","fix":"212","desc":"180"},{"messageId":"181","fix":"213","desc":"183"},{"messageId":"178","fix":"214","desc":"180"},{"messageId":"181","fix":"215","desc":"183"},{"messageId":"178","fix":"216","desc":"180"},{"messageId":"181","fix":"217","desc":"183"},"removeEscape",{"range":"218","text":"219"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"220","text":"221"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"222","text":"219"},{"range":"223","text":"221"},{"range":"224","text":"219"},{"range":"225","text":"221"},{"range":"226","text":"219"},{"range":"227","text":"221"},{"range":"228","text":"219"},{"range":"229","text":"221"},{"range":"230","text":"219"},{"range":"231","text":"221"},{"range":"232","text":"219"},{"range":"233","text":"221"},{"range":"234","text":"219"},{"range":"235","text":"221"},{"range":"236","text":"219"},{"range":"237","text":"221"},{"range":"238","text":"219"},{"range":"239","text":"221"},{"range":"240","text":"219"},{"range":"241","text":"221"},{"range":"242","text":"219"},{"range":"243","text":"221"},{"range":"244","text":"219"},{"range":"245","text":"221"},{"range":"246","text":"219"},{"range":"247","text":"221"},{"range":"248","text":"219"},{"range":"249","text":"221"},{"range":"250","text":"219"},{"range":"251","text":"221"},{"range":"252","text":"219"},{"range":"253","text":"221"},{"range":"254","text":"219"},{"range":"255","text":"221"},[3130,3131],"",[3130,3130],"\\",[3135,3136],[3135,3135],[3140,3141],[3140,3140],[3163,3164],[3163,3163],[3168,3169],[3168,3168],[3173,3174],[3173,3173],[3148,3149],[3148,3148],[3153,3154],[3153,3153],[3158,3159],[3158,3158],[3181,3182],[3181,3181],[3186,3187],[3186,3186],[3191,3192],[3191,3191],[3147,3148],[3147,3147],[3152,3153],[3152,3152],[3157,3158],[3157,3157],[3180,3181],[3180,3180],[3185,3186],[3185,3185],[3190,3191],[3190,3190]]